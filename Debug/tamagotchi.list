
tamagotchi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5dc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002de8  0800d780  0800d780  0000e780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010568  08010568  00012200  2**0
                  CONTENTS
  4 .ARM          00000008  08010568  08010568  00011568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010570  08010570  00012200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010570  08010570  00011570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010574  08010574  00011574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  08010578  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000172c  20000200  08010778  00012200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000192c  08010778  0001292c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010935  00000000  00000000  00012230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002981  00000000  00000000  00022b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000254e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afc  00000000  00000000  00026308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182a6  00000000  00000000  00026e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e8d  00000000  00000000  0003f0aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e53e  00000000  00000000  00051f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0475  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef4  00000000  00000000  000e04b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e53ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d764 	.word	0x0800d764

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800d764 	.word	0x0800d764

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <BH1750_Init>:
// Bufor na dane odbierane z czujnika BH1750
static uint8_t rx_buffer[2];

// Funkcja inicjalizująca czujnik BH1750
void BH1750_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af02      	add	r7, sp, #8
    uint8_t cmd = BH1750_CMD_POWER_ON;  // Komenda włączenia zasilania
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]

    // Wysyłanie komendy włączenia zasilania do czujnika za pomocą I2C
    HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8000ffe:	1dfa      	adds	r2, r7, #7
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2146      	movs	r1, #70	@ 0x46
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <BH1750_Init+0x2c>)
 800100c:	f003 fcc4 	bl	8004998 <HAL_I2C_Master_Transmit>

    HAL_Delay(200);  // Opóźnienie dla stabilizacji czujnika po włączeniu
 8001010:	20c8      	movs	r0, #200	@ 0xc8
 8001012:	f002 ffdb 	bl	8003fcc <HAL_Delay>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000270 	.word	0x20000270

08001024 <BH1750_StartMeasurement>:

// Funkcja rozpoczynająca pomiar natężenia światła w trybie ciągłym
void BH1750_StartMeasurement(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
    uint8_t cmd = BH1750_CMD_CONT_H_MODE;  // Komenda rozpoczęcia pomiaru w trybie ciągłym o wysokiej rozdzielczości
 800102a:	2310      	movs	r3, #16
 800102c:	71fb      	strb	r3, [r7, #7]

    // Wysyłanie komendy do czujnika za pomocą I2C, aby rozpocząć pomiar
    HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 800102e:	1dfa      	adds	r2, r7, #7
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	2146      	movs	r1, #70	@ 0x46
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <BH1750_StartMeasurement+0x24>)
 800103c:	f003 fcac 	bl	8004998 <HAL_I2C_Master_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000270 	.word	0x20000270

0800104c <BH1750_ReadLux>:

// Funkcja odczytująca natężenie światła w luksach
float BH1750_ReadLux(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
    // Odbieranie dwóch bajtów danych z czujnika BH1750
    HAL_I2C_Master_Receive(&hi2c1, BH1750_ADDRESS, rx_buffer, 2, HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2302      	movs	r3, #2
 800105a:	4a16      	ldr	r2, [pc, #88]	@ (80010b4 <BH1750_ReadLux+0x68>)
 800105c:	2146      	movs	r1, #70	@ 0x46
 800105e:	4816      	ldr	r0, [pc, #88]	@ (80010b8 <BH1750_ReadLux+0x6c>)
 8001060:	f003 fd98 	bl	8004b94 <HAL_I2C_Master_Receive>

    // Łączenie dwóch bajtów w jeden 16-bitowy wynik
    uint16_t raw_data = (rx_buffer[0] << 8) | rx_buffer[1]; // Łączenie bajtów w wartość 16-bitową
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <BH1750_ReadLux+0x68>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <BH1750_ReadLux+0x68>)
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21b      	sxth	r3, r3
 8001076:	80fb      	strh	r3, [r7, #6]

    // Przekształcanie surowych danych na wartość luksów (w domyślnym trybie)
    float lux = (float)raw_data / 1.2;  // Przekształcenie na luks w trybie domyślnym
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001082:	ee17 0a90 	vmov	r0, s15
 8001086:	f7ff fa67 	bl	8000558 <__aeabi_f2d>
 800108a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <BH1750_ReadLux+0x70>)
 8001090:	f7ff fbe4 	bl	800085c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fdac 	bl	8000bf8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	603b      	str	r3, [r7, #0]

    return lux;  // Zwrócenie wartości luksów
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	ee07 3a90 	vmov	s15, r3
}
 80010aa:	eeb0 0a67 	vmov.f32	s0, s15
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000021c 	.word	0x2000021c
 80010b8:	20000270 	.word	0x20000270
 80010bc:	3ff33333 	.word	0x3ff33333

080010c0 <check_collision>:
volatile bool can_animate_energy_gain = false;
volatile bool game_start = false;

// Funkcja sprawdzająca kolizję między dwoma obiektami na ekranie
bool check_collision(int obj1_x, int obj1_y, int obj1_width, int obj1_height,
                     int obj2_x, int obj2_y, int obj2_width, int obj2_height) {
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
    return (obj1_x + obj1_width >= obj2_x &&
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4413      	add	r3, r2
            obj1_x <= obj2_x + obj2_width &&
            obj1_y + obj1_height >= obj2_y &&
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dc13      	bgt.n	8001102 <check_collision+0x42>
            obj1_x <= obj2_x + obj2_width &&
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	4413      	add	r3, r2
    return (obj1_x + obj1_width >= obj2_x &&
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dc0d      	bgt.n	8001102 <check_collision+0x42>
            obj1_y + obj1_height >= obj2_y &&
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4413      	add	r3, r2
            obj1_x <= obj2_x + obj2_width &&
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	dc07      	bgt.n	8001102 <check_collision+0x42>
            obj1_y <= obj2_y + obj2_height);
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	4413      	add	r3, r2
            obj1_y + obj1_height >= obj2_y &&
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	dc01      	bgt.n	8001102 <check_collision+0x42>
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <check_collision+0x44>
 8001102:	2300      	movs	r3, #0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <calculateYCoordinate>:

// Funkcja przeliczająca wartość natężenia światła na pozycję Y na ekranie
int calculateYCoordinate(int lux_value) {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    if (lux_value < 0) lux_value = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	da01      	bge.n	800112a <calculateYCoordinate+0x12>
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
    if (lux_value > g_atribute.wakeup_sensitivity) lux_value = g_atribute.wakeup_sensitivity;
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <calculateYCoordinate+0x48>)
 800112c:	891b      	ldrh	r3, [r3, #8]
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4293      	cmp	r3, r2
 8001134:	dd02      	ble.n	800113c <calculateYCoordinate+0x24>
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <calculateYCoordinate+0x48>)
 8001138:	891b      	ldrh	r3, [r3, #8]
 800113a:	607b      	str	r3, [r7, #4]

    int y = BUTTON_SLIDER_IMG_COORDINATE_Y_MIN + (BUTTON_SLIDER_IMG_COORDINATE_Y_MAX - BUTTON_SLIDER_IMG_COORDINATE_Y_MIN) * lux_value  / g_atribute.wakeup_sensitivity ;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f06f 0232 	mvn.w	r2, #50	@ 0x32
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <calculateYCoordinate+0x48>)
 8001148:	8912      	ldrh	r2, [r2, #8]
 800114a:	fb93 f3f2 	sdiv	r3, r3, r2
 800114e:	3335      	adds	r3, #53	@ 0x35
 8001150:	60fb      	str	r3, [r7, #12]

    return y;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	20000000 	.word	0x20000000

08001164 <Button_Functionality>:

// Funkcja obsługująca działanie przycisków (żółty - zmiana menu, niebieski - start gry)
void Button_Functionality() {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    static bool yellow_button_active = false;
    static bool blue_button_active = false;

    // Obsługa żółtego przycisku (zmiana menu)
    if (HAL_GPIO_ReadPin(GPIOC, YellowBt_Pin) == GPIO_PIN_SET) {
 8001168:	2104      	movs	r1, #4
 800116a:	4827      	ldr	r0, [pc, #156]	@ (8001208 <Button_Functionality+0xa4>)
 800116c:	f003 fa88 	bl	8004680 <HAL_GPIO_ReadPin>
 8001170:	4603      	mov	r3, r0
 8001172:	2b01      	cmp	r3, #1
 8001174:	d117      	bne.n	80011a6 <Button_Functionality+0x42>
        if (!yellow_button_active) {
 8001176:	4b25      	ldr	r3, [pc, #148]	@ (800120c <Button_Functionality+0xa8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d017      	beq.n	80011b4 <Button_Functionality+0x50>
            yellow_button_active = true;
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <Button_Functionality+0xa8>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
            g_atribute.menu++;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <Button_Functionality+0xac>)
 800118c:	88db      	ldrh	r3, [r3, #6]
 800118e:	3301      	adds	r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <Button_Functionality+0xac>)
 8001194:	80da      	strh	r2, [r3, #6]
            if (g_atribute.menu >= 4){
 8001196:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <Button_Functionality+0xac>)
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d90a      	bls.n	80011b4 <Button_Functionality+0x50>
                g_atribute.menu = 1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <Button_Functionality+0xac>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	80da      	strh	r2, [r3, #6]
 80011a4:	e006      	b.n	80011b4 <Button_Functionality+0x50>
            }
        }
    } else {
        if (yellow_button_active) {
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <Button_Functionality+0xa8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <Button_Functionality+0x50>
            yellow_button_active = false;
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <Button_Functionality+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
        }
    }

    // Obsługa niebieskiego przycisku (start gry w menu 3)
    if (HAL_GPIO_ReadPin(GPIOC, BlueBt_Pin) == GPIO_PIN_SET) {
 80011b4:	2108      	movs	r1, #8
 80011b6:	4814      	ldr	r0, [pc, #80]	@ (8001208 <Button_Functionality+0xa4>)
 80011b8:	f003 fa62 	bl	8004680 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d114      	bne.n	80011ec <Button_Functionality+0x88>
        if (!blue_button_active && g_atribute.menu == 3) {
 80011c2:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <Button_Functionality+0xb0>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d018      	beq.n	8001202 <Button_Functionality+0x9e>
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <Button_Functionality+0xac>)
 80011d2:	88db      	ldrh	r3, [r3, #6]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d114      	bne.n	8001202 <Button_Functionality+0x9e>
            game_start = true;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <Button_Functionality+0xb4>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
            OLED_Fill(WHITE);
 80011de:	2001      	movs	r0, #1
 80011e0:	f001 ff98 	bl	8003114 <OLED_Fill>
            blue_button_active = true;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <Button_Functionality+0xb0>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
    } else {
        if (blue_button_active && g_atribute.menu == 3) {
            blue_button_active = false;
        }
    }
}
 80011ea:	e00a      	b.n	8001202 <Button_Functionality+0x9e>
        if (blue_button_active && g_atribute.menu == 3) {
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <Button_Functionality+0xb0>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <Button_Functionality+0x9e>
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <Button_Functionality+0xac>)
 80011f6:	88db      	ldrh	r3, [r3, #6]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d102      	bne.n	8001202 <Button_Functionality+0x9e>
            blue_button_active = false;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <Button_Functionality+0xb0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020800 	.word	0x40020800
 800120c:	20000269 	.word	0x20000269
 8001210:	20000000 	.word	0x20000000
 8001214:	2000026a 	.word	0x2000026a
 8001218:	20000268 	.word	0x20000268

0800121c <Atribute_Update>:

// Funkcja aktualizująca wyświetlanie atrybutów Tamagotchi na ekranie
void Atribute_Update(){
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af02      	add	r7, sp, #8
    // Sprawdzenie czy którykolwiek z atrybutów uległ zmianie
    if(g_atribute.energy != g_atribute_comparing.energy ||
 8001222:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <Atribute_Update+0xc8>)
 8001224:	889a      	ldrh	r2, [r3, #4]
 8001226:	4b30      	ldr	r3, [pc, #192]	@ (80012e8 <Atribute_Update+0xcc>)
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d10b      	bne.n	8001246 <Atribute_Update+0x2a>
       g_atribute.fun != g_atribute_comparing.fun ||
 800122e:	4b2d      	ldr	r3, [pc, #180]	@ (80012e4 <Atribute_Update+0xc8>)
 8001230:	885a      	ldrh	r2, [r3, #2]
 8001232:	4b2d      	ldr	r3, [pc, #180]	@ (80012e8 <Atribute_Update+0xcc>)
 8001234:	885b      	ldrh	r3, [r3, #2]
    if(g_atribute.energy != g_atribute_comparing.energy ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d105      	bne.n	8001246 <Atribute_Update+0x2a>
       g_atribute.food != g_atribute_comparing.food){
 800123a:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <Atribute_Update+0xc8>)
 800123c:	881a      	ldrh	r2, [r3, #0]
 800123e:	4b2a      	ldr	r3, [pc, #168]	@ (80012e8 <Atribute_Update+0xcc>)
 8001240:	881b      	ldrh	r3, [r3, #0]
       g_atribute.fun != g_atribute_comparing.fun ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d04a      	beq.n	80012dc <Atribute_Update+0xc0>

        // Aktualizacja wskaźnika energii
        OLED_FillRectangle(0,0,60,1,true);
 8001246:	2301      	movs	r3, #1
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	223c      	movs	r2, #60	@ 0x3c
 800124e:	2100      	movs	r1, #0
 8001250:	2000      	movs	r0, #0
 8001252:	f002 f927 	bl	80034a4 <OLED_FillRectangle>
        OLED_PrintImageFromCoords(ENERGY_ARRAY[g_atribute.energy],
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <Atribute_Update+0xc8>)
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	461a      	mov	r2, r3
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <Atribute_Update+0xd0>)
 800125e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001262:	2313      	movs	r3, #19
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2337      	movs	r3, #55	@ 0x37
 8001268:	2201      	movs	r2, #1
 800126a:	2100      	movs	r1, #0
 800126c:	f002 f854 	bl	8003318 <OLED_PrintImageFromCoords>
            ENERGY_COORDINATE_X, ENERGY_COORDINATE_Y,
            ENERGY_IMG_WIDTH, ENERGY_IMG_HEIGHT);

        // Aktualizacja wskaźnika zabawy
        OLED_FillRectangle(0,20,60,3,true);
 8001270:	2301      	movs	r3, #1
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2303      	movs	r3, #3
 8001276:	223c      	movs	r2, #60	@ 0x3c
 8001278:	2114      	movs	r1, #20
 800127a:	2000      	movs	r0, #0
 800127c:	f002 f912 	bl	80034a4 <OLED_FillRectangle>
        OLED_PrintImageFromCoords(FUN_ARRAY[g_atribute.fun],
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <Atribute_Update+0xc8>)
 8001282:	885b      	ldrh	r3, [r3, #2]
 8001284:	461a      	mov	r2, r3
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <Atribute_Update+0xd4>)
 8001288:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800128c:	2314      	movs	r3, #20
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2338      	movs	r3, #56	@ 0x38
 8001292:	2217      	movs	r2, #23
 8001294:	2100      	movs	r1, #0
 8001296:	f002 f83f 	bl	8003318 <OLED_PrintImageFromCoords>
            FUN_COORDINATE_X, FUN_COORDINATE_Y,
            FUN_IMG_WIDTH, FUN_IMG_HEIGHT);

        // Aktualizacja wskaźnika jedzenia
        OLED_FillRectangle(0,43,60,3,true);
 800129a:	2301      	movs	r3, #1
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2303      	movs	r3, #3
 80012a0:	223c      	movs	r2, #60	@ 0x3c
 80012a2:	212b      	movs	r1, #43	@ 0x2b
 80012a4:	2000      	movs	r0, #0
 80012a6:	f002 f8fd 	bl	80034a4 <OLED_FillRectangle>
        OLED_PrintImageFromCoords(FOOD_ARRAY[g_atribute.food],
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <Atribute_Update+0xc8>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <Atribute_Update+0xd8>)
 80012b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80012b6:	2313      	movs	r3, #19
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2337      	movs	r3, #55	@ 0x37
 80012bc:	222d      	movs	r2, #45	@ 0x2d
 80012be:	2100      	movs	r1, #0
 80012c0:	f002 f82a 	bl	8003318 <OLED_PrintImageFromCoords>
            FOOD_COORDINATE_X, FOOD_COORDINATE_Y,
            FOOD_IMG_WIDTH, FOOD_IMG_HEIGHT);

        // Aktualizacja wartości porównawczych
        g_atribute_comparing.energy = g_atribute.energy;
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <Atribute_Update+0xc8>)
 80012c6:	889a      	ldrh	r2, [r3, #4]
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <Atribute_Update+0xcc>)
 80012ca:	809a      	strh	r2, [r3, #4]
        g_atribute_comparing.food = g_atribute.food;
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <Atribute_Update+0xc8>)
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <Atribute_Update+0xcc>)
 80012d2:	801a      	strh	r2, [r3, #0]
        g_atribute_comparing.fun = g_atribute.fun;
 80012d4:	4b03      	ldr	r3, [pc, #12]	@ (80012e4 <Atribute_Update+0xc8>)
 80012d6:	885a      	ldrh	r2, [r3, #2]
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <Atribute_Update+0xcc>)
 80012da:	805a      	strh	r2, [r3, #2]
    }
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000010 	.word	0x20000010
 80012ec:	0800fed8 	.word	0x0800fed8
 80012f0:	0800fef0 	.word	0x0800fef0
 80012f4:	0800ff08 	.word	0x0800ff08

080012f8 <Update_menu1>:

// Funkcja aktualizująca animację w menu 1
void Update_menu1() {
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08f      	sub	sp, #60	@ 0x3c
 80012fc:	af02      	add	r7, sp, #8
    static uint8_t repeat_count = 0; // Licznik powtórzeń dla aktualnego kierunku
    static bool is_left = true;     // Flaga wskazująca aktualny kierunek animacji

    uint32_t current_time = HAL_GetTick();
 80012fe:	f002 fe59 	bl	8003fb4 <HAL_GetTick>
 8001302:	62f8      	str	r0, [r7, #44]	@ 0x2c

    if (current_time - last_update_main_time >= 400) {
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <Update_menu1+0xc8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001310:	d351      	bcc.n	80013b6 <Update_menu1+0xbe>
        // Tablice przechowujące obrazy dla lewej i prawej animacji
        const uint8_t* left_animation_frames[] = {
 8001312:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <Update_menu1+0xcc>)
 8001314:	f107 0414 	add.w	r4, r7, #20
 8001318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800131a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ANIMATION_MAIN_LEFT_0, ANIMATION_MAIN_LEFT_1, ANIMATION_MAIN_LEFT_2, ANIMATION_MAIN_LEFT_1
        };

        const uint8_t* right_animation_frames[] = {
 800131e:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <Update_menu1+0xd0>)
 8001320:	1d3c      	adds	r4, r7, #4
 8001322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            ANIMATION_MAIN_RIGHT_0, ANIMATION_MAIN_RIGHT_1, ANIMATION_MAIN_RIGHT_2, ANIMATION_MAIN_RIGHT_1
        };

        // Wybierz odpowiednią tablicę i oblicz indeks klatki
        const uint8_t** selected_frames = is_left ? left_animation_frames : right_animation_frames;
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <Update_menu1+0xd4>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <Update_menu1+0x3e>
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	e000      	b.n	8001338 <Update_menu1+0x40>
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint8_t frame_index = loop_animation % 4;
 800133a:	4b25      	ldr	r3, [pc, #148]	@ (80013d0 <Update_menu1+0xd8>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        // Rysuj wybraną ramkę
        OLED_PrintImageFromCoords(selected_frames[frame_index], ANIMATION_COORDINATE_X, ANIMATION_COORDINATE_Y, ANIMATION_IMG_WIDTH, ANIMATION_IMG_HEIGHT);
 8001348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001350:	4413      	add	r3, r2
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	2340      	movs	r3, #64	@ 0x40
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2348      	movs	r3, #72	@ 0x48
 800135a:	2200      	movs	r2, #0
 800135c:	2137      	movs	r1, #55	@ 0x37
 800135e:	f001 ffdb 	bl	8003318 <OLED_PrintImageFromCoords>

        // Zwiększ licznik animacji
        loop_animation++;
 8001362:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <Update_menu1+0xd8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <Update_menu1+0xd8>)
 800136e:	701a      	strb	r2, [r3, #0]

        // Jeśli zakończono jedną pełną animację (4 klatki)
        if (frame_index == 3) {
 8001370:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001374:	2b03      	cmp	r3, #3
 8001376:	d11b      	bne.n	80013b0 <Update_menu1+0xb8>
            repeat_count++;
 8001378:	4b16      	ldr	r3, [pc, #88]	@ (80013d4 <Update_menu1+0xdc>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <Update_menu1+0xdc>)
 8001382:	701a      	strb	r2, [r3, #0]

            // Po trzech powtórzeniach zmień kierunek animacji
            if (repeat_count >= 3) {
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <Update_menu1+0xdc>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d911      	bls.n	80013b0 <Update_menu1+0xb8>
                is_left = !is_left;  // Zmień kierunek
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <Update_menu1+0xd4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf14      	ite	ne
 8001394:	2301      	movne	r3, #1
 8001396:	2300      	moveq	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f083 0301 	eor.w	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <Update_menu1+0xd4>)
 80013a8:	701a      	strb	r2, [r3, #0]
                repeat_count = 0;   // Zresetuj licznik powtórzeń
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <Update_menu1+0xdc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
            }
        }

        // Zaktualizuj czas
        last_update_main_time = current_time;
 80013b0:	4a03      	ldr	r2, [pc, #12]	@ (80013c0 <Update_menu1+0xc8>)
 80013b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b4:	6013      	str	r3, [r2, #0]
    }
}
 80013b6:	bf00      	nop
 80013b8:	3734      	adds	r7, #52	@ 0x34
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000234 	.word	0x20000234
 80013c4:	0800d780 	.word	0x0800d780
 80013c8:	0800d790 	.word	0x0800d790
 80013cc:	20000029 	.word	0x20000029
 80013d0:	2000025f 	.word	0x2000025f
 80013d4:	2000026b 	.word	0x2000026b

080013d8 <Start_menu1>:



// Funkcja inicjalizująca menu 1 (główny ekran)
void Start_menu1(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af02      	add	r7, sp, #8
    // Resetowanie zmiennych animacji
    loop_animation = 0;
 80013de:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <Start_menu1+0xac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
    last_update_main_time = 0;
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <Start_menu1+0xb0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

    // Czyszczenie ekranu i rysowanie interfejsu
    OLED_Clear();
 80013ea:	f001 fed3 	bl	8003194 <OLED_Clear>

    // Rysowanie wskaźników stanu
    OLED_FillRectangle(0,0,60,1,true);  // Linia górna
 80013ee:	2301      	movs	r3, #1
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	2301      	movs	r3, #1
 80013f4:	223c      	movs	r2, #60	@ 0x3c
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f002 f853 	bl	80034a4 <OLED_FillRectangle>
    OLED_PrintImageFromCoords(ENERGY_ARRAY[g_atribute.energy],
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <Start_menu1+0xb4>)
 8001400:	889b      	ldrh	r3, [r3, #4]
 8001402:	461a      	mov	r2, r3
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <Start_menu1+0xb8>)
 8001406:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800140a:	2313      	movs	r3, #19
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2337      	movs	r3, #55	@ 0x37
 8001410:	2201      	movs	r2, #1
 8001412:	2100      	movs	r1, #0
 8001414:	f001 ff80 	bl	8003318 <OLED_PrintImageFromCoords>
        ENERGY_COORDINATE_X, ENERGY_COORDINATE_Y,
        ENERGY_IMG_WIDTH, ENERGY_IMG_HEIGHT);  // Wskaźnik energii

    OLED_FillRectangle(0,20,60,3,true);  // Linia środkowa
 8001418:	2301      	movs	r3, #1
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2303      	movs	r3, #3
 800141e:	223c      	movs	r2, #60	@ 0x3c
 8001420:	2114      	movs	r1, #20
 8001422:	2000      	movs	r0, #0
 8001424:	f002 f83e 	bl	80034a4 <OLED_FillRectangle>
    OLED_PrintImageFromCoords(FUN_ARRAY[g_atribute.fun],
 8001428:	4b18      	ldr	r3, [pc, #96]	@ (800148c <Start_menu1+0xb4>)
 800142a:	885b      	ldrh	r3, [r3, #2]
 800142c:	461a      	mov	r2, r3
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <Start_menu1+0xbc>)
 8001430:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001434:	2314      	movs	r3, #20
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2338      	movs	r3, #56	@ 0x38
 800143a:	2217      	movs	r2, #23
 800143c:	2100      	movs	r1, #0
 800143e:	f001 ff6b 	bl	8003318 <OLED_PrintImageFromCoords>
        FUN_COORDINATE_X, FUN_COORDINATE_Y,
        FUN_IMG_WIDTH, FUN_IMG_HEIGHT);  // Wskaźnik zabawy

    OLED_FillRectangle(0,43,60,3,true);  // Linia dolna
 8001442:	2301      	movs	r3, #1
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2303      	movs	r3, #3
 8001448:	223c      	movs	r2, #60	@ 0x3c
 800144a:	212b      	movs	r1, #43	@ 0x2b
 800144c:	2000      	movs	r0, #0
 800144e:	f002 f829 	bl	80034a4 <OLED_FillRectangle>
    OLED_PrintImageFromCoords(FOOD_ARRAY[g_atribute.food],
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <Start_menu1+0xb4>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <Start_menu1+0xc0>)
 800145a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800145e:	2313      	movs	r3, #19
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2337      	movs	r3, #55	@ 0x37
 8001464:	222d      	movs	r2, #45	@ 0x2d
 8001466:	2100      	movs	r1, #0
 8001468:	f001 ff56 	bl	8003318 <OLED_PrintImageFromCoords>
        FOOD_COORDINATE_X, FOOD_COORDINATE_Y,
        FOOD_IMG_WIDTH, FOOD_IMG_HEIGHT);  // Wskaźnik jedzenia

    // Rysowanie początkowej animacji
    OLED_PrintImageFromCoords(ANIMATION_MAIN_LEFT_0,
 800146c:	2340      	movs	r3, #64	@ 0x40
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2348      	movs	r3, #72	@ 0x48
 8001472:	2200      	movs	r2, #0
 8001474:	2137      	movs	r1, #55	@ 0x37
 8001476:	4809      	ldr	r0, [pc, #36]	@ (800149c <Start_menu1+0xc4>)
 8001478:	f001 ff4e 	bl	8003318 <OLED_PrintImageFromCoords>
        ANIMATION_COORDINATE_X, ANIMATION_COORDINATE_Y,
        ANIMATION_IMG_WIDTH, ANIMATION_IMG_HEIGHT);
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000025f 	.word	0x2000025f
 8001488:	20000234 	.word	0x20000234
 800148c:	20000000 	.word	0x20000000
 8001490:	0800fed8 	.word	0x0800fed8
 8001494:	0800fef0 	.word	0x0800fef0
 8001498:	0800ff08 	.word	0x0800ff08
 800149c:	0800e448 	.word	0x0800e448

080014a0 <Start_menu2>:

// Funkcja inicjalizująca menu 2 (tryb snu)
void Start_menu2(){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af02      	add	r7, sp, #8
    // Resetowanie wszystkich flag i liczników
    angry = false;
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <Start_menu2+0xac>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
    sleep_interupt = true;
 80014ac:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <Start_menu2+0xb0>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
    can_animate_energy_gain = false;
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <Start_menu2+0xb4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
    last_face_update = 0;
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <Start_menu2+0xb8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
    current_face = 0;
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <Start_menu2+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
    last_noise_update = 0;
 80014c4:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <Start_menu2+0xc0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
    current_angry_noise = 0;
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <Start_menu2+0xc4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
    last_button_slider_update = 0;
 80014d0:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <Start_menu2+0xc8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    last_fill_rectangle_update = 0;
 80014d6:	4b25      	ldr	r3, [pc, #148]	@ (800156c <Start_menu2+0xcc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
    last_energy_gain_update = 0;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <Start_menu2+0xd0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
    last_energy_gain_animation_update = 0;
 80014e2:	4b24      	ldr	r3, [pc, #144]	@ (8001574 <Start_menu2+0xd4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
    up_energy_gain_animation = 0;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <Start_menu2+0xd8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]

    // Inicjalizacja ekranu
    OLED_Clear();  // Czyszczenie ekranu
 80014ee:	f001 fe51 	bl	8003194 <OLED_Clear>

    // Rysowanie elementów interfejsu
    OLED_PrintImageFromCoords(MENU2_START_IMG,
 80014f2:	2340      	movs	r3, #64	@ 0x40
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	481f      	ldr	r0, [pc, #124]	@ (800157c <Start_menu2+0xdc>)
 80014fe:	f001 ff0b 	bl	8003318 <OLED_PrintImageFromCoords>
        DEAFULT_COORDINATE_Y,
        MAX_WIDTH,
        MAX_HEIGHT);  // Tło menu 2

    // Rysowanie początkowej twarzy śpiącego Tamagotchi
    OLED_PrintImageFromCoords(SLEEEP_FACE_0,
 8001502:	2313      	movs	r3, #19
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2317      	movs	r3, #23
 8001508:	2202      	movs	r2, #2
 800150a:	2144      	movs	r1, #68	@ 0x44
 800150c:	481c      	ldr	r0, [pc, #112]	@ (8001580 <Start_menu2+0xe0>)
 800150e:	f001 ff03 	bl	8003318 <OLED_PrintImageFromCoords>
        FACE_IMG_COORDINATE_Y,
        FACE_IMG_WIDTH,
        FACE_IMG_HEIGHT);

    // Rysowanie początkowej animacji "ZZZ"
    OLED_PrintSmallImageFromCoords(ZZZ_ARRAY[9],
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <Start_menu2+0xe4>)
 8001514:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001516:	230e      	movs	r3, #14
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	230a      	movs	r3, #10
 800151c:	2201      	movs	r2, #1
 800151e:	2139      	movs	r1, #57	@ 0x39
 8001520:	f001 fe40 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
        EMOTION_IMG_COORDINATE_Y,
        EMOTION_IMG_WIDTH,
        EMOTION_IMG_HEIGHT);

    // Rysowanie suwaka i jego przycisku
    OLED_PrintImageFromCoords(SLIDER_IMG,
 8001524:	2340      	movs	r3, #64	@ 0x40
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2310      	movs	r3, #16
 800152a:	2200      	movs	r2, #0
 800152c:	2115      	movs	r1, #21
 800152e:	4816      	ldr	r0, [pc, #88]	@ (8001588 <Start_menu2+0xe8>)
 8001530:	f001 fef2 	bl	8003318 <OLED_PrintImageFromCoords>
        SLIDER_IMG_COORDINATE_X,
        SLIDER_IMG_COORDINATE_Y,
        SLIDER_IMG_WIDTH,
        SLIDER_IMG_HEIGHT);
    OLED_PrintSmallImageFromCoords(BUTTON_SLIDER_IMG,
 8001534:	2309      	movs	r3, #9
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	230c      	movs	r3, #12
 800153a:	2235      	movs	r2, #53	@ 0x35
 800153c:	2117      	movs	r1, #23
 800153e:	4813      	ldr	r0, [pc, #76]	@ (800158c <Start_menu2+0xec>)
 8001540:	f001 fe30 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
        BUTTON_SLIDER_IMG_COORDINATE_X,
        BUTTON_SLIDER_IMG_COORDINATE_Y_MIN,
        BUTTON_SLIDER_IMG_WIDTH,
        BUTTON_SLIDER_IMG_HEIGHT);
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000265 	.word	0x20000265
 8001550:	20000028 	.word	0x20000028
 8001554:	20000267 	.word	0x20000267
 8001558:	20000238 	.word	0x20000238
 800155c:	20000264 	.word	0x20000264
 8001560:	2000023c 	.word	0x2000023c
 8001564:	2000025d 	.word	0x2000025d
 8001568:	20000230 	.word	0x20000230
 800156c:	2000022c 	.word	0x2000022c
 8001570:	20000248 	.word	0x20000248
 8001574:	2000024c 	.word	0x2000024c
 8001578:	2000025e 	.word	0x2000025e
 800157c:	0800f4dc 	.word	0x0800f4dc
 8001580:	0800f308 	.word	0x0800f308
 8001584:	0800feb0 	.word	0x0800feb0
 8001588:	0800f428 	.word	0x0800f428
 800158c:	0800f4a8 	.word	0x0800f4a8

08001590 <Update_menu2>:
// Funkcja aktualizująca menu 2 (tryb snu)
void Update_menu2(){
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af02      	add	r7, sp, #8
    uint32_t current_time = HAL_GetTick();
 8001596:	f002 fd0d 	bl	8003fb4 <HAL_GetTick>
 800159a:	6078      	str	r0, [r7, #4]

    // Aktualizacja animacji twarzy (co 500ms)
    if (current_time - last_face_update >= 500) {
 800159c:	4b8e      	ldr	r3, [pc, #568]	@ (80017d8 <Update_menu2+0x248>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015a8:	d34a      	bcc.n	8001640 <Update_menu2+0xb0>
        if (angry){
 80015aa:	4b8c      	ldr	r3, [pc, #560]	@ (80017dc <Update_menu2+0x24c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <Update_menu2+0x36>
            // Wyświetlanie złej twarzy gdy Tamagotchi jest zły
            OLED_PrintImageFromCoords(ANGRY_FACE_IMG,
 80015b4:	2313      	movs	r3, #19
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2317      	movs	r3, #23
 80015ba:	2202      	movs	r2, #2
 80015bc:	2144      	movs	r1, #68	@ 0x44
 80015be:	4888      	ldr	r0, [pc, #544]	@ (80017e0 <Update_menu2+0x250>)
 80015c0:	f001 feaa 	bl	8003318 <OLED_PrintImageFromCoords>
 80015c4:	e039      	b.n	800163a <Update_menu2+0xaa>
                FACE_IMG_COORDINATE_Y,
                FACE_IMG_WIDTH,
                FACE_IMG_HEIGHT);
        } else {
            // Animacja śpiącej twarzy
            switch(current_face) {
 80015c6:	4b87      	ldr	r3, [pc, #540]	@ (80017e4 <Update_menu2+0x254>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d826      	bhi.n	800161e <Update_menu2+0x8e>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <Update_menu2+0x48>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015fb 	.word	0x080015fb
 80015e0:	0800160d 	.word	0x0800160d
 80015e4:	080015fb 	.word	0x080015fb
                case 0:
                    OLED_PrintImageFromCoords(SLEEEP_FACE_0,
 80015e8:	2313      	movs	r3, #19
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2317      	movs	r3, #23
 80015ee:	2202      	movs	r2, #2
 80015f0:	2144      	movs	r1, #68	@ 0x44
 80015f2:	487d      	ldr	r0, [pc, #500]	@ (80017e8 <Update_menu2+0x258>)
 80015f4:	f001 fe90 	bl	8003318 <OLED_PrintImageFromCoords>
                        FACE_IMG_COORDINATE_X,
                        FACE_IMG_COORDINATE_Y,
                        FACE_IMG_WIDTH,
                        FACE_IMG_HEIGHT);
                    break;
 80015f8:	e011      	b.n	800161e <Update_menu2+0x8e>
                case 1:
                case 3:
                    OLED_PrintImageFromCoords(SLEEEP_FACE_1,
 80015fa:	2313      	movs	r3, #19
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2317      	movs	r3, #23
 8001600:	2202      	movs	r2, #2
 8001602:	2144      	movs	r1, #68	@ 0x44
 8001604:	4879      	ldr	r0, [pc, #484]	@ (80017ec <Update_menu2+0x25c>)
 8001606:	f001 fe87 	bl	8003318 <OLED_PrintImageFromCoords>
                        FACE_IMG_COORDINATE_X,
                        FACE_IMG_COORDINATE_Y,
                        FACE_IMG_WIDTH,
                        FACE_IMG_HEIGHT);
                    break;
 800160a:	e008      	b.n	800161e <Update_menu2+0x8e>
                case 2:
                    OLED_PrintImageFromCoords(SLEEEP_FACE_2,
 800160c:	2313      	movs	r3, #19
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2317      	movs	r3, #23
 8001612:	2202      	movs	r2, #2
 8001614:	2144      	movs	r1, #68	@ 0x44
 8001616:	4876      	ldr	r0, [pc, #472]	@ (80017f0 <Update_menu2+0x260>)
 8001618:	f001 fe7e 	bl	8003318 <OLED_PrintImageFromCoords>
                        FACE_IMG_COORDINATE_X,
                        FACE_IMG_COORDINATE_Y,
                        FACE_IMG_WIDTH,
                        FACE_IMG_HEIGHT);
                    break;
 800161c:	bf00      	nop
            }
            current_face = (current_face + 1) % 4;  // Przejście do następnej klatki animacji
 800161e:	4b71      	ldr	r3, [pc, #452]	@ (80017e4 <Update_menu2+0x254>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	3301      	adds	r3, #1
 8001626:	425a      	negs	r2, r3
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	bf58      	it	pl
 8001632:	4253      	negpl	r3, r2
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b6b      	ldr	r3, [pc, #428]	@ (80017e4 <Update_menu2+0x254>)
 8001638:	701a      	strb	r2, [r3, #0]
        }
        last_face_update = current_time;
 800163a:	4a67      	ldr	r2, [pc, #412]	@ (80017d8 <Update_menu2+0x248>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]
    }

    // Aktualizacja animacji dźwięków (co 300ms)
    if (current_time - last_noise_update >= 300) {
 8001640:	4b6c      	ldr	r3, [pc, #432]	@ (80017f4 <Update_menu2+0x264>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800164c:	d351      	bcc.n	80016f2 <Update_menu2+0x162>
        if (angry){
 800164e:	4b63      	ldr	r3, [pc, #396]	@ (80017dc <Update_menu2+0x24c>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d024      	beq.n	80016a2 <Update_menu2+0x112>
            // Animacja dźwięków złości (XXX)
            if (current_angry_noise < 6) {
 8001658:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <Update_menu2+0x268>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b05      	cmp	r3, #5
 8001660:	d844      	bhi.n	80016ec <Update_menu2+0x15c>
                OLED_PrintSmallImageFromCoords(XXX_ARRAY[current_angry_noise],
 8001662:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <Update_menu2+0x268>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	4b64      	ldr	r3, [pc, #400]	@ (80017fc <Update_menu2+0x26c>)
 800166c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001670:	230e      	movs	r3, #14
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	230a      	movs	r3, #10
 8001676:	2201      	movs	r2, #1
 8001678:	2139      	movs	r1, #57	@ 0x39
 800167a:	f001 fd93 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                    EMOTION_IMG_COORDINATE_X,
                    EMOTION_IMG_COORDINATE_Y,
                    EMOTION_IMG_WIDTH,
                    EMOTION_IMG_HEIGHT);
                current_angry_noise = (current_angry_noise + 1) % 6;
 800167e:	4b5e      	ldr	r3, [pc, #376]	@ (80017f8 <Update_menu2+0x268>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	4b5e      	ldr	r3, [pc, #376]	@ (8001800 <Update_menu2+0x270>)
 8001688:	fb83 3102 	smull	r3, r1, r3, r2
 800168c:	17d3      	asrs	r3, r2, #31
 800168e:	1ac9      	subs	r1, r1, r3
 8001690:	460b      	mov	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	1ad1      	subs	r1, r2, r3
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	4b56      	ldr	r3, [pc, #344]	@ (80017f8 <Update_menu2+0x268>)
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e024      	b.n	80016ec <Update_menu2+0x15c>
            }
        } else {
            // Animacja dźwięków snu (ZZZ)
            if (current_sleep_noise < 10) {
 80016a2:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <Update_menu2+0x274>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b09      	cmp	r3, #9
 80016aa:	d81f      	bhi.n	80016ec <Update_menu2+0x15c>
                OLED_PrintSmallImageFromCoords(ZZZ_ARRAY[current_sleep_noise],
 80016ac:	4b55      	ldr	r3, [pc, #340]	@ (8001804 <Update_menu2+0x274>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b54      	ldr	r3, [pc, #336]	@ (8001808 <Update_menu2+0x278>)
 80016b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80016ba:	230e      	movs	r3, #14
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	230a      	movs	r3, #10
 80016c0:	2201      	movs	r2, #1
 80016c2:	2139      	movs	r1, #57	@ 0x39
 80016c4:	f001 fd6e 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                    EMOTION_IMG_COORDINATE_X,
                    EMOTION_IMG_COORDINATE_Y,
                    EMOTION_IMG_WIDTH,
                    EMOTION_IMG_HEIGHT);
                current_sleep_noise = (current_sleep_noise + 1) % 10;
 80016c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001804 <Update_menu2+0x274>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	4b4e      	ldr	r3, [pc, #312]	@ (800180c <Update_menu2+0x27c>)
 80016d2:	fb83 1302 	smull	r1, r3, r3, r2
 80016d6:	1099      	asrs	r1, r3, #2
 80016d8:	17d3      	asrs	r3, r2, #31
 80016da:	1ac9      	subs	r1, r1, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	1ad1      	subs	r1, r2, r3
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	4b46      	ldr	r3, [pc, #280]	@ (8001804 <Update_menu2+0x274>)
 80016ea:	701a      	strb	r2, [r3, #0]
            }
        }
        last_noise_update = current_time;
 80016ec:	4a41      	ldr	r2, [pc, #260]	@ (80017f4 <Update_menu2+0x264>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
    }

    // Aktualizacja pozycji suwaka na podstawie czujnika światła (co 100ms)
    if (current_time - last_button_slider_update >= 100) {
 80016f2:	4b47      	ldr	r3, [pc, #284]	@ (8001810 <Update_menu2+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b63      	cmp	r3, #99	@ 0x63
 80016fc:	d939      	bls.n	8001772 <Update_menu2+0x1e2>
        int current_y = calculateYCoordinate(BH1750_ReadLux());
 80016fe:	f7ff fca5 	bl	800104c <BH1750_ReadLux>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	ee17 0a90 	vmov	r0, s15
 800170e:	f7ff fd03 	bl	8001118 <calculateYCoordinate>
 8001712:	6038      	str	r0, [r7, #0]

        // Odświeżanie tła suwaka
        if (current_time - last_fill_rectangle_update >= 100){
 8001714:	4b3f      	ldr	r3, [pc, #252]	@ (8001814 <Update_menu2+0x284>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b63      	cmp	r3, #99	@ 0x63
 800171e:	d90c      	bls.n	800173a <Update_menu2+0x1aa>
            if (current_y != last_button_y){
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <Update_menu2+0x288>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d007      	beq.n	800173a <Update_menu2+0x1aa>
                OLED_FillRectangle(22, 1 ,14,62,true);
 800172a:	2301      	movs	r3, #1
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	233e      	movs	r3, #62	@ 0x3e
 8001730:	220e      	movs	r2, #14
 8001732:	2101      	movs	r1, #1
 8001734:	2016      	movs	r0, #22
 8001736:	f001 feb5 	bl	80034a4 <OLED_FillRectangle>
            }
        }

        // Rysowanie przycisku suwaka
        OLED_PrintSmallImageFromCoords(BUTTON_SLIDER_IMG,
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	2309      	movs	r3, #9
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	230c      	movs	r3, #12
 8001744:	2117      	movs	r1, #23
 8001746:	4835      	ldr	r0, [pc, #212]	@ (800181c <Update_menu2+0x28c>)
 8001748:	f001 fd2c 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
            current_y,
            BUTTON_SLIDER_IMG_WIDTH,
            BUTTON_SLIDER_IMG_HEIGHT);

        // Sprawdzanie pozycji suwaka i ustawianie stanu złości
        if (current_y<20){
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b13      	cmp	r3, #19
 8001750:	dc06      	bgt.n	8001760 <Update_menu2+0x1d0>
            angry = true;
 8001752:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <Update_menu2+0x24c>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
            sleep_interupt = true;
 8001758:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <Update_menu2+0x290>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e002      	b.n	8001766 <Update_menu2+0x1d6>
        } else {
            angry = false;
 8001760:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <Update_menu2+0x24c>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
        }

        last_button_slider_update = current_time;
 8001766:	4a2a      	ldr	r2, [pc, #168]	@ (8001810 <Update_menu2+0x280>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6013      	str	r3, [r2, #0]
        last_button_y = current_y;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4a2a      	ldr	r2, [pc, #168]	@ (8001818 <Update_menu2+0x288>)
 8001770:	6013      	str	r3, [r2, #0]
    }

    // Aktualizacja energii podczas snu (co 5000ms)
    if (current_time - last_energy_gain_update >= 5000){
 8001772:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <Update_menu2+0x294>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800177e:	4293      	cmp	r3, r2
 8001780:	d95f      	bls.n	8001842 <Update_menu2+0x2b2>
        if (sleep_interupt == false){
 8001782:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <Update_menu2+0x290>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f083 0301 	eor.w	r3, r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d04e      	beq.n	8001830 <Update_menu2+0x2a0>
            // Jeśli sen nie jest przerwany, zwiększ energię i zmniejsz inne atrybuty
            can_animate_energy_gain = true;
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <Update_menu2+0x298>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
            if(g_atribute.food-1>=0){
 8001798:	4b24      	ldr	r3, [pc, #144]	@ (800182c <Update_menu2+0x29c>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <Update_menu2+0x21c>
                g_atribute.food--;  // Zmniejszenie poziomu jedzenia
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <Update_menu2+0x29c>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b20      	ldr	r3, [pc, #128]	@ (800182c <Update_menu2+0x29c>)
 80017aa:	801a      	strh	r2, [r3, #0]
            }
            if(g_atribute.fun-1>=0){
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <Update_menu2+0x29c>)
 80017ae:	885b      	ldrh	r3, [r3, #2]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <Update_menu2+0x230>
                g_atribute.fun--;   // Zmniejszenie poziomu zabawy
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <Update_menu2+0x29c>)
 80017b6:	885b      	ldrh	r3, [r3, #2]
 80017b8:	3b01      	subs	r3, #1
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <Update_menu2+0x29c>)
 80017be:	805a      	strh	r2, [r3, #2]
            }
            if(g_atribute.energy+1<=5){
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <Update_menu2+0x29c>)
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d839      	bhi.n	800183c <Update_menu2+0x2ac>
                g_atribute.energy++;  // Zwiększenie poziomu energii
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <Update_menu2+0x29c>)
 80017ca:	889b      	ldrh	r3, [r3, #4]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <Update_menu2+0x29c>)
 80017d2:	809a      	strh	r2, [r3, #4]
 80017d4:	e032      	b.n	800183c <Update_menu2+0x2ac>
 80017d6:	bf00      	nop
 80017d8:	20000238 	.word	0x20000238
 80017dc:	20000265 	.word	0x20000265
 80017e0:	0800f3e0 	.word	0x0800f3e0
 80017e4:	20000264 	.word	0x20000264
 80017e8:	0800f308 	.word	0x0800f308
 80017ec:	0800f350 	.word	0x0800f350
 80017f0:	0800f398 	.word	0x0800f398
 80017f4:	2000023c 	.word	0x2000023c
 80017f8:	2000025d 	.word	0x2000025d
 80017fc:	0800fe98 	.word	0x0800fe98
 8001800:	2aaaaaab 	.word	0x2aaaaaab
 8001804:	2000025c 	.word	0x2000025c
 8001808:	0800feb0 	.word	0x0800feb0
 800180c:	66666667 	.word	0x66666667
 8001810:	20000230 	.word	0x20000230
 8001814:	2000022c 	.word	0x2000022c
 8001818:	20000024 	.word	0x20000024
 800181c:	0800f4a8 	.word	0x0800f4a8
 8001820:	20000028 	.word	0x20000028
 8001824:	20000248 	.word	0x20000248
 8001828:	20000267 	.word	0x20000267
 800182c:	20000000 	.word	0x20000000
            }
        } else {
            can_animate_energy_gain = false;
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <Update_menu2+0x348>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
            sleep_interupt = false;
 8001836:	4b29      	ldr	r3, [pc, #164]	@ (80018dc <Update_menu2+0x34c>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
        }
        last_energy_gain_update = current_time;
 800183c:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <Update_menu2+0x350>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
    }

    // Animacja przyrostu energii (co 250ms)
    if (current_time - last_energy_gain_animation_update>=250){
 8001842:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <Update_menu2+0x354>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2bf9      	cmp	r3, #249	@ 0xf9
 800184c:	d940      	bls.n	80018d0 <Update_menu2+0x340>
        if (can_animate_energy_gain == true){
 800184e:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <Update_menu2+0x348>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d038      	beq.n	80018ca <Update_menu2+0x33a>
            OLED_PrintSmallImageFromCoords(PLUS_ENERGY_IMG,
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <Update_menu2+0x358>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f1c3 0308 	rsb	r3, r3, #8
 8001862:	b2da      	uxtb	r2, r3
 8001864:	230e      	movs	r3, #14
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	230d      	movs	r3, #13
 800186a:	216a      	movs	r1, #106	@ 0x6a
 800186c:	481f      	ldr	r0, [pc, #124]	@ (80018ec <Update_menu2+0x35c>)
 800186e:	f001 fc99 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                PLUS_ENERGY_IMG_COORDINATE_X,
                PLUS_ENERGY_IMG_COORDINATE_Y-up_energy_gain_animation,
                PLUS_ENERGY_IMG_WIDTH,
                PLUS_ENERGY_IMG_HEIGHT);

            up_energy_gain_animation++;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <Update_menu2+0x358>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3301      	adds	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <Update_menu2+0x358>)
 800187e:	701a      	strb	r2, [r3, #0]

            // Czyszczenie poprzedniej pozycji symbolu
            OLED_FillRectangle(PLUS_ENERGY_IMG_COORDINATE_X,
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <Update_menu2+0x358>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f1c3 0316 	rsb	r3, r3, #22
 800188a:	b2d9      	uxtb	r1, r3
 800188c:	2301      	movs	r3, #1
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2301      	movs	r3, #1
 8001892:	220d      	movs	r2, #13
 8001894:	206a      	movs	r0, #106	@ 0x6a
 8001896:	f001 fe05 	bl	80034a4 <OLED_FillRectangle>
                (PLUS_ENERGY_IMG_COORDINATE_Y - up_energy_gain_animation + PLUS_ENERGY_IMG_HEIGHT),
                PLUS_ENERGY_IMG_WIDTH,1,true);

            // Zakończenie animacji po osiągnięciu określonej wysokości
            if(up_energy_gain_animation==7){
 800189a:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <Update_menu2+0x358>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b07      	cmp	r3, #7
 80018a2:	d112      	bne.n	80018ca <Update_menu2+0x33a>
                OLED_FillRectangle(PLUS_ENERGY_IMG_COORDINATE_X,
 80018a4:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <Update_menu2+0x358>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f1c3 0308 	rsb	r3, r3, #8
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	2301      	movs	r3, #1
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	230e      	movs	r3, #14
 80018b6:	220d      	movs	r2, #13
 80018b8:	206a      	movs	r0, #106	@ 0x6a
 80018ba:	f001 fdf3 	bl	80034a4 <OLED_FillRectangle>
                    (PLUS_ENERGY_IMG_COORDINATE_Y - up_energy_gain_animation),
                    PLUS_ENERGY_IMG_WIDTH,PLUS_ENERGY_IMG_HEIGHT,true);
                can_animate_energy_gain= false;
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <Update_menu2+0x348>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
                up_energy_gain_animation=0;
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <Update_menu2+0x358>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
            }
        }
        last_energy_gain_animation_update = current_time;
 80018ca:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <Update_menu2+0x354>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6013      	str	r3, [r2, #0]
    }
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000267 	.word	0x20000267
 80018dc:	20000028 	.word	0x20000028
 80018e0:	20000248 	.word	0x20000248
 80018e4:	2000024c 	.word	0x2000024c
 80018e8:	2000025e 	.word	0x2000025e
 80018ec:	0800f4c0 	.word	0x0800f4c0

080018f0 <Start_menu3>:
// Funkcja inicjalizująca menu 3 (mini-gra)
void Start_menu3(){
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af02      	add	r7, sp, #8
    // Resetowanie wszystkich zmiennych gry
    game_start = false;
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <Start_menu3+0x5c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
    eat = false;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <Start_menu3+0x60>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
    food_count = 0;
 8001902:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <Start_menu3+0x64>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    game_face_coordinate_x = GAME_FACE_DEAFULT_COORDINATE_X;
 8001908:	4b13      	ldr	r3, [pc, #76]	@ (8001958 <Start_menu3+0x68>)
 800190a:	2234      	movs	r2, #52	@ 0x34
 800190c:	601a      	str	r2, [r3, #0]

    // Resetowanie wszystkich timerów animacji
    last_game_face_update = 0;
 800190e:	4b13      	ldr	r3, [pc, #76]	@ (800195c <Start_menu3+0x6c>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
    last_button_update = 0;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <Start_menu3+0x70>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
    current_apple_coordinate_y = 0;
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <Start_menu3+0x74>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
    last_apple_animation_update = 0;
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <Start_menu3+0x78>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    last_chocolate_animation_update = 0;
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <Start_menu3+0x7c>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
    last_pizza_animation_update = 0;
 800192c:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <Start_menu3+0x80>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

    // Czyszczenie ekranu i rysowanie początkowego interfejsu
    OLED_Clear();
 8001932:	f001 fc2f 	bl	8003194 <OLED_Clear>
    OLED_PrintImageFromCoords(MENU3_START_IMG,
 8001936:	2340      	movs	r3, #64	@ 0x40
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <Start_menu3+0x84>)
 8001942:	f001 fce9 	bl	8003318 <OLED_PrintImageFromCoords>
        DEAFULT_COORDINATE_X,
        DEAFULT_COORDINATE_Y,
        MAX_WIDTH,
        MAX_HEIGHT);
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000268 	.word	0x20000268
 8001950:	20000266 	.word	0x20000266
 8001954:	20000260 	.word	0x20000260
 8001958:	20000020 	.word	0x20000020
 800195c:	20000240 	.word	0x20000240
 8001960:	20000244 	.word	0x20000244
 8001964:	20000220 	.word	0x20000220
 8001968:	20000254 	.word	0x20000254
 800196c:	20000258 	.word	0x20000258
 8001970:	20000250 	.word	0x20000250
 8001974:	0800f8dc 	.word	0x0800f8dc

08001978 <Update_menu3>:
void Update_menu3() {
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af04      	add	r7, sp, #16
    if (game_start == true) {
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <Update_menu3+0x5c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 8204 	beq.w	8001d92 <Update_menu3+0x41a>
        uint32_t current_time = HAL_GetTick();
 800198a:	f002 fb13 	bl	8003fb4 <HAL_GetTick>
 800198e:	6078      	str	r0, [r7, #4]
        OLED_FillRectangle((PLUS_FUN_IMG_COORDINATE_X-1),0,1,64,false);
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2340      	movs	r3, #64	@ 0x40
 8001996:	2201      	movs	r2, #1
 8001998:	2100      	movs	r1, #0
 800199a:	2062      	movs	r0, #98	@ 0x62
 800199c:	f001 fd82 	bl	80034a4 <OLED_FillRectangle>

        // Aktualizacja twarzy w grze - zmiana między pustą a pełną gdy coś zje
        if (current_time - last_game_face_update >= 100) {
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <Update_menu3+0x60>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b63      	cmp	r3, #99	@ 0x63
 80019aa:	d92a      	bls.n	8001a02 <Update_menu3+0x8a>
            if (eat) {
 80019ac:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <Update_menu3+0x64>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d018      	beq.n	80019e8 <Update_menu3+0x70>
                OLED_PrintSmallImageFromCoords(GAME_FACE_IMG_FULL,
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <Update_menu3+0x68>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	b2d9      	uxtb	r1, r3
 80019bc:	2316      	movs	r3, #22
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	231e      	movs	r3, #30
 80019c2:	222a      	movs	r2, #42	@ 0x2a
 80019c4:	4807      	ldr	r0, [pc, #28]	@ (80019e4 <Update_menu3+0x6c>)
 80019c6:	f001 fbed 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                    game_face_coordinate_x,
                    GAME_FACE_COORDINATE_Y,
                    GAME_FACE_IMG_WIDTH,
                    GAME_FACE_IMG_HEIGHT);
                eat = false;
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <Update_menu3+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e014      	b.n	80019fc <Update_menu3+0x84>
 80019d2:	bf00      	nop
 80019d4:	20000268 	.word	0x20000268
 80019d8:	20000240 	.word	0x20000240
 80019dc:	20000266 	.word	0x20000266
 80019e0:	20000020 	.word	0x20000020
 80019e4:	0800fd98 	.word	0x0800fd98
            } else {
                OLED_PrintSmallImageFromCoords(GAME_FACE_IMG_EMPTY,
 80019e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001c84 <Update_menu3+0x30c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b2d9      	uxtb	r1, r3
 80019ee:	2316      	movs	r3, #22
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	231e      	movs	r3, #30
 80019f4:	222a      	movs	r2, #42	@ 0x2a
 80019f6:	48a4      	ldr	r0, [pc, #656]	@ (8001c88 <Update_menu3+0x310>)
 80019f8:	f001 fbd4 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                    game_face_coordinate_x,
                    GAME_FACE_COORDINATE_Y,
                    GAME_FACE_IMG_WIDTH,
                    GAME_FACE_IMG_HEIGHT);
            }
            last_game_face_update = current_time;
 80019fc:	4aa3      	ldr	r2, [pc, #652]	@ (8001c8c <Update_menu3+0x314>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
        }

        // Obsługa przycisków - zielony przesuwa w lewo, czerwony w prawo
        if (current_time - last_button_update >= 100) {
 8001a02:	4ba3      	ldr	r3, [pc, #652]	@ (8001c90 <Update_menu3+0x318>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b63      	cmp	r3, #99	@ 0x63
 8001a0c:	d93b      	bls.n	8001a86 <Update_menu3+0x10e>
            if (HAL_GPIO_ReadPin(GPIOC, GreenBt_Pin) == GPIO_PIN_SET) {
 8001a0e:	2101      	movs	r1, #1
 8001a10:	48a0      	ldr	r0, [pc, #640]	@ (8001c94 <Update_menu3+0x31c>)
 8001a12:	f002 fe35 	bl	8004680 <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d112      	bne.n	8001a42 <Update_menu3+0xca>
                game_face_coordinate_x--;
 8001a1c:	4b99      	ldr	r3, [pc, #612]	@ (8001c84 <Update_menu3+0x30c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	4a98      	ldr	r2, [pc, #608]	@ (8001c84 <Update_menu3+0x30c>)
 8001a24:	6013      	str	r3, [r2, #0]
                if (game_face_coordinate_x < 0) {
 8001a26:	4b97      	ldr	r3, [pc, #604]	@ (8001c84 <Update_menu3+0x30c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
                    game_face_coordinate_x = 0;
                }
                OLED_FillRectangle((game_face_coordinate_x+GAME_FACE_IMG_WIDTH), GAME_FACE_COORDINATE_Y, 1, GAME_FACE_COORDINATE_Y - GAME_FACE_IMG_HEIGHT,true);
 8001a2a:	4b96      	ldr	r3, [pc, #600]	@ (8001c84 <Update_menu3+0x30c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	331e      	adds	r3, #30
 8001a32:	b2d8      	uxtb	r0, r3
 8001a34:	2301      	movs	r3, #1
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2314      	movs	r3, #20
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	212a      	movs	r1, #42	@ 0x2a
 8001a3e:	f001 fd31 	bl	80034a4 <OLED_FillRectangle>
            }

            if (HAL_GPIO_ReadPin(GPIOC, RedBt_Pin) == GPIO_PIN_SET) {
 8001a42:	2102      	movs	r1, #2
 8001a44:	4893      	ldr	r0, [pc, #588]	@ (8001c94 <Update_menu3+0x31c>)
 8001a46:	f002 fe1b 	bl	8004680 <HAL_GPIO_ReadPin>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d117      	bne.n	8001a80 <Update_menu3+0x108>
                game_face_coordinate_x++;
 8001a50:	4b8c      	ldr	r3, [pc, #560]	@ (8001c84 <Update_menu3+0x30c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a8b      	ldr	r2, [pc, #556]	@ (8001c84 <Update_menu3+0x30c>)
 8001a58:	6013      	str	r3, [r2, #0]
                if (game_face_coordinate_x > (MAX_WIDTH - GAME_FACE_IMG_WIDTH - PLUS_FUN_IMG_WIDTH - 2)) {
 8001a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c84 <Update_menu3+0x30c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b44      	cmp	r3, #68	@ 0x44
 8001a60:	d902      	bls.n	8001a68 <Update_menu3+0xf0>
                    game_face_coordinate_x = (MAX_WIDTH - GAME_FACE_IMG_WIDTH - PLUS_FUN_IMG_WIDTH - 2);
 8001a62:	4b88      	ldr	r3, [pc, #544]	@ (8001c84 <Update_menu3+0x30c>)
 8001a64:	2244      	movs	r2, #68	@ 0x44
 8001a66:	601a      	str	r2, [r3, #0]
                }
                OLED_FillRectangle(game_face_coordinate_x-1, GAME_FACE_COORDINATE_Y, 1, GAME_FACE_COORDINATE_Y - GAME_FACE_IMG_HEIGHT,true);
 8001a68:	4b86      	ldr	r3, [pc, #536]	@ (8001c84 <Update_menu3+0x30c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b2d8      	uxtb	r0, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2314      	movs	r3, #20
 8001a78:	2201      	movs	r2, #1
 8001a7a:	212a      	movs	r1, #42	@ 0x2a
 8001a7c:	f001 fd12 	bl	80034a4 <OLED_FillRectangle>
            }
            last_button_update = current_time;
 8001a80:	4a83      	ldr	r2, [pc, #524]	@ (8001c90 <Update_menu3+0x318>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
        }

        // Animacja spadającego jabłka
        if (current_time - last_apple_animation_update >= 100) {
 8001a86:	4b84      	ldr	r3, [pc, #528]	@ (8001c98 <Update_menu3+0x320>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b63      	cmp	r3, #99	@ 0x63
 8001a90:	d955      	bls.n	8001b3e <Update_menu3+0x1c6>
            current_apple_coordinate_y++;
 8001a92:	4b82      	ldr	r3, [pc, #520]	@ (8001c9c <Update_menu3+0x324>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a80      	ldr	r2, [pc, #512]	@ (8001c9c <Update_menu3+0x324>)
 8001a9a:	6013      	str	r3, [r2, #0]
            OLED_PrintSmallImageFromCoords(APPLE_IMG,
 8001a9c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c9c <Update_menu3+0x324>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	2313      	movs	r3, #19
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	230d      	movs	r3, #13
 8001aa8:	2114      	movs	r1, #20
 8001aaa:	487d      	ldr	r0, [pc, #500]	@ (8001ca0 <Update_menu3+0x328>)
 8001aac:	f001 fb7a 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                APPLE_IMG_DEFAULT_COORDINATE_X,
                current_apple_coordinate_y,
                APPLE_IMG_WIDTH,
                APPLE_IMG_HEIGHT);
            OLED_FillRectangle(APPLE_IMG_DEFAULT_COORDINATE_X,
 8001ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8001c9c <Update_menu3+0x324>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b2d9      	uxtb	r1, r3
 8001aba:	2301      	movs	r3, #1
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	220d      	movs	r2, #13
 8001ac2:	2014      	movs	r0, #20
 8001ac4:	f001 fcee 	bl	80034a4 <OLED_FillRectangle>
                    current_apple_coordinate_y - 1,
                    APPLE_IMG_WIDTH, 1,true);

            // Reset pozycji jabłka gdy spadnie na dół i sprawdzenie kolizji
            if (current_apple_coordinate_y > (MAX_HEIGHT - APPLE_IMG_HEIGHT - 1)) {
 8001ac8:	4b74      	ldr	r3, [pc, #464]	@ (8001c9c <Update_menu3+0x324>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ace:	d90a      	bls.n	8001ae6 <Update_menu3+0x16e>
                current_apple_coordinate_y = 0;
 8001ad0:	4b72      	ldr	r3, [pc, #456]	@ (8001c9c <Update_menu3+0x324>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
                OLED_FillRectangle(APPLE_IMG_DEFAULT_COORDINATE_X, 0,
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2340      	movs	r3, #64	@ 0x40
 8001adc:	220d      	movs	r2, #13
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2014      	movs	r0, #20
 8001ae2:	f001 fcdf 	bl	80034a4 <OLED_FillRectangle>
                        APPLE_IMG_WIDTH, 64,true);
            }
            if (check_collision(APPLE_IMG_DEFAULT_COORDINATE_X, current_apple_coordinate_y, APPLE_IMG_WIDTH, APPLE_IMG_HEIGHT,
 8001ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c9c <Update_menu3+0x324>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
                    game_face_coordinate_x+4, GAME_FACE_COORDINATE_Y, GAME_FACE_IMG_WIDTH-4, GAME_FACE_IMG_HEIGHT)) {
 8001aec:	4b65      	ldr	r3, [pc, #404]	@ (8001c84 <Update_menu3+0x30c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	3304      	adds	r3, #4
            if (check_collision(APPLE_IMG_DEFAULT_COORDINATE_X, current_apple_coordinate_y, APPLE_IMG_WIDTH, APPLE_IMG_HEIGHT,
 8001af2:	461a      	mov	r2, r3
 8001af4:	2316      	movs	r3, #22
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	231a      	movs	r3, #26
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	232a      	movs	r3, #42	@ 0x2a
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	2313      	movs	r3, #19
 8001b04:	220d      	movs	r2, #13
 8001b06:	2014      	movs	r0, #20
 8001b08:	f7ff fada 	bl	80010c0 <check_collision>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d012      	beq.n	8001b38 <Update_menu3+0x1c0>
                current_apple_coordinate_y = 0;
 8001b12:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <Update_menu3+0x324>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
                OLED_FillRectangle(APPLE_IMG_DEFAULT_COORDINATE_X, 0,
 8001b18:	2301      	movs	r3, #1
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2340      	movs	r3, #64	@ 0x40
 8001b1e:	220d      	movs	r2, #13
 8001b20:	2100      	movs	r1, #0
 8001b22:	2014      	movs	r0, #20
 8001b24:	f001 fcbe 	bl	80034a4 <OLED_FillRectangle>
                    APPLE_IMG_WIDTH, 64,true);
                eat = true;
 8001b28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <Update_menu3+0x32c>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
                food_count++;
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <Update_menu3+0x330>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca8 <Update_menu3+0x330>)
 8001b36:	6013      	str	r3, [r2, #0]
            }
            last_apple_animation_update = current_time;
 8001b38:	4a57      	ldr	r2, [pc, #348]	@ (8001c98 <Update_menu3+0x320>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
        }

        // Animacja spadającej czekolady - podobna logika jak jabłko, ale wolniejszy spadek
        if (current_time - last_chocolate_animation_update >= 300) {
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cac <Update_menu3+0x334>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001b4a:	d355      	bcc.n	8001bf8 <Update_menu3+0x280>
            current_chocolate_coordinate_y++;
 8001b4c:	4b58      	ldr	r3, [pc, #352]	@ (8001cb0 <Update_menu3+0x338>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	4a57      	ldr	r2, [pc, #348]	@ (8001cb0 <Update_menu3+0x338>)
 8001b54:	6013      	str	r3, [r2, #0]
            OLED_PrintSmallImageFromCoords(CHOCOLATE_IMG,
 8001b56:	4b56      	ldr	r3, [pc, #344]	@ (8001cb0 <Update_menu3+0x338>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	2311      	movs	r3, #17
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	230a      	movs	r3, #10
 8001b62:	2132      	movs	r1, #50	@ 0x32
 8001b64:	4853      	ldr	r0, [pc, #332]	@ (8001cb4 <Update_menu3+0x33c>)
 8001b66:	f001 fb1d 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                CHOCOLATE_IMG_DEFAULT_COORDINATE_X,
                current_chocolate_coordinate_y,
                CHOCOLATE_IMG_WIDTH,
                CHOCOLATE_IMG_HEIGHT);
            OLED_FillRectangle(CHOCOLATE_IMG_DEFAULT_COORDINATE_X,
 8001b6a:	4b51      	ldr	r3, [pc, #324]	@ (8001cb0 <Update_menu3+0x338>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b2d9      	uxtb	r1, r3
 8001b74:	2301      	movs	r3, #1
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2301      	movs	r3, #1
 8001b7a:	220a      	movs	r2, #10
 8001b7c:	2032      	movs	r0, #50	@ 0x32
 8001b7e:	f001 fc91 	bl	80034a4 <OLED_FillRectangle>
                    current_chocolate_coordinate_y - 1,
                    CHOCOLATE_IMG_WIDTH, 1,true);

            if (current_chocolate_coordinate_y > (MAX_HEIGHT - CHOCOLATE_IMG_HEIGHT - 1)) {
 8001b82:	4b4b      	ldr	r3, [pc, #300]	@ (8001cb0 <Update_menu3+0x338>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b88:	d90a      	bls.n	8001ba0 <Update_menu3+0x228>
                current_chocolate_coordinate_y = 0;
 8001b8a:	4b49      	ldr	r3, [pc, #292]	@ (8001cb0 <Update_menu3+0x338>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
                OLED_FillRectangle(CHOCOLATE_IMG_DEFAULT_COORDINATE_X, 0,
 8001b90:	2301      	movs	r3, #1
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2340      	movs	r3, #64	@ 0x40
 8001b96:	220a      	movs	r2, #10
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2032      	movs	r0, #50	@ 0x32
 8001b9c:	f001 fc82 	bl	80034a4 <OLED_FillRectangle>
                        CHOCOLATE_IMG_WIDTH, 64,true);
            }
            if (check_collision(CHOCOLATE_IMG_DEFAULT_COORDINATE_X, current_chocolate_coordinate_y, CHOCOLATE_IMG_WIDTH, CHOCOLATE_IMG_HEIGHT,
 8001ba0:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <Update_menu3+0x338>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
                    game_face_coordinate_x+4, GAME_FACE_COORDINATE_Y, GAME_FACE_IMG_WIDTH-4, GAME_FACE_IMG_HEIGHT)) {
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <Update_menu3+0x30c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3304      	adds	r3, #4
            if (check_collision(CHOCOLATE_IMG_DEFAULT_COORDINATE_X, current_chocolate_coordinate_y, CHOCOLATE_IMG_WIDTH, CHOCOLATE_IMG_HEIGHT,
 8001bac:	461a      	mov	r2, r3
 8001bae:	2316      	movs	r3, #22
 8001bb0:	9303      	str	r3, [sp, #12]
 8001bb2:	231a      	movs	r3, #26
 8001bb4:	9302      	str	r3, [sp, #8]
 8001bb6:	232a      	movs	r3, #42	@ 0x2a
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	2311      	movs	r3, #17
 8001bbe:	220a      	movs	r2, #10
 8001bc0:	2032      	movs	r0, #50	@ 0x32
 8001bc2:	f7ff fa7d 	bl	80010c0 <check_collision>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d012      	beq.n	8001bf2 <Update_menu3+0x27a>
                current_chocolate_coordinate_y = 0;
 8001bcc:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <Update_menu3+0x338>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
                OLED_FillRectangle(CHOCOLATE_IMG_DEFAULT_COORDINATE_X, 0,
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2340      	movs	r3, #64	@ 0x40
 8001bd8:	220a      	movs	r2, #10
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2032      	movs	r0, #50	@ 0x32
 8001bde:	f001 fc61 	bl	80034a4 <OLED_FillRectangle>
                    CHOCOLATE_IMG_WIDTH, 64,true);
                eat = true;
 8001be2:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <Update_menu3+0x32c>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
                food_count++;
 8001be8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <Update_menu3+0x330>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca8 <Update_menu3+0x330>)
 8001bf0:	6013      	str	r3, [r2, #0]
            }
            last_chocolate_animation_update = current_time;
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8001cac <Update_menu3+0x334>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6013      	str	r3, [r2, #0]
        }

        // Animacja spadającej pizzy - średnia prędkość spadania
        if (current_time - last_pizza_animation_update >= 200) {
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <Update_menu3+0x340>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c02:	d977      	bls.n	8001cf4 <Update_menu3+0x37c>
            current_pizza_coordinate_y++;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	@ (8001cbc <Update_menu3+0x344>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001cbc <Update_menu3+0x344>)
 8001c0c:	6013      	str	r3, [r2, #0]
            OLED_PrintSmallImageFromCoords(PIZZA_IMG,
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <Update_menu3+0x344>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	230d      	movs	r3, #13
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	230b      	movs	r3, #11
 8001c1a:	2150      	movs	r1, #80	@ 0x50
 8001c1c:	4828      	ldr	r0, [pc, #160]	@ (8001cc0 <Update_menu3+0x348>)
 8001c1e:	f001 fac1 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                PIZZA_IMG_DEFAULT_COORDINATE_X,
                current_pizza_coordinate_y,
                PIZZA_IMG_WIDTH,
                PIZZA_IMG_HEIGHT);
            OLED_FillRectangle(PIZZA_IMG_DEFAULT_COORDINATE_X,
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <Update_menu3+0x344>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b2d9      	uxtb	r1, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	220b      	movs	r2, #11
 8001c34:	2050      	movs	r0, #80	@ 0x50
 8001c36:	f001 fc35 	bl	80034a4 <OLED_FillRectangle>
                    current_pizza_coordinate_y - 1,
                    PIZZA_IMG_WIDTH, 1,true);

            if (current_pizza_coordinate_y > (MAX_HEIGHT - PIZZA_IMG_HEIGHT - 1)) {
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <Update_menu3+0x344>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b32      	cmp	r3, #50	@ 0x32
 8001c40:	d90a      	bls.n	8001c58 <Update_menu3+0x2e0>
                current_pizza_coordinate_y = 0;
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <Update_menu3+0x344>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
                OLED_FillRectangle(PIZZA_IMG_DEFAULT_COORDINATE_X, 0,
 8001c48:	2301      	movs	r3, #1
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2340      	movs	r3, #64	@ 0x40
 8001c4e:	220b      	movs	r2, #11
 8001c50:	2100      	movs	r1, #0
 8001c52:	2050      	movs	r0, #80	@ 0x50
 8001c54:	f001 fc26 	bl	80034a4 <OLED_FillRectangle>
                        PIZZA_IMG_WIDTH, 64,true);
            }
            if (check_collision(PIZZA_IMG_DEFAULT_COORDINATE_X, current_pizza_coordinate_y, PIZZA_IMG_WIDTH, PIZZA_IMG_HEIGHT,
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <Update_menu3+0x344>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
                    game_face_coordinate_x+4, GAME_FACE_COORDINATE_Y, GAME_FACE_IMG_WIDTH-4, GAME_FACE_IMG_HEIGHT)) {
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <Update_menu3+0x30c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3304      	adds	r3, #4
            if (check_collision(PIZZA_IMG_DEFAULT_COORDINATE_X, current_pizza_coordinate_y, PIZZA_IMG_WIDTH, PIZZA_IMG_HEIGHT,
 8001c64:	461a      	mov	r2, r3
 8001c66:	2316      	movs	r3, #22
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	231a      	movs	r3, #26
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	232a      	movs	r3, #42	@ 0x2a
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	9200      	str	r2, [sp, #0]
 8001c74:	230d      	movs	r3, #13
 8001c76:	220b      	movs	r2, #11
 8001c78:	2050      	movs	r0, #80	@ 0x50
 8001c7a:	f7ff fa21 	bl	80010c0 <check_collision>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e020      	b.n	8001cc4 <Update_menu3+0x34c>
 8001c82:	bf00      	nop
 8001c84:	20000020 	.word	0x20000020
 8001c88:	0800fd3c 	.word	0x0800fd3c
 8001c8c:	20000240 	.word	0x20000240
 8001c90:	20000244 	.word	0x20000244
 8001c94:	40020800 	.word	0x40020800
 8001c98:	20000254 	.word	0x20000254
 8001c9c:	20000220 	.word	0x20000220
 8001ca0:	0800fcdc 	.word	0x0800fcdc
 8001ca4:	20000266 	.word	0x20000266
 8001ca8:	20000260 	.word	0x20000260
 8001cac:	20000258 	.word	0x20000258
 8001cb0:	20000228 	.word	0x20000228
 8001cb4:	0800fd04 	.word	0x0800fd04
 8001cb8:	20000250 	.word	0x20000250
 8001cbc:	20000224 	.word	0x20000224
 8001cc0:	0800fd24 	.word	0x0800fd24
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d012      	beq.n	8001cee <Update_menu3+0x376>
                current_pizza_coordinate_y = 0;
 8001cc8:	4b34      	ldr	r3, [pc, #208]	@ (8001d9c <Update_menu3+0x424>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
                OLED_FillRectangle(PIZZA_IMG_DEFAULT_COORDINATE_X, 0,
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2340      	movs	r3, #64	@ 0x40
 8001cd4:	220b      	movs	r2, #11
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2050      	movs	r0, #80	@ 0x50
 8001cda:	f001 fbe3 	bl	80034a4 <OLED_FillRectangle>
                    PIZZA_IMG_WIDTH, 64,true);
                eat = true;
 8001cde:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <Update_menu3+0x428>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
                food_count++;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <Update_menu3+0x42c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	4a2e      	ldr	r2, [pc, #184]	@ (8001da4 <Update_menu3+0x42c>)
 8001cec:	6013      	str	r3, [r2, #0]
            }
            last_pizza_animation_update = current_time;
 8001cee:	4a2e      	ldr	r2, [pc, #184]	@ (8001da8 <Update_menu3+0x430>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6013      	str	r3, [r2, #0]
        }

        // Wyświetlanie bonusu po zebraniu 5 jedzenia
        static uint32_t display_start_time = 0;

        if (food_count >= 5) {
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <Update_menu3+0x42c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d94a      	bls.n	8001d92 <Update_menu3+0x41a>
            if (display_start_time == 0) {
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <Update_menu3+0x434>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d113      	bne.n	8001d2c <Update_menu3+0x3b4>
                display_start_time = current_time;
 8001d04:	4a29      	ldr	r2, [pc, #164]	@ (8001dac <Update_menu3+0x434>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
                OLED_PrintSmallImageFromCoords(PLUS_FOOD_IMG,
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	231a      	movs	r3, #26
 8001d10:	2205      	movs	r2, #5
 8001d12:	2165      	movs	r1, #101	@ 0x65
 8001d14:	4826      	ldr	r0, [pc, #152]	@ (8001db0 <Update_menu3+0x438>)
 8001d16:	f001 fa45 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                        PLUS_FOOD_IMG_COORDINATE_X, PLUS_FOOD_IMG_COORDINATE_Y,
                        PLUS_FOOD_IMG_WIDTH, PLUS_FOOD_IMG_HEIGHT);
                OLED_PrintSmallImageFromCoords(PLUS_FUN_IMG,
 8001d1a:	2314      	movs	r3, #20
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	231c      	movs	r3, #28
 8001d20:	221c      	movs	r2, #28
 8001d22:	2163      	movs	r1, #99	@ 0x63
 8001d24:	4823      	ldr	r0, [pc, #140]	@ (8001db4 <Update_menu3+0x43c>)
 8001d26:	f001 fa3d 	bl	80031a4 <OLED_PrintSmallImageFromCoords>
                }
                display_start_time = 0;  // Reset timera wyświetlania
            }
        }
    }
}
 8001d2a:	e032      	b.n	8001d92 <Update_menu3+0x41a>
            } else if (current_time - display_start_time >= 2000) {
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <Update_menu3+0x434>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d38:	d32b      	bcc.n	8001d92 <Update_menu3+0x41a>
                OLED_FillRectangle(PLUS_FUN_IMG_COORDINATE_X, PLUS_FOOD_IMG_COORDINATE_Y,
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	232b      	movs	r3, #43	@ 0x2b
 8001d40:	221c      	movs	r2, #28
 8001d42:	2105      	movs	r1, #5
 8001d44:	2063      	movs	r0, #99	@ 0x63
 8001d46:	f001 fbad 	bl	80034a4 <OLED_FillRectangle>
                food_count = 0;  // Resetowanie licznika jedzenia
 8001d4a:	4b16      	ldr	r3, [pc, #88]	@ (8001da4 <Update_menu3+0x42c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
                if(g_atribute.food+1<=5){
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <Update_menu3+0x440>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d805      	bhi.n	8001d64 <Update_menu3+0x3ec>
                    g_atribute.food++;
 8001d58:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <Update_menu3+0x440>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <Update_menu3+0x440>)
 8001d62:	801a      	strh	r2, [r3, #0]
                if(g_atribute.fun+1<=5){
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <Update_menu3+0x440>)
 8001d66:	885b      	ldrh	r3, [r3, #2]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d805      	bhi.n	8001d78 <Update_menu3+0x400>
                    g_atribute.fun++;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <Update_menu3+0x440>)
 8001d6e:	885b      	ldrh	r3, [r3, #2]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <Update_menu3+0x440>)
 8001d76:	805a      	strh	r2, [r3, #2]
                if(g_atribute.energy-1>=0){
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <Update_menu3+0x440>)
 8001d7a:	889b      	ldrh	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <Update_menu3+0x414>
                    g_atribute.energy--;
 8001d80:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <Update_menu3+0x440>)
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <Update_menu3+0x440>)
 8001d8a:	809a      	strh	r2, [r3, #4]
                display_start_time = 0;  // Reset timera wyświetlania
 8001d8c:	4b07      	ldr	r3, [pc, #28]	@ (8001dac <Update_menu3+0x434>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000224 	.word	0x20000224
 8001da0:	20000266 	.word	0x20000266
 8001da4:	20000260 	.word	0x20000260
 8001da8:	20000250 	.word	0x20000250
 8001dac:	2000026c 	.word	0x2000026c
 8001db0:	0800fdf4 	.word	0x0800fdf4
 8001db4:	0800fe44 	.word	0x0800fe44
 8001db8:	20000000 	.word	0x20000000

08001dbc <Menu_change_and_update>:

// Funkcja zarządzająca zmianą menu i jego aktualizacją
void Menu_change_and_update(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
    // Sprawdzenie czy menu się zmieniło
    if (g_atribute.menu != g_atribute_comparing.menu){
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001dc2:	88da      	ldrh	r2, [r3, #6]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <Menu_change_and_update+0x94>)
 8001dc6:	88db      	ldrh	r3, [r3, #6]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d017      	beq.n	8001dfc <Menu_change_and_update+0x40>
        switch(g_atribute.menu){
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001dce:	88db      	ldrh	r3, [r3, #6]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d00c      	beq.n	8001dee <Menu_change_and_update+0x32>
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	dc0d      	bgt.n	8001df4 <Menu_change_and_update+0x38>
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d002      	beq.n	8001de2 <Menu_change_and_update+0x26>
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d003      	beq.n	8001de8 <Menu_change_and_update+0x2c>
 8001de0:	e008      	b.n	8001df4 <Menu_change_and_update+0x38>
            case 1:
                Start_menu1();
 8001de2:	f7ff faf9 	bl	80013d8 <Start_menu1>
                break;
 8001de6:	e005      	b.n	8001df4 <Menu_change_and_update+0x38>
            case 2:
                Start_menu2();
 8001de8:	f7ff fb5a 	bl	80014a0 <Start_menu2>
                break;
 8001dec:	e002      	b.n	8001df4 <Menu_change_and_update+0x38>
            case 3:
                Start_menu3();
 8001dee:	f7ff fd7f 	bl	80018f0 <Start_menu3>
                break;
 8001df2:	bf00      	nop
        }
        g_atribute_comparing.menu=g_atribute.menu;
 8001df4:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001df6:	88da      	ldrh	r2, [r3, #6]
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <Menu_change_and_update+0x94>)
 8001dfa:	80da      	strh	r2, [r3, #6]
    }

    // Ustawienie flagi minigry
    if(g_atribute.menu ==2 || g_atribute.menu==3)g_atribute.minigame=true;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001dfe:	88db      	ldrh	r3, [r3, #6]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d003      	beq.n	8001e0c <Menu_change_and_update+0x50>
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001e06:	88db      	ldrh	r3, [r3, #6]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d103      	bne.n	8001e14 <Menu_change_and_update+0x58>
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	731a      	strb	r2, [r3, #12]
 8001e12:	e002      	b.n	8001e1a <Menu_change_and_update+0x5e>
    else g_atribute.minigame=false;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	731a      	strb	r2, [r3, #12]

    // Aktualizacja odpowiedniego menu
    switch(g_atribute.menu){
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <Menu_change_and_update+0x90>)
 8001e1c:	88db      	ldrh	r3, [r3, #6]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d00e      	beq.n	8001e40 <Menu_change_and_update+0x84>
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	dc0f      	bgt.n	8001e46 <Menu_change_and_update+0x8a>
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d002      	beq.n	8001e30 <Menu_change_and_update+0x74>
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d005      	beq.n	8001e3a <Menu_change_and_update+0x7e>
            break;
        case 3:
            Update_menu3();
            break;
    }
}
 8001e2e:	e00a      	b.n	8001e46 <Menu_change_and_update+0x8a>
            Atribute_Update();
 8001e30:	f7ff f9f4 	bl	800121c <Atribute_Update>
            Update_menu1();
 8001e34:	f7ff fa60 	bl	80012f8 <Update_menu1>
            break;
 8001e38:	e005      	b.n	8001e46 <Menu_change_and_update+0x8a>
            Update_menu2();
 8001e3a:	f7ff fba9 	bl	8001590 <Update_menu2>
            break;
 8001e3e:	e002      	b.n	8001e46 <Menu_change_and_update+0x8a>
            Update_menu3();
 8001e40:	f7ff fd9a 	bl	8001978 <Update_menu3>
            break;
 8001e44:	bf00      	nop
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000010 	.word	0x20000010

08001e54 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Funkcja do obsługi zakończenia transmisji UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_UART_TxCpltCallback+0x6c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d128      	bne.n	8001eb6 <HAL_UART_TxCpltCallback+0x62>
        if (USART_TX_Empty != USART_TX_Busy) {
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <HAL_UART_TxCpltCallback+0x70>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <HAL_UART_TxCpltCallback+0x74>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d020      	beq.n	8001eb6 <HAL_UART_TxCpltCallback+0x62>
            uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <HAL_UART_TxCpltCallback+0x74>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <HAL_UART_TxCpltCallback+0x78>)
 8001e7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	73fb      	strb	r3, [r7, #15]
            USART_TX_Busy++;
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_UART_TxCpltCallback+0x74>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <HAL_UART_TxCpltCallback+0x74>)
 8001e94:	801a      	strh	r2, [r3, #0]
            if (USART_TX_Busy >= USART_TXBUF_LEN) USART_TX_Busy = 0;
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_UART_TxCpltCallback+0x74>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8001ea0:	d302      	bcc.n	8001ea8 <HAL_UART_TxCpltCallback+0x54>
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_UART_TxCpltCallback+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]
            HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8001ea8:	f107 030f 	add.w	r3, r7, #15
 8001eac:	2201      	movs	r2, #1
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4803      	ldr	r0, [pc, #12]	@ (8001ec0 <HAL_UART_TxCpltCallback+0x6c>)
 8001eb2:	f006 f99f 	bl	80081f4 <HAL_UART_Transmit_IT>
        }
    }
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000031c 	.word	0x2000031c
 8001ec4:	200016ae 	.word	0x200016ae
 8001ec8:	200016ac 	.word	0x200016ac
 8001ecc:	20000adc 	.word	0x20000adc

08001ed0 <HAL_UART_RxCpltCallback>:
// Funkcja do obsługi odbioru danych z UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <HAL_UART_RxCpltCallback+0x50>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d11a      	bne.n	8001f16 <HAL_UART_RxCpltCallback+0x46>
        USART_RX_Empty++;
 8001ee0:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_UART_RxCpltCallback+0x54>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_UART_RxCpltCallback+0x54>)
 8001eec:	801a      	strh	r2, [r3, #0]
        if (USART_RX_Empty >= USART_RXBUF_LEN) USART_RX_Empty = 0;
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <HAL_UART_RxCpltCallback+0x54>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001ef8:	d302      	bcc.n	8001f00 <HAL_UART_RxCpltCallback+0x30>
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_UART_RxCpltCallback+0x54>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &USART_RxBuf[USART_RX_Empty], 1);
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_UART_RxCpltCallback+0x54>)
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_UART_RxCpltCallback+0x58>)
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <HAL_UART_RxCpltCallback+0x50>)
 8001f12:	f006 f9a5 	bl	8008260 <HAL_UART_Receive_IT>
    }
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000031c 	.word	0x2000031c
 8001f24:	20000ad8 	.word	0x20000ad8
 8001f28:	20000880 	.word	0x20000880

08001f2c <crc16>:

// Funkcja do obliczenia CRC-16
uint16_t crc16(const uint8_t *data, size_t length) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
    uint16_t crc = INITIAL_CRC;
 8001f36:	2300      	movs	r3, #0
 8001f38:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; i++) {
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e015      	b.n	8001f6c <crc16+0x40>
        uint8_t byte = data[i] ^ (crc & 0xFF);
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b25a      	sxtb	r2, r3
 8001f4a:	8afb      	ldrh	r3, [r7, #22]
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	4053      	eors	r3, r2
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	73fb      	strb	r3, [r7, #15]
        crc = (crc >> 8) ^ crc_table[byte];
 8001f54:	8afb      	ldrh	r3, [r7, #22]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	4909      	ldr	r1, [pc, #36]	@ (8001f84 <crc16+0x58>)
 8001f5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f62:	4053      	eors	r3, r2
 8001f64:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < length; i++) {
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3e5      	bcc.n	8001f40 <crc16+0x14>
    }

    return crc ^ FINAL_XOR;
 8001f74:	8afb      	ldrh	r3, [r7, #22]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	0800ff20 	.word	0x0800ff20

08001f88 <verify_crc>:
// Funkcja weryfikująca CRC
bool verify_crc(const uint16_t *data, size_t length, const char *crc_ascii) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
    // Sprawdzenie, czy wskaźniki wejściowe nie są NULL
    if (data == NULL || crc_ascii == NULL) {
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <verify_crc+0x18>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <verify_crc+0x1c>
        return false;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e03a      	b.n	800201a <verify_crc+0x92>
    }

    // Obliczenie CRC dla podanych danych przy użyciu funkcji crc16
    uint16_t calculated_crc = crc16(data, length);
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ffc0 	bl	8001f2c <crc16>
 8001fac:	4603      	mov	r3, r0
 8001fae:	82bb      	strh	r3, [r7, #20]

    // Konwersja ASCII hex na uint16_t
    uint16_t provided_crc = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	83fb      	strh	r3, [r7, #30]
    for(int i = 0; i < 4; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	e025      	b.n	8002006 <verify_crc+0x7e>
        uint8_t val;
        char c = crc_ascii[i];
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	74fb      	strb	r3, [r7, #19]

        // Konwersja pojedynczego znaku hex
        if(c >= '0' && c <= '9') {
 8001fc4:	7cfb      	ldrb	r3, [r7, #19]
 8001fc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001fc8:	d906      	bls.n	8001fd8 <verify_crc+0x50>
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b39      	cmp	r3, #57	@ 0x39
 8001fce:	d803      	bhi.n	8001fd8 <verify_crc+0x50>
            val = c - '0';
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	3b30      	subs	r3, #48	@ 0x30
 8001fd4:	75fb      	strb	r3, [r7, #23]
 8001fd6:	e00b      	b.n	8001ff0 <verify_crc+0x68>
        }
        else if(c >= 'A' && c <= 'F') {
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b40      	cmp	r3, #64	@ 0x40
 8001fdc:	d906      	bls.n	8001fec <verify_crc+0x64>
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b46      	cmp	r3, #70	@ 0x46
 8001fe2:	d803      	bhi.n	8001fec <verify_crc+0x64>
            val = c - 'A' + 10;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	3b37      	subs	r3, #55	@ 0x37
 8001fe8:	75fb      	strb	r3, [r7, #23]
 8001fea:	e001      	b.n	8001ff0 <verify_crc+0x68>
        }
        else {
            return false;  // Nieprawidłowy znak
 8001fec:	2300      	movs	r3, #0
 8001fee:	e014      	b.n	800201a <verify_crc+0x92>
        }

        // Przesunięcie i dodanie nowej wartości
        provided_crc = (provided_crc << 4) | val;
 8001ff0:	8bfb      	ldrh	r3, [r7, #30]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	83fb      	strh	r3, [r7, #30]
    for(int i = 0; i < 4; i++) {
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	3301      	adds	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	2b03      	cmp	r3, #3
 800200a:	ddd6      	ble.n	8001fba <verify_crc+0x32>
    }

    return (calculated_crc == provided_crc);
 800200c:	8aba      	ldrh	r2, [r7, #20]
 800200e:	8bfb      	ldrh	r3, [r7, #30]
 8002010:	429a      	cmp	r2, r3
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
}
 800201a:	4618      	mov	r0, r3
 800201c:	3720      	adds	r7, #32
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <FrameRd>:
// Funkcja do odczytu ramki
void FrameRd() {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
    int16_t sign;

    if (USART_RX_Empty == USART_RX_Busy) { // Sprawdzanie, czy są dane dostępne
 800202a:	4b3a      	ldr	r3, [pc, #232]	@ (8002114 <FrameRd+0xf0>)
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	4b39      	ldr	r3, [pc, #228]	@ (8002118 <FrameRd+0xf4>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	429a      	cmp	r2, r3
 8002038:	d067      	beq.n	800210a <FrameRd+0xe6>
        return;
    }

    sign = USART_RxBuf[USART_RX_Busy];
 800203a:	4b37      	ldr	r3, [pc, #220]	@ (8002118 <FrameRd+0xf4>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <FrameRd+0xf8>)
 8002044:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002048:	b29b      	uxth	r3, r3
 800204a:	80fb      	strh	r3, [r7, #6]
    USART_RX_Busy++;
 800204c:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <FrameRd+0xf4>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	b29b      	uxth	r3, r3
 8002052:	3301      	adds	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b30      	ldr	r3, [pc, #192]	@ (8002118 <FrameRd+0xf4>)
 8002058:	801a      	strh	r2, [r3, #0]

    if (USART_RX_Busy >= USART_RXBUF_LEN) {
 800205a:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <FrameRd+0xf4>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002064:	d302      	bcc.n	800206c <FrameRd+0x48>
        USART_RX_Busy = 0;
 8002066:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <FrameRd+0xf4>)
 8002068:	2200      	movs	r2, #0
 800206a:	801a      	strh	r2, [r3, #0]
    }

    // Sprawdzenie początkowego znaku { i sprawdzanie, czy w polu danych
	// znak nie jest escape'owany
    if (sign == '{' && !(frame_id > 9 && frame[frame_id - 1] == '\\')) {
 800206c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002070:	2b7b      	cmp	r3, #123	@ 0x7b
 8002072:	d111      	bne.n	8002098 <FrameRd+0x74>
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <FrameRd+0xfc>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	2b09      	cmp	r3, #9
 800207a:	d906      	bls.n	800208a <FrameRd+0x66>
 800207c:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <FrameRd+0xfc>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	4a28      	ldr	r2, [pc, #160]	@ (8002124 <FrameRd+0x100>)
 8002084:	5cd3      	ldrb	r3, [r2, r3]
 8002086:	2b5c      	cmp	r3, #92	@ 0x5c
 8002088:	d006      	beq.n	8002098 <FrameRd+0x74>
        detection = Start;
 800208a:	4b27      	ldr	r3, [pc, #156]	@ (8002128 <FrameRd+0x104>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
        frame_id = 0; // Resetowanie długości ramki
 8002090:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <FrameRd+0xfc>)
 8002092:	2200      	movs	r2, #0
 8002094:	801a      	strh	r2, [r3, #0]
        return;
 8002096:	e039      	b.n	800210c <FrameRd+0xe8>
    }

    if (detection == Start) {
 8002098:	4b23      	ldr	r3, [pc, #140]	@ (8002128 <FrameRd+0x104>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d135      	bne.n	800210c <FrameRd+0xe8>
        // Sprawdzenie końcowego znaku } i sprawdzanie, czy w polu danych
    	// znak nie jest escape'owany
        if (sign == '}' && !(frame_id > 9 && frame[frame_id - 1] == '\\')) {
 80020a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020a4:	2b7d      	cmp	r3, #125	@ 0x7d
 80020a6:	d117      	bne.n	80020d8 <FrameRd+0xb4>
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <FrameRd+0xfc>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d906      	bls.n	80020be <FrameRd+0x9a>
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <FrameRd+0xfc>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002124 <FrameRd+0x100>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	2b5c      	cmp	r3, #92	@ 0x5c
 80020bc:	d00c      	beq.n	80020d8 <FrameRd+0xb4>
            frame_length = frame_id;
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <FrameRd+0xfc>)
 80020c0:	881a      	ldrh	r2, [r3, #0]
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <FrameRd+0x108>)
 80020c4:	801a      	strh	r2, [r3, #0]
            frame_id = 0;
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <FrameRd+0xfc>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	801a      	strh	r2, [r3, #0]
            decoding();
 80020cc:	f000 f830 	bl	8002130 <decoding>
            detection = Waiting; // Powrót do oczekiwania na nową ramkę
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <FrameRd+0x104>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
            return;
 80020d6:	e019      	b.n	800210c <FrameRd+0xe8>
        }

        frame[frame_id] = sign; // Dodaj bieżący znak do ramki
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <FrameRd+0xfc>)
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	b2d9      	uxtb	r1, r3
 80020e2:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <FrameRd+0x100>)
 80020e4:	5499      	strb	r1, [r3, r2]
        frame_id++;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <FrameRd+0xfc>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002120 <FrameRd+0xfc>)
 80020f0:	801a      	strh	r2, [r3, #0]


        // Sprawdzenie maksymalnej długości ramki
        if (frame_id > (MAX_FRAME_SIZE)) {
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <FrameRd+0xfc>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 80020fa:	d907      	bls.n	800210c <FrameRd+0xe8>
            frame_id = 0;
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <FrameRd+0xfc>)
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
            detection = Waiting; // Resetowanie przy błędnej ramce
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <FrameRd+0x104>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
            return;
 8002108:	e000      	b.n	800210c <FrameRd+0xe8>
        return;
 800210a:	bf00      	nop
        }
    }
}
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000ad8 	.word	0x20000ad8
 8002118:	20000ada 	.word	0x20000ada
 800211c:	20000880 	.word	0x20000880
 8002120:	20000478 	.word	0x20000478
 8002124:	200016b0 	.word	0x200016b0
 8002128:	20000475 	.word	0x20000475
 800212c:	20000476 	.word	0x20000476

08002130 <decoding>:

// Funkcja do dekodowania ramki
void decoding() {
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af00      	add	r7, sp, #0
    // 13 to min rozmiar ramki bez znaków {}
    if (frame_length < 13) {
 8002136:	4b8c      	ldr	r3, [pc, #560]	@ (8002368 <decoding+0x238>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	f240 810e 	bls.w	800235c <decoding+0x22c>
        // Ramka jest ignorowana, nie spełnia wymagań
        return;
    }

    // Kopiowanie nadawcy
    for (int i = 0; i < 3; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
 8002144:	e00b      	b.n	800215e <decoding+0x2e>
        frame_data.sender_frame[i] = frame[START_ID_SENDER + i];
 8002146:	4a89      	ldr	r2, [pc, #548]	@ (800236c <decoding+0x23c>)
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	4413      	add	r3, r2
 800214c:	7819      	ldrb	r1, [r3, #0]
 800214e:	4a88      	ldr	r2, [pc, #544]	@ (8002370 <decoding+0x240>)
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	4413      	add	r3, r2
 8002154:	460a      	mov	r2, r1
 8002156:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	3301      	adds	r3, #1
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	2b02      	cmp	r3, #2
 8002162:	ddf0      	ble.n	8002146 <decoding+0x16>
    }

    // Kopiowanie i porównywanie odbiorcy
    bool recipient_match = true;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    for (int i = 0; i < 3; i++) {
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e01b      	b.n	80021a8 <decoding+0x78>
    	frame_data.recipient_frame[i] = frame[START_ID_RECIPIENT + i];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3303      	adds	r3, #3
 8002174:	4a7d      	ldr	r2, [pc, #500]	@ (800236c <decoding+0x23c>)
 8002176:	5cd1      	ldrb	r1, [r2, r3]
 8002178:	4a7d      	ldr	r2, [pc, #500]	@ (8002370 <decoding+0x240>)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	460a      	mov	r2, r1
 8002182:	701a      	strb	r2, [r3, #0]
    	if (frame_data.recipient_frame[i] != STM[i]) {
 8002184:	4a7a      	ldr	r2, [pc, #488]	@ (8002370 <decoding+0x240>)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	4413      	add	r3, r2
 800218a:	3304      	adds	r3, #4
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	4979      	ldr	r1, [pc, #484]	@ (8002374 <decoding+0x244>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d003      	beq.n	80021a2 <decoding+0x72>
    	            recipient_match = false;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    	            break;
 80021a0:	e005      	b.n	80021ae <decoding+0x7e>
    for (int i = 0; i < 3; i++) {
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	dde0      	ble.n	8002170 <decoding+0x40>
    	}
    }
    if (!recipient_match) {
 80021ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021b2:	f083 0301 	eor.w	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 80d1 	bne.w	8002360 <decoding+0x230>
        return;
    }

    // Kopiowanie długości i sprawdzanie  jest liczbą w systemie 10
    for (int symbol_id = 0; symbol_id < 3; symbol_id++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e020      	b.n	8002206 <decoding+0xd6>
    	frame_data.length_of_command_frame[symbol_id] = frame[START_ID_LENGTH_COMMEND + symbol_id];
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	3306      	adds	r3, #6
 80021c8:	4a68      	ldr	r2, [pc, #416]	@ (800236c <decoding+0x23c>)
 80021ca:	5cd1      	ldrb	r1, [r2, r3]
 80021cc:	4a68      	ldr	r2, [pc, #416]	@ (8002370 <decoding+0x240>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4413      	add	r3, r2
 80021d2:	3308      	adds	r3, #8
 80021d4:	460a      	mov	r2, r1
 80021d6:	701a      	strb	r2, [r3, #0]
        if (!(frame_data.length_of_command_frame[symbol_id] >= '0' &&
 80021d8:	4a65      	ldr	r2, [pc, #404]	@ (8002370 <decoding+0x240>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4413      	add	r3, r2
 80021de:	3308      	adds	r3, #8
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80021e4:	d906      	bls.n	80021f4 <decoding+0xc4>
              frame_data.length_of_command_frame[symbol_id] <= '9')) {
 80021e6:	4a62      	ldr	r2, [pc, #392]	@ (8002370 <decoding+0x240>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	4413      	add	r3, r2
 80021ec:	3308      	adds	r3, #8
 80021ee:	781b      	ldrb	r3, [r3, #0]
        if (!(frame_data.length_of_command_frame[symbol_id] >= '0' &&
 80021f0:	2b39      	cmp	r3, #57	@ 0x39
 80021f2:	d905      	bls.n	8002200 <decoding+0xd0>
            USART_send_response(STM, frame_data.sender_frame, "WRLENDATA");
 80021f4:	4a60      	ldr	r2, [pc, #384]	@ (8002378 <decoding+0x248>)
 80021f6:	495e      	ldr	r1, [pc, #376]	@ (8002370 <decoding+0x240>)
 80021f8:	485e      	ldr	r0, [pc, #376]	@ (8002374 <decoding+0x244>)
 80021fa:	f001 fcef 	bl	8003bdc <USART_send_response>
            return;
 80021fe:	e0b0      	b.n	8002362 <decoding+0x232>
    for (int symbol_id = 0; symbol_id < 3; symbol_id++) {
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b02      	cmp	r3, #2
 800220a:	dddb      	ble.n	80021c4 <decoding+0x94>
        }
    }

    int cmdLength = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
    // Konwersja na int
    for (int i = 0; i < 3; i++) {
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e024      	b.n	8002260 <decoding+0x130>
    	if (!(frame_data.length_of_command_frame[i] - '0' >= 0 && frame_data.length_of_command_frame[i] - '0' <= 9 )){
 8002216:	4a56      	ldr	r2, [pc, #344]	@ (8002370 <decoding+0x240>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	3308      	adds	r3, #8
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b2f      	cmp	r3, #47	@ 0x2f
 8002222:	d906      	bls.n	8002232 <decoding+0x102>
 8002224:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <decoding+0x240>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	3308      	adds	r3, #8
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b39      	cmp	r3, #57	@ 0x39
 8002230:	d905      	bls.n	800223e <decoding+0x10e>
    		USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002232:	4a52      	ldr	r2, [pc, #328]	@ (800237c <decoding+0x24c>)
 8002234:	494e      	ldr	r1, [pc, #312]	@ (8002370 <decoding+0x240>)
 8002236:	484f      	ldr	r0, [pc, #316]	@ (8002374 <decoding+0x244>)
 8002238:	f001 fcd0 	bl	8003bdc <USART_send_response>
    		return;
 800223c:	e091      	b.n	8002362 <decoding+0x232>
    	}
        cmdLength = cmdLength * 10 + (frame_data.length_of_command_frame[i] - '0');
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4619      	mov	r1, r3
 800224a:	4a49      	ldr	r2, [pc, #292]	@ (8002370 <decoding+0x240>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	3308      	adds	r3, #8
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b30      	subs	r3, #48	@ 0x30
 8002256:	440b      	add	r3, r1
 8002258:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 3; i++) {
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	3301      	adds	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2b02      	cmp	r3, #2
 8002264:	ddd7      	ble.n	8002216 <decoding+0xe6>
    }

    if (cmdLength >= 256 && cmdLength <=0){
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2bff      	cmp	r3, #255	@ 0xff
 800226a:	dd08      	ble.n	800227e <decoding+0x14e>
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dc05      	bgt.n	800227e <decoding+0x14e>
    	USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002272:	4a42      	ldr	r2, [pc, #264]	@ (800237c <decoding+0x24c>)
 8002274:	493e      	ldr	r1, [pc, #248]	@ (8002370 <decoding+0x240>)
 8002276:	483f      	ldr	r0, [pc, #252]	@ (8002374 <decoding+0x244>)
 8002278:	f001 fcb0 	bl	8003bdc <USART_send_response>
    	return;
 800227c:	e071      	b.n	8002362 <decoding+0x232>
    }

    // Kopiowanie danych
    for (int i = 0; i < cmdLength; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e00c      	b.n	800229e <decoding+0x16e>
        frame_data.data_frame[i] = frame[9 + i];
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	3309      	adds	r3, #9
 8002288:	4a38      	ldr	r2, [pc, #224]	@ (800236c <decoding+0x23c>)
 800228a:	5cd1      	ldrb	r1, [r2, r3]
 800228c:	4a38      	ldr	r2, [pc, #224]	@ (8002370 <decoding+0x240>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	330b      	adds	r3, #11
 8002294:	460a      	mov	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < cmdLength; i++) {
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	3301      	adds	r3, #1
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbee      	blt.n	8002284 <decoding+0x154>
    }

    // Kopiowanie CRC
    for (int i = 0; i < 4; i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	e010      	b.n	80022ce <decoding+0x19e>
        frame_data.crc[i] = frame[9 + cmdLength + i];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f103 0209 	add.w	r2, r3, #9
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a2d      	ldr	r2, [pc, #180]	@ (800236c <decoding+0x23c>)
 80022b8:	5cd1      	ldrb	r1, [r2, r3]
 80022ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <decoding+0x240>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80022c4:	460a      	mov	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	ddeb      	ble.n	80022ac <decoding+0x17c>
    }

    // Sprawdzanie czy crc jest liczbą szesnastkową
    for (int symbol_id = 0; symbol_id < 4; symbol_id++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	e028      	b.n	800232c <decoding+0x1fc>
        if (!(frame_data.crc[symbol_id] >= '0' && frame_data.crc[symbol_id] <= '9') &&
 80022da:	4a25      	ldr	r2, [pc, #148]	@ (8002370 <decoding+0x240>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80022e8:	d907      	bls.n	80022fa <decoding+0x1ca>
 80022ea:	4a21      	ldr	r2, [pc, #132]	@ (8002370 <decoding+0x240>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b39      	cmp	r3, #57	@ 0x39
 80022f8:	d915      	bls.n	8002326 <decoding+0x1f6>
            !(frame_data.crc[symbol_id] >= 'A' && frame_data.crc[symbol_id] <= 'F')) {
 80022fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <decoding+0x240>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002304:	781b      	ldrb	r3, [r3, #0]
        if (!(frame_data.crc[symbol_id] >= '0' && frame_data.crc[symbol_id] <= '9') &&
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d907      	bls.n	800231a <decoding+0x1ea>
            !(frame_data.crc[symbol_id] >= 'A' && frame_data.crc[symbol_id] <= 'F')) {
 800230a:	4a19      	ldr	r2, [pc, #100]	@ (8002370 <decoding+0x240>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4413      	add	r3, r2
 8002310:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b46      	cmp	r3, #70	@ 0x46
 8002318:	d905      	bls.n	8002326 <decoding+0x1f6>
            USART_send_response(STM, frame_data.sender_frame, "WRCRC");
 800231a:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <decoding+0x250>)
 800231c:	4914      	ldr	r1, [pc, #80]	@ (8002370 <decoding+0x240>)
 800231e:	4815      	ldr	r0, [pc, #84]	@ (8002374 <decoding+0x244>)
 8002320:	f001 fc5c 	bl	8003bdc <USART_send_response>
            return;
 8002324:	e01d      	b.n	8002362 <decoding+0x232>
    for (int symbol_id = 0; symbol_id < 4; symbol_id++) {
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3301      	adds	r3, #1
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b03      	cmp	r3, #3
 8002330:	ddd3      	ble.n	80022da <decoding+0x1aa>
        }
    }

    if (verify_crc((uint16_t *)frame, frame_length-4, frame_data.crc)) {
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <decoding+0x238>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	3b04      	subs	r3, #4
 8002338:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <decoding+0x254>)
 800233a:	4619      	mov	r1, r3
 800233c:	480b      	ldr	r0, [pc, #44]	@ (800236c <decoding+0x23c>)
 800233e:	f7ff fe23 	bl	8001f88 <verify_crc>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <decoding+0x220>
        parse_and_execute_command(frame_data.data_frame);
 8002348:	480f      	ldr	r0, [pc, #60]	@ (8002388 <decoding+0x258>)
 800234a:	f000 f81f 	bl	800238c <parse_and_execute_command>
 800234e:	e008      	b.n	8002362 <decoding+0x232>
    } else {
        USART_send_response(STM, frame_data.sender_frame, "WRCRC");
 8002350:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <decoding+0x250>)
 8002352:	4907      	ldr	r1, [pc, #28]	@ (8002370 <decoding+0x240>)
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <decoding+0x244>)
 8002356:	f001 fc41 	bl	8003bdc <USART_send_response>
 800235a:	e002      	b.n	8002362 <decoding+0x232>
        return;
 800235c:	bf00      	nop
 800235e:	e000      	b.n	8002362 <decoding+0x232>
        return;
 8002360:	bf00      	nop
    }
}
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000476 	.word	0x20000476
 800236c:	200016b0 	.word	0x200016b0
 8002370:	20000364 	.word	0x20000364
 8002374:	0800d7ac 	.word	0x0800d7ac
 8002378:	0800d7a0 	.word	0x0800d7a0
 800237c:	0800d7b0 	.word	0x0800d7b0
 8002380:	0800d7b8 	.word	0x0800d7b8
 8002384:	20000470 	.word	0x20000470
 8002388:	2000036f 	.word	0x2000036f

0800238c <parse_and_execute_command>:

// Funkcja do analizowania i wykonywania komend
void parse_and_execute_command(const char* data, int data_length) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b0ca      	sub	sp, #296	@ 0x128
 8002390:	af02      	add	r7, sp, #8
 8002392:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002396:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800239a:	6018      	str	r0, [r3, #0]
 800239c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023a4:	6019      	str	r1, [r3, #0]
    char header[CMD_MAX_LENGTH] = {0};
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023ac:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80023b0:	2251      	movs	r2, #81	@ 0x51
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f007 fdfe 	bl	8009fb6 <memset>
    char command[CMD_MAX_LENGTH] = {0};
 80023ba:	2300      	movs	r3, #0
 80023bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80023be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023c2:	2251      	movs	r2, #81	@ 0x51
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f007 fdf5 	bl	8009fb6 <memset>
    char value[CMD_MAX_LENGTH] = {0};
 80023cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	3304      	adds	r3, #4
 80023da:	2251      	movs	r2, #81	@ 0x51
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f007 fde9 	bl	8009fb6 <memset>

    int header_index = 0, command_index = 0, value_index = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    int i = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // Parsowanie nagłówka (do znaku '_')
    while (i < data_length && data[i] != '_') {
 80023fc:	e016      	b.n	800242c <parse_and_execute_command+0xa0>
        header[header_index++] = data[i++];
 80023fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8002408:	461a      	mov	r2, r3
 800240a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800240e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	441a      	add	r2, r3
 8002416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800241a:	1c59      	adds	r1, r3, #1
 800241c:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002426:	443b      	add	r3, r7
 8002428:	f803 2c68 	strb.w	r2, [r3, #-104]
    while (i < data_length && data[i] != '_') {
 800242c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002430:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002434:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	da0a      	bge.n	8002454 <parse_and_execute_command+0xc8>
 800243e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002442:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8002446:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b5f      	cmp	r3, #95	@ 0x5f
 8002452:	d1d4      	bne.n	80023fe <parse_and_execute_command+0x72>
    }
    i++; // Pomijamy znak '_'
 8002454:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002458:	3301      	adds	r3, #1
 800245a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // Parsowanie komendy (do znaku '[')
    while (i < data_length && data[i] != '[') {
 800245e:	e016      	b.n	800248e <parse_and_execute_command+0x102>
        command[command_index++] = data[i++];
 8002460:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 800246a:	461a      	mov	r2, r3
 800246c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002470:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	441a      	add	r2, r3
 8002478:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800247c:	1c59      	adds	r1, r3, #1
 800247e:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002488:	443b      	add	r3, r7
 800248a:	f803 2cc0 	strb.w	r2, [r3, #-192]
    while (i < data_length && data[i] != '[') {
 800248e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002492:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002496:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	da0a      	bge.n	80024b6 <parse_and_execute_command+0x12a>
 80024a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024a4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80024a8:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b5b      	cmp	r3, #91	@ 0x5b
 80024b4:	d1d4      	bne.n	8002460 <parse_and_execute_command+0xd4>
    }
    i++; // Pomijamy znak '['
 80024b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    // Parsowanie wartości (do znaku ']')
    while (i < data_length && data[i] != ']') {
 80024c0:	e016      	b.n	80024f0 <parse_and_execute_command+0x164>
        value[value_index++] = data[i++];
 80024c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 80024cc:	461a      	mov	r2, r3
 80024ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	441a      	add	r2, r3
 80024da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 80024e4:	7811      	ldrb	r1, [r2, #0]
 80024e6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80024ea:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 80024ee:	54d1      	strb	r1, [r2, r3]
    while (i < data_length && data[i] != ']') {
 80024f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80024f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	da0a      	bge.n	8002518 <parse_and_execute_command+0x18c>
 8002502:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002506:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800250a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	4413      	add	r3, r2
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b5d      	cmp	r3, #93	@ 0x5d
 8002516:	d1d4      	bne.n	80024c2 <parse_and_execute_command+0x136>
    }

    // Sprawdzenie, czy wszystkie części zostały poprawnie sparsowane
    if (header_index == 0 || command_index == 0 || value_index == 0) {
 8002518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <parse_and_execute_command+0x1a4>
 8002520:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <parse_and_execute_command+0x1a4>
 8002528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <parse_and_execute_command+0x1b0>
        USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002530:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <parse_and_execute_command+0x1d8>)
 8002532:	490d      	ldr	r1, [pc, #52]	@ (8002568 <parse_and_execute_command+0x1dc>)
 8002534:	480d      	ldr	r0, [pc, #52]	@ (800256c <parse_and_execute_command+0x1e0>)
 8002536:	f001 fb51 	bl	8003bdc <USART_send_response>
 800253a:	e00f      	b.n	800255c <parse_and_execute_command+0x1d0>
        return;
    }

    // Wykonanie komendy
    Commends(header, header_index, command, command_index, value, value_index);
 800253c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8002540:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8002544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002554:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8002558:	f000 f95c 	bl	8002814 <Commends>
}
 800255c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	0800d7b0 	.word	0x0800d7b0
 8002568:	20000364 	.word	0x20000364
 800256c:	0800d7ac 	.word	0x0800d7ac

08002570 <isNumber>:
// Funkcja sprawdzająca, czy wartość jest poprawną liczbą
bool isNumber(const char* value, int length) {
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < length; i++) {
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e010      	b.n	80025a2 <isNumber+0x32>
        if (!isdigit((unsigned char)value[i])) {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	4a0b      	ldr	r2, [pc, #44]	@ (80025b8 <isNumber+0x48>)
 800258c:	4413      	add	r3, r2
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <isNumber+0x2c>
            return false;  // Jeśli znak nie jest cyfrą, zwróć false
 8002598:	2300      	movs	r3, #0
 800259a:	e007      	b.n	80025ac <isNumber+0x3c>
    for (int i = 0; i < length; i++) {
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	dbea      	blt.n	8002580 <isNumber+0x10>
        }
    }
    return true;  // Wszystkie znaki są cyframi
 80025aa:	2301      	movs	r3, #1
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	08010138 	.word	0x08010138

080025bc <handleNumber>:
// Funkcja zamieniająca ciąg znaków na liczbę całkowitą, jeśli jest poprawny, w przeciwnym razie zwraca -1
int handleNumber(const char* value, int length) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    if (isNumber(value, length)) {
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ffd1 	bl	8002570 <isNumber>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01a      	beq.n	800260a <handleNumber+0x4e>
        int number = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < length; i++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	e00f      	b.n	80025fe <handleNumber+0x42>
            number = number * 10 + (value[i] - '0');  // Ręczna konwersja na liczbę
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4619      	mov	r1, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	3b30      	subs	r3, #48	@ 0x30
 80025f4:	440b      	add	r3, r1
 80025f6:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < length; i++) {
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	dbeb      	blt.n	80025de <handleNumber+0x22>
        }
        return number;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	e001      	b.n	800260e <handleNumber+0x52>
    }
    return -1;  // Jeśli wartość nie jest liczbą, zwróć -1
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <isInRange>:

// Funkcja sprawdzająca, czy wartość mieści się w zadanym zakresie (w tym zakresie)
bool isInRange(int value, int min, int max) {
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
    return value >= min && value <= max;  // Zwraca true, jeśli wartość jest pomiędzy min a max
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	429a      	cmp	r2, r3
 8002628:	db05      	blt.n	8002636 <isInRange+0x20>
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	dc01      	bgt.n	8002636 <isInRange+0x20>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <isInRange+0x22>
 8002636:	2300      	movs	r3, #0
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
}
 800263e:	4618      	mov	r0, r3
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <custom_strncmp>:
// Funkcja porównująca tablice znakowe
int custom_strncmp(const char* str1, const char* str2, int length1, int length2) {
 800264a:	b480      	push	{r7}
 800264c:	b087      	sub	sp, #28
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	603b      	str	r3, [r7, #0]
    if (length1 != length2){
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d002      	beq.n	8002666 <custom_strncmp+0x1c>
    	return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	e01f      	b.n	80026a6 <custom_strncmp+0x5c>
    }
    // Porównanie znaków
    for (int i = 0; i < length1; i++) {
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e017      	b.n	800269c <custom_strncmp+0x52>
        if (str1[i] != str2[i]) {
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	781a      	ldrb	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	440b      	add	r3, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d00a      	beq.n	8002696 <custom_strncmp+0x4c>
            return (unsigned char)str1[i] - (unsigned char)str2[i];  // Zwróć różnicę między znakami
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	4413      	add	r3, r2
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	68ba      	ldr	r2, [r7, #8]
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	1acb      	subs	r3, r1, r3
 8002694:	e007      	b.n	80026a6 <custom_strncmp+0x5c>
    for (int i = 0; i < length1; i++) {
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbe3      	blt.n	800266c <custom_strncmp+0x22>
        }
    }

    return 0; // Tablice są identyczne
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <value_check>:
// Funkcja sprawdzająca, czy dana wartość jest poprawna w zależności od head i instruction
bool value_check(const char* head, int head_length, const char* instruction, int instruction_length, const char* value, int value_length) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
    int value_to_int = handleNumber(value, value_length);  // Konwersja wartości na liczbę
 80026c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c4:	6a38      	ldr	r0, [r7, #32]
 80026c6:	f7ff ff79 	bl	80025bc <handleNumber>
 80026ca:	6178      	str	r0, [r7, #20]

    // Porównanie head z "FOOD", "ENERGY", "FUN"
    if (custom_strncmp(head, "FOOD", head_length, 4) == 0 ||
 80026cc:	2304      	movs	r3, #4
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	4946      	ldr	r1, [pc, #280]	@ (80027ec <value_check+0x138>)
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff ffb9 	bl	800264a <custom_strncmp>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d011      	beq.n	8002702 <value_check+0x4e>
        custom_strncmp(head, "ENERGY", head_length, 6) == 0 ||
 80026de:	2306      	movs	r3, #6
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4943      	ldr	r1, [pc, #268]	@ (80027f0 <value_check+0x13c>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff ffb0 	bl	800264a <custom_strncmp>
 80026ea:	4603      	mov	r3, r0
    if (custom_strncmp(head, "FOOD", head_length, 4) == 0 ||
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <value_check+0x4e>
        custom_strncmp(head, "FUN", head_length, 3) == 0) {
 80026f0:	2303      	movs	r3, #3
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	493f      	ldr	r1, [pc, #252]	@ (80027f4 <value_check+0x140>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f7ff ffa7 	bl	800264a <custom_strncmp>
 80026fc:	4603      	mov	r3, r0
        custom_strncmp(head, "ENERGY", head_length, 6) == 0 ||
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d13d      	bne.n	800277e <value_check+0xca>

        // Sprawdzenie instrukcji ADD lub SUBTRACT
        if ((custom_strncmp(instruction, "ADD", instruction_length, 3) == 0 ||
 8002702:	2303      	movs	r3, #3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	493c      	ldr	r1, [pc, #240]	@ (80027f8 <value_check+0x144>)
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff9e 	bl	800264a <custom_strncmp>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <value_check+0x72>
             custom_strncmp(instruction, "SUBTRACT", instruction_length, 8) == 0) &&
 8002714:	2308      	movs	r3, #8
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	4938      	ldr	r1, [pc, #224]	@ (80027fc <value_check+0x148>)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff95 	bl	800264a <custom_strncmp>
 8002720:	4603      	mov	r3, r0
        if ((custom_strncmp(instruction, "ADD", instruction_length, 3) == 0 ||
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <value_check+0x86>
            isInRange(value_to_int, 1, 5)) {
 8002726:	2205      	movs	r2, #5
 8002728:	2101      	movs	r1, #1
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff73 	bl	8002616 <isInRange>
 8002730:	4603      	mov	r3, r0
             custom_strncmp(instruction, "SUBTRACT", instruction_length, 8) == 0) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <value_check+0x86>
            return true;
 8002736:	2301      	movs	r3, #1
 8002738:	e053      	b.n	80027e2 <value_check+0x12e>
        }
        // Sprawdzenie instrukcji SET
        if (custom_strncmp(instruction, "SET", instruction_length, 3) == 0 &&
 800273a:	2303      	movs	r3, #3
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	4930      	ldr	r1, [pc, #192]	@ (8002800 <value_check+0x14c>)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff82 	bl	800264a <custom_strncmp>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d109      	bne.n	8002760 <value_check+0xac>
            isInRange(value_to_int, 0, 5)) {
 800274c:	2205      	movs	r2, #5
 800274e:	2100      	movs	r1, #0
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7ff ff60 	bl	8002616 <isInRange>
 8002756:	4603      	mov	r3, r0
        if (custom_strncmp(instruction, "SET", instruction_length, 3) == 0 &&
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <value_check+0xac>
            return true;
 800275c:	2301      	movs	r3, #1
 800275e:	e040      	b.n	80027e2 <value_check+0x12e>
        }
        // Sprawdzenie instrukcji CLEAR
        if (custom_strncmp(instruction, "CLEAR", instruction_length, 5) == 0 &&
 8002760:	2305      	movs	r3, #5
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	4927      	ldr	r1, [pc, #156]	@ (8002804 <value_check+0x150>)
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff6f 	bl	800264a <custom_strncmp>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d135      	bne.n	80027de <value_check+0x12a>
            value[0] == 'X') {
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	781b      	ldrb	r3, [r3, #0]
        if (custom_strncmp(instruction, "CLEAR", instruction_length, 5) == 0 &&
 8002776:	2b58      	cmp	r3, #88	@ 0x58
 8002778:	d131      	bne.n	80027de <value_check+0x12a>
            return true;
 800277a:	2301      	movs	r3, #1
 800277c:	e031      	b.n	80027e2 <value_check+0x12e>
        }
    }
    // Porównanie head z "MENU"
    else if (custom_strncmp(head, "MENU", head_length, 4) == 0) {
 800277e:	2304      	movs	r3, #4
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	4921      	ldr	r1, [pc, #132]	@ (8002808 <value_check+0x154>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff ff60 	bl	800264a <custom_strncmp>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d112      	bne.n	80027b6 <value_check+0x102>
        // Sprawdzenie instrukcji CHANGE
        if (custom_strncmp(instruction, "CHANGE", instruction_length, 6) == 0 &&
 8002790:	2306      	movs	r3, #6
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	491d      	ldr	r1, [pc, #116]	@ (800280c <value_check+0x158>)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff57 	bl	800264a <custom_strncmp>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d11e      	bne.n	80027e0 <value_check+0x12c>
            isInRange(value_to_int, 1, 3)) {
 80027a2:	2203      	movs	r2, #3
 80027a4:	2101      	movs	r1, #1
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff35 	bl	8002616 <isInRange>
 80027ac:	4603      	mov	r3, r0
        if (custom_strncmp(instruction, "CHANGE", instruction_length, 6) == 0 &&
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <value_check+0x12c>
            return true;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e015      	b.n	80027e2 <value_check+0x12e>
        }
    }
    // Porównanie head z "WAKEUP"
    else if (custom_strncmp(head, "WAKEUP", head_length, 6) == 0) {
 80027b6:	2306      	movs	r3, #6
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	4915      	ldr	r1, [pc, #84]	@ (8002810 <value_check+0x15c>)
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff ff44 	bl	800264a <custom_strncmp>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <value_check+0x12c>
        // Sprawdzenie zakresu wartości
        if (isInRange(value_to_int, 1, 65535)) {
 80027c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027cc:	2101      	movs	r1, #1
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff21 	bl	8002616 <isInRange>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <value_check+0x12c>
            return true;
 80027da:	2301      	movs	r3, #1
 80027dc:	e001      	b.n	80027e2 <value_check+0x12e>
        if (custom_strncmp(instruction, "CLEAR", instruction_length, 5) == 0 &&
 80027de:	bf00      	nop
        }
    }

    return false;  // Jeśli żaden warunek nie jest spełniony, zwróć false
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	0800d7c0 	.word	0x0800d7c0
 80027f0:	0800d7c8 	.word	0x0800d7c8
 80027f4:	0800d7d0 	.word	0x0800d7d0
 80027f8:	0800d7d4 	.word	0x0800d7d4
 80027fc:	0800d7d8 	.word	0x0800d7d8
 8002800:	0800d7e4 	.word	0x0800d7e4
 8002804:	0800d7e8 	.word	0x0800d7e8
 8002808:	0800d7f0 	.word	0x0800d7f0
 800280c:	0800d7f8 	.word	0x0800d7f8
 8002810:	0800d800 	.word	0x0800d800

08002814 <Commends>:

// Główna funkcja przetwarzająca komendy i wykonująca odpowiednie akcje
void Commends(const char* head, int head_length, const char* instruction, int instruction_length, const char* value, int value_length) {
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b08b      	sub	sp, #44	@ 0x2c
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
    uint16_t* attribute = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]

    // Obsługa FOOD, ENERGY, FUN
    if (custom_strncmp(head, "FOOD", head_length, 4) == 0 ||
 8002826:	2304      	movs	r3, #4
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	4996      	ldr	r1, [pc, #600]	@ (8002a84 <Commends+0x270>)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff0c 	bl	800264a <custom_strncmp>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <Commends+0x4a>
        custom_strncmp(head, "ENERGY", head_length, 6) == 0 ||
 8002838:	2306      	movs	r3, #6
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	4992      	ldr	r1, [pc, #584]	@ (8002a88 <Commends+0x274>)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff ff03 	bl	800264a <custom_strncmp>
 8002844:	4603      	mov	r3, r0
    if (custom_strncmp(head, "FOOD", head_length, 4) == 0 ||
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <Commends+0x4a>
        custom_strncmp(head, "FUN", head_length, 3) == 0) {
 800284a:	2303      	movs	r3, #3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	498f      	ldr	r1, [pc, #572]	@ (8002a8c <Commends+0x278>)
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff fefa 	bl	800264a <custom_strncmp>
 8002856:	4603      	mov	r3, r0
        custom_strncmp(head, "ENERGY", head_length, 6) == 0 ||
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 813f 	bne.w	8002adc <Commends+0x2c8>

        if (custom_strncmp(head, "FOOD", head_length, 4) == 0) {
 800285e:	2304      	movs	r3, #4
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	4988      	ldr	r1, [pc, #544]	@ (8002a84 <Commends+0x270>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff fef0 	bl	800264a <custom_strncmp>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <Commends+0x62>
            attribute = &g_atribute.food;
 8002870:	4b87      	ldr	r3, [pc, #540]	@ (8002a90 <Commends+0x27c>)
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	e016      	b.n	80028a4 <Commends+0x90>
        } else if (custom_strncmp(head, "ENERGY", head_length, 6) == 0) {
 8002876:	2306      	movs	r3, #6
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	4983      	ldr	r1, [pc, #524]	@ (8002a88 <Commends+0x274>)
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fee4 	bl	800264a <custom_strncmp>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <Commends+0x7a>
            attribute = &g_atribute.energy;
 8002888:	4b82      	ldr	r3, [pc, #520]	@ (8002a94 <Commends+0x280>)
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e00a      	b.n	80028a4 <Commends+0x90>
        } else if (custom_strncmp(head, "FUN", head_length, 3) == 0) {
 800288e:	2303      	movs	r3, #3
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	497e      	ldr	r1, [pc, #504]	@ (8002a8c <Commends+0x278>)
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fed8 	bl	800264a <custom_strncmp>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <Commends+0x90>
            attribute = &g_atribute.fun;
 80028a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <Commends+0x284>)
 80028a2:	61fb      	str	r3, [r7, #28]
        }

        if (!attribute) {
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <Commends+0xa2>
            USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 80028aa:	4a7c      	ldr	r2, [pc, #496]	@ (8002a9c <Commends+0x288>)
 80028ac:	497c      	ldr	r1, [pc, #496]	@ (8002aa0 <Commends+0x28c>)
 80028ae:	487d      	ldr	r0, [pc, #500]	@ (8002aa4 <Commends+0x290>)
 80028b0:	f001 f994 	bl	8003bdc <USART_send_response>
            return;
 80028b4:	e19d      	b.n	8002bf2 <Commends+0x3de>
        }

        // Sprawdzenie, czy menu jest w stanie gry (blokada akcji)
        if (g_atribute.menu == 3) {
 80028b6:	4b76      	ldr	r3, [pc, #472]	@ (8002a90 <Commends+0x27c>)
 80028b8:	88db      	ldrh	r3, [r3, #6]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d105      	bne.n	80028ca <Commends+0xb6>
            USART_send_response(STM, frame_data.sender_frame, "WRWAITGAME");
 80028be:	4a7a      	ldr	r2, [pc, #488]	@ (8002aa8 <Commends+0x294>)
 80028c0:	4977      	ldr	r1, [pc, #476]	@ (8002aa0 <Commends+0x28c>)
 80028c2:	4878      	ldr	r0, [pc, #480]	@ (8002aa4 <Commends+0x290>)
 80028c4:	f001 f98a 	bl	8003bdc <USART_send_response>
            return;
 80028c8:	e193      	b.n	8002bf2 <Commends+0x3de>
        }

        // Obsługa instrukcji ADD
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 80028ca:	2303      	movs	r3, #3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4977      	ldr	r1, [pc, #476]	@ (8002aac <Commends+0x298>)
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff feba 	bl	800264a <custom_strncmp>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d133      	bne.n	8002944 <Commends+0x130>
            if (g_atribute.minigame) {
 80028dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a90 <Commends+0x27c>)
 80028de:	7b1b      	ldrb	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <Commends+0xdc>
                USART_send_response(STM, frame_data.sender_frame, "WRWAITGAME");
 80028e4:	4a70      	ldr	r2, [pc, #448]	@ (8002aa8 <Commends+0x294>)
 80028e6:	496e      	ldr	r1, [pc, #440]	@ (8002aa0 <Commends+0x28c>)
 80028e8:	486e      	ldr	r0, [pc, #440]	@ (8002aa4 <Commends+0x290>)
 80028ea:	f001 f977 	bl	8003bdc <USART_send_response>
                return;
 80028ee:	e180      	b.n	8002bf2 <Commends+0x3de>
            }
            if (value_check(head, head_length, instruction, instruction_length, value, value_length)) {
 80028f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff fed8 	bl	80026b4 <value_check>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <Commends+0x124>
                int new_value = *attribute + handleNumber(value, value_length);
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461c      	mov	r4, r3
 8002910:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002912:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002914:	f7ff fe52 	bl	80025bc <handleNumber>
 8002918:	4603      	mov	r3, r0
 800291a:	4423      	add	r3, r4
 800291c:	617b      	str	r3, [r7, #20]
                *attribute = (new_value > 5) ? 5 : new_value;  // Ograniczenie wartości do 5
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b05      	cmp	r3, #5
 8002922:	bfa8      	it	ge
 8002924:	2305      	movge	r3, #5
 8002926:	b29a      	uxth	r2, r3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	801a      	strh	r2, [r3, #0]
                USART_send_response(STM, frame_data.sender_frame, "ACCEPTADDAT");
 800292c:	4a60      	ldr	r2, [pc, #384]	@ (8002ab0 <Commends+0x29c>)
 800292e:	495c      	ldr	r1, [pc, #368]	@ (8002aa0 <Commends+0x28c>)
 8002930:	485c      	ldr	r0, [pc, #368]	@ (8002aa4 <Commends+0x290>)
 8002932:	f001 f953 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002936:	e15c      	b.n	8002bf2 <Commends+0x3de>
            } else {
                USART_send_response(STM, frame_data.sender_frame, "WRVALUE");
 8002938:	4a5e      	ldr	r2, [pc, #376]	@ (8002ab4 <Commends+0x2a0>)
 800293a:	4959      	ldr	r1, [pc, #356]	@ (8002aa0 <Commends+0x28c>)
 800293c:	4859      	ldr	r0, [pc, #356]	@ (8002aa4 <Commends+0x290>)
 800293e:	f001 f94d 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002942:	e156      	b.n	8002bf2 <Commends+0x3de>
            }
        }
        // Obsługa instrukcji SUBTRACT
        else if (custom_strncmp(instruction, "SUBTRACT", instruction_length, 8) == 0) {
 8002944:	2308      	movs	r3, #8
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	495b      	ldr	r1, [pc, #364]	@ (8002ab8 <Commends+0x2a4>)
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff fe7d 	bl	800264a <custom_strncmp>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d132      	bne.n	80029bc <Commends+0x1a8>
            if (g_atribute.minigame) {
 8002956:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <Commends+0x27c>)
 8002958:	7b1b      	ldrb	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <Commends+0x156>
                USART_send_response(STM, frame_data.sender_frame, "WRWAITGAME");
 800295e:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <Commends+0x294>)
 8002960:	494f      	ldr	r1, [pc, #316]	@ (8002aa0 <Commends+0x28c>)
 8002962:	4850      	ldr	r0, [pc, #320]	@ (8002aa4 <Commends+0x290>)
 8002964:	f001 f93a 	bl	8003bdc <USART_send_response>
                return;
 8002968:	e143      	b.n	8002bf2 <Commends+0x3de>
            }
            if (value_check(head, head_length, instruction, instruction_length, value, value_length)) {
 800296a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fe9b 	bl	80026b4 <value_check>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d015      	beq.n	80029b0 <Commends+0x19c>
                int new_value = *attribute - handleNumber(value, value_length);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	461c      	mov	r4, r3
 800298a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800298c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800298e:	f7ff fe15 	bl	80025bc <handleNumber>
 8002992:	4603      	mov	r3, r0
 8002994:	1ae3      	subs	r3, r4, r3
 8002996:	61bb      	str	r3, [r7, #24]
                *attribute = (new_value < 0) ? 0 : new_value;  // Ograniczenie wartości do 0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800299e:	b29a      	uxth	r2, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	801a      	strh	r2, [r3, #0]
                USART_send_response(STM, frame_data.sender_frame, "ACCEPTSUBAT");
 80029a4:	4a45      	ldr	r2, [pc, #276]	@ (8002abc <Commends+0x2a8>)
 80029a6:	493e      	ldr	r1, [pc, #248]	@ (8002aa0 <Commends+0x28c>)
 80029a8:	483e      	ldr	r0, [pc, #248]	@ (8002aa4 <Commends+0x290>)
 80029aa:	f001 f917 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 80029ae:	e120      	b.n	8002bf2 <Commends+0x3de>
            } else {
                USART_send_response(STM, frame_data.sender_frame, "WRVALUE");
 80029b0:	4a40      	ldr	r2, [pc, #256]	@ (8002ab4 <Commends+0x2a0>)
 80029b2:	493b      	ldr	r1, [pc, #236]	@ (8002aa0 <Commends+0x28c>)
 80029b4:	483b      	ldr	r0, [pc, #236]	@ (8002aa4 <Commends+0x290>)
 80029b6:	f001 f911 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 80029ba:	e11a      	b.n	8002bf2 <Commends+0x3de>
            }
        }
        // Obsługa instrukcji SET
        else if (custom_strncmp(instruction, "SET", instruction_length, 3) == 0) {
 80029bc:	2303      	movs	r3, #3
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	493f      	ldr	r1, [pc, #252]	@ (8002ac0 <Commends+0x2ac>)
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fe41 	bl	800264a <custom_strncmp>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d12a      	bne.n	8002a24 <Commends+0x210>
            if (g_atribute.minigame) {
 80029ce:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <Commends+0x27c>)
 80029d0:	7b1b      	ldrb	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <Commends+0x1ce>
                USART_send_response(STM, frame_data.sender_frame, "WRWAITGAME");
 80029d6:	4a34      	ldr	r2, [pc, #208]	@ (8002aa8 <Commends+0x294>)
 80029d8:	4931      	ldr	r1, [pc, #196]	@ (8002aa0 <Commends+0x28c>)
 80029da:	4832      	ldr	r0, [pc, #200]	@ (8002aa4 <Commends+0x290>)
 80029dc:	f001 f8fe 	bl	8003bdc <USART_send_response>
                return;
 80029e0:	e107      	b.n	8002bf2 <Commends+0x3de>
            }
            if (value_check(head, head_length, instruction, instruction_length, value, value_length)) {
 80029e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fe5f 	bl	80026b4 <value_check>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00d      	beq.n	8002a18 <Commends+0x204>
                *attribute = handleNumber(value, value_length);
 80029fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a00:	f7ff fddc 	bl	80025bc <handleNumber>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	801a      	strh	r2, [r3, #0]
                USART_send_response(STM, frame_data.sender_frame, "ACCEPTSET");
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac4 <Commends+0x2b0>)
 8002a0e:	4924      	ldr	r1, [pc, #144]	@ (8002aa0 <Commends+0x28c>)
 8002a10:	4824      	ldr	r0, [pc, #144]	@ (8002aa4 <Commends+0x290>)
 8002a12:	f001 f8e3 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002a16:	e0ec      	b.n	8002bf2 <Commends+0x3de>
            } else {
                USART_send_response(STM, frame_data.sender_frame, "WRVALUE");
 8002a18:	4a26      	ldr	r2, [pc, #152]	@ (8002ab4 <Commends+0x2a0>)
 8002a1a:	4921      	ldr	r1, [pc, #132]	@ (8002aa0 <Commends+0x28c>)
 8002a1c:	4821      	ldr	r0, [pc, #132]	@ (8002aa4 <Commends+0x290>)
 8002a1e:	f001 f8dd 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002a22:	e0e6      	b.n	8002bf2 <Commends+0x3de>
            }
        }
        // Obsługa instrukcji CLEAR
        else if (custom_strncmp(instruction, "CLEAR", instruction_length, 5) == 0) {
 8002a24:	2305      	movs	r3, #5
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4927      	ldr	r1, [pc, #156]	@ (8002ac8 <Commends+0x2b4>)
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fe0d 	bl	800264a <custom_strncmp>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d14c      	bne.n	8002ad0 <Commends+0x2bc>
            if (g_atribute.minigame) {
 8002a36:	4b16      	ldr	r3, [pc, #88]	@ (8002a90 <Commends+0x27c>)
 8002a38:	7b1b      	ldrb	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <Commends+0x236>
                USART_send_response(STM, frame_data.sender_frame, "WRWAITGAME");
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <Commends+0x294>)
 8002a40:	4917      	ldr	r1, [pc, #92]	@ (8002aa0 <Commends+0x28c>)
 8002a42:	4818      	ldr	r0, [pc, #96]	@ (8002aa4 <Commends+0x290>)
 8002a44:	f001 f8ca 	bl	8003bdc <USART_send_response>
                return;
 8002a48:	e0d3      	b.n	8002bf2 <Commends+0x3de>
            }
            if (value_check(head, head_length, instruction, instruction_length, value, value_length)) {
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fe2b 	bl	80026b4 <value_check>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <Commends+0x262>
                *attribute = 0;  // Resetowanie wartości do 0
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]
                USART_send_response(STM, frame_data.sender_frame, "ACCEPTRESAT");
 8002a6a:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <Commends+0x2b8>)
 8002a6c:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <Commends+0x28c>)
 8002a6e:	480d      	ldr	r0, [pc, #52]	@ (8002aa4 <Commends+0x290>)
 8002a70:	f001 f8b4 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002a74:	e0bd      	b.n	8002bf2 <Commends+0x3de>
            } else {
                USART_send_response(STM, frame_data.sender_frame, "WRVALUE");
 8002a76:	4a0f      	ldr	r2, [pc, #60]	@ (8002ab4 <Commends+0x2a0>)
 8002a78:	4909      	ldr	r1, [pc, #36]	@ (8002aa0 <Commends+0x28c>)
 8002a7a:	480a      	ldr	r0, [pc, #40]	@ (8002aa4 <Commends+0x290>)
 8002a7c:	f001 f8ae 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002a80:	e0b7      	b.n	8002bf2 <Commends+0x3de>
 8002a82:	bf00      	nop
 8002a84:	0800d7c0 	.word	0x0800d7c0
 8002a88:	0800d7c8 	.word	0x0800d7c8
 8002a8c:	0800d7d0 	.word	0x0800d7d0
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004
 8002a98:	20000002 	.word	0x20000002
 8002a9c:	0800d7b0 	.word	0x0800d7b0
 8002aa0:	20000364 	.word	0x20000364
 8002aa4:	0800d7ac 	.word	0x0800d7ac
 8002aa8:	0800d808 	.word	0x0800d808
 8002aac:	0800d7d4 	.word	0x0800d7d4
 8002ab0:	0800d814 	.word	0x0800d814
 8002ab4:	0800d820 	.word	0x0800d820
 8002ab8:	0800d7d8 	.word	0x0800d7d8
 8002abc:	0800d828 	.word	0x0800d828
 8002ac0:	0800d7e4 	.word	0x0800d7e4
 8002ac4:	0800d834 	.word	0x0800d834
 8002ac8:	0800d7e8 	.word	0x0800d7e8
 8002acc:	0800d840 	.word	0x0800d840
            }
        }
        // Nieznana instrukcja
        else {
            USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002ad0:	4a49      	ldr	r2, [pc, #292]	@ (8002bf8 <Commends+0x3e4>)
 8002ad2:	494a      	ldr	r1, [pc, #296]	@ (8002bfc <Commends+0x3e8>)
 8002ad4:	484a      	ldr	r0, [pc, #296]	@ (8002c00 <Commends+0x3ec>)
 8002ad6:	f001 f881 	bl	8003bdc <USART_send_response>
        if (custom_strncmp(instruction, "ADD", instruction_length, 3) == 0) {
 8002ada:	e08a      	b.n	8002bf2 <Commends+0x3de>
        }
    }
    // Obsługa MENU
    else if (custom_strncmp(head, "MENU", head_length, 4) == 0) {
 8002adc:	2304      	movs	r3, #4
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	4948      	ldr	r1, [pc, #288]	@ (8002c04 <Commends+0x3f0>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff fdb1 	bl	800264a <custom_strncmp>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d139      	bne.n	8002b62 <Commends+0x34e>
        if (g_atribute.minigame) {
 8002aee:	4b46      	ldr	r3, [pc, #280]	@ (8002c08 <Commends+0x3f4>)
 8002af0:	7b1b      	ldrb	r3, [r3, #12]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <Commends+0x2ee>
            USART_send_response(STM, frame_data.sender_frame, "WRMENU");
 8002af6:	4a45      	ldr	r2, [pc, #276]	@ (8002c0c <Commends+0x3f8>)
 8002af8:	4940      	ldr	r1, [pc, #256]	@ (8002bfc <Commends+0x3e8>)
 8002afa:	4841      	ldr	r0, [pc, #260]	@ (8002c00 <Commends+0x3ec>)
 8002afc:	f001 f86e 	bl	8003bdc <USART_send_response>
            return;
 8002b00:	e077      	b.n	8002bf2 <Commends+0x3de>
        }

        // Obsługa instrukcji CHANGE
        if (custom_strncmp(instruction, "CHANGE", instruction_length, 6) == 0) {
 8002b02:	2306      	movs	r3, #6
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	4942      	ldr	r1, [pc, #264]	@ (8002c10 <Commends+0x3fc>)
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fd9e 	bl	800264a <custom_strncmp>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d120      	bne.n	8002b56 <Commends+0x342>
            if (value_check(head, head_length, instruction, instruction_length, value, value_length)) {
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff fdc6 	bl	80026b4 <value_check>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <Commends+0x336>
                g_atribute.menu = handleNumber(value, value_length);  // Zmiana stanu menu
 8002b2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b32:	f7ff fd43 	bl	80025bc <handleNumber>
 8002b36:	4603      	mov	r3, r0
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <Commends+0x3f4>)
 8002b3c:	80da      	strh	r2, [r3, #6]
                USART_send_response(STM, frame_data.sender_frame, "ACCEPTMENU");
 8002b3e:	4a35      	ldr	r2, [pc, #212]	@ (8002c14 <Commends+0x400>)
 8002b40:	492e      	ldr	r1, [pc, #184]	@ (8002bfc <Commends+0x3e8>)
 8002b42:	482f      	ldr	r0, [pc, #188]	@ (8002c00 <Commends+0x3ec>)
 8002b44:	f001 f84a 	bl	8003bdc <USART_send_response>
 8002b48:	e053      	b.n	8002bf2 <Commends+0x3de>
            } else {
                USART_send_response(STM, frame_data.sender_frame, "WRVALUE");
 8002b4a:	4a33      	ldr	r2, [pc, #204]	@ (8002c18 <Commends+0x404>)
 8002b4c:	492b      	ldr	r1, [pc, #172]	@ (8002bfc <Commends+0x3e8>)
 8002b4e:	482c      	ldr	r0, [pc, #176]	@ (8002c00 <Commends+0x3ec>)
 8002b50:	f001 f844 	bl	8003bdc <USART_send_response>
 8002b54:	e04d      	b.n	8002bf2 <Commends+0x3de>
            }
        }
        // Nieznana instrukcja
        else {
            USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002b56:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <Commends+0x3e4>)
 8002b58:	4928      	ldr	r1, [pc, #160]	@ (8002bfc <Commends+0x3e8>)
 8002b5a:	4829      	ldr	r0, [pc, #164]	@ (8002c00 <Commends+0x3ec>)
 8002b5c:	f001 f83e 	bl	8003bdc <USART_send_response>
 8002b60:	e047      	b.n	8002bf2 <Commends+0x3de>
        }
    }
    // Obsługa WAKEUP
    else if (custom_strncmp(head, "WAKEUP", head_length, 6) == 0) {
 8002b62:	2306      	movs	r3, #6
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	492d      	ldr	r1, [pc, #180]	@ (8002c1c <Commends+0x408>)
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fd6e 	bl	800264a <custom_strncmp>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d139      	bne.n	8002be8 <Commends+0x3d4>
        if (g_atribute.minigame) {
 8002b74:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <Commends+0x3f4>)
 8002b76:	7b1b      	ldrb	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <Commends+0x374>
            USART_send_response(STM, frame_data.sender_frame, "WRWAITGAME");
 8002b7c:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <Commends+0x40c>)
 8002b7e:	491f      	ldr	r1, [pc, #124]	@ (8002bfc <Commends+0x3e8>)
 8002b80:	481f      	ldr	r0, [pc, #124]	@ (8002c00 <Commends+0x3ec>)
 8002b82:	f001 f82b 	bl	8003bdc <USART_send_response>
            return;
 8002b86:	e034      	b.n	8002bf2 <Commends+0x3de>
        }

        // Obsługa instrukcji MIN
        if (custom_strncmp(instruction, "MIN", instruction_length, 3) == 0) {
 8002b88:	2303      	movs	r3, #3
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4925      	ldr	r1, [pc, #148]	@ (8002c24 <Commends+0x410>)
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fd5b 	bl	800264a <custom_strncmp>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d120      	bne.n	8002bdc <Commends+0x3c8>
            if (value_check(head, head_length, instruction, instruction_length, value, value_length)) {
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff fd83 	bl	80026b4 <value_check>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <Commends+0x3bc>
                g_atribute.wakeup_sensitivity = handleNumber(value, value_length);  // Ustawienie czułości wybudzania
 8002bb4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002bb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bb8:	f7ff fd00 	bl	80025bc <handleNumber>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <Commends+0x3f4>)
 8002bc2:	811a      	strh	r2, [r3, #8]
                USART_send_response(STM, frame_data.sender_frame, "ACCEPTSET");
 8002bc4:	4a18      	ldr	r2, [pc, #96]	@ (8002c28 <Commends+0x414>)
 8002bc6:	490d      	ldr	r1, [pc, #52]	@ (8002bfc <Commends+0x3e8>)
 8002bc8:	480d      	ldr	r0, [pc, #52]	@ (8002c00 <Commends+0x3ec>)
 8002bca:	f001 f807 	bl	8003bdc <USART_send_response>
 8002bce:	e010      	b.n	8002bf2 <Commends+0x3de>
            } else {
                USART_send_response(STM, frame_data.sender_frame, "WRVALUE");
 8002bd0:	4a11      	ldr	r2, [pc, #68]	@ (8002c18 <Commends+0x404>)
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <Commends+0x3e8>)
 8002bd4:	480a      	ldr	r0, [pc, #40]	@ (8002c00 <Commends+0x3ec>)
 8002bd6:	f001 f801 	bl	8003bdc <USART_send_response>
 8002bda:	e00a      	b.n	8002bf2 <Commends+0x3de>
            }
        }
        // Nieznana instrukcja
        else {
            USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002bdc:	4a06      	ldr	r2, [pc, #24]	@ (8002bf8 <Commends+0x3e4>)
 8002bde:	4907      	ldr	r1, [pc, #28]	@ (8002bfc <Commends+0x3e8>)
 8002be0:	4807      	ldr	r0, [pc, #28]	@ (8002c00 <Commends+0x3ec>)
 8002be2:	f000 fffb 	bl	8003bdc <USART_send_response>
 8002be6:	e004      	b.n	8002bf2 <Commends+0x3de>
        }
    }
    // Nieznany head
    else {
        USART_send_response(STM, frame_data.sender_frame, "WRCMD");
 8002be8:	4a03      	ldr	r2, [pc, #12]	@ (8002bf8 <Commends+0x3e4>)
 8002bea:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <Commends+0x3e8>)
 8002bec:	4804      	ldr	r0, [pc, #16]	@ (8002c00 <Commends+0x3ec>)
 8002bee:	f000 fff5 	bl	8003bdc <USART_send_response>
    }
}
 8002bf2:	3724      	adds	r7, #36	@ 0x24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	0800d7b0 	.word	0x0800d7b0
 8002bfc:	20000364 	.word	0x20000364
 8002c00:	0800d7ac 	.word	0x0800d7ac
 8002c04:	0800d7f0 	.word	0x0800d7f0
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	0800d84c 	.word	0x0800d84c
 8002c10:	0800d7f8 	.word	0x0800d7f8
 8002c14:	0800d854 	.word	0x0800d854
 8002c18:	0800d820 	.word	0x0800d820
 8002c1c:	0800d800 	.word	0x0800d800
 8002c20:	0800d808 	.word	0x0800d808
 8002c24:	0800d860 	.word	0x0800d860
 8002c28:	0800d834 	.word	0x0800d834

08002c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c30:	f001 f95a 	bl	8003ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c34:	f000 f82c 	bl	8002c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c38:	f000 f920 	bl	8002e7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c3c:	f000 f8f4 	bl	8002e28 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c40:	f000 f88e 	bl	8002d60 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c44:	f000 f8ba 	bl	8002dbc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Inicjalizacja odbioru danych UART w trybie przerwań
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1);
 8002c48:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <main+0x58>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4a0d      	ldr	r2, [pc, #52]	@ (8002c88 <main+0x5c>)
 8002c52:	4413      	add	r3, r2
 8002c54:	2201      	movs	r2, #1
 8002c56:	4619      	mov	r1, r3
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <main+0x60>)
 8002c5a:	f005 fb01 	bl	8008260 <HAL_UART_Receive_IT>

  // Inicjalizacja czujnika BH1750 (czujnik światła)
  BH1750_Init();
 8002c5e:	f7fe f9c9 	bl	8000ff4 <BH1750_Init>

  // Rozpoczęcie pomiaru przez czujnik BH1750
  BH1750_StartMeasurement();
 8002c62:	f7fe f9df 	bl	8001024 <BH1750_StartMeasurement>

  // Inicjalizacja wyświetlacza OLED
  OLED_Init();
 8002c66:	f000 fa0d 	bl	8003084 <OLED_Init>

  // Uruchomienie i aktualizacja pierwszego menu
  Start_menu1();
 8002c6a:	f7fe fbb5 	bl	80013d8 <Start_menu1>
  Update_menu1();
 8002c6e:	f7fe fb43 	bl	80012f8 <Update_menu1>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  Button_Functionality(); // Obsług głównych przycisków
 8002c72:	f7fe fa77 	bl	8001164 <Button_Functionality>
	  Menu_change_and_update(); // Zmiana menu i jego aktualizacja
 8002c76:	f7ff f8a1 	bl	8001dbc <Menu_change_and_update>
	  FrameRd(); // Odczyt ramek danych
 8002c7a:	f7ff f9d3 	bl	8002024 <FrameRd>
	  Button_Functionality(); // Obsług głównych przycisków
 8002c7e:	bf00      	nop
 8002c80:	e7f7      	b.n	8002c72 <main+0x46>
 8002c82:	bf00      	nop
 8002c84:	20000ad8 	.word	0x20000ad8
 8002c88:	20000880 	.word	0x20000880
 8002c8c:	2000031c 	.word	0x2000031c

08002c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b094      	sub	sp, #80	@ 0x50
 8002c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c96:	f107 0320 	add.w	r3, r7, #32
 8002c9a:	2230      	movs	r2, #48	@ 0x30
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f007 f989 	bl	8009fb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	4b27      	ldr	r3, [pc, #156]	@ (8002d58 <SystemClock_Config+0xc8>)
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	4a26      	ldr	r2, [pc, #152]	@ (8002d58 <SystemClock_Config+0xc8>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc4:	4b24      	ldr	r3, [pc, #144]	@ (8002d58 <SystemClock_Config+0xc8>)
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	4b21      	ldr	r3, [pc, #132]	@ (8002d5c <SystemClock_Config+0xcc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a20      	ldr	r2, [pc, #128]	@ (8002d5c <SystemClock_Config+0xcc>)
 8002cda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <SystemClock_Config+0xcc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cec:	2302      	movs	r3, #2
 8002cee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d00:	2308      	movs	r3, #8
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002d04:	2354      	movs	r3, #84	@ 0x54
 8002d06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d10:	f107 0320 	add.w	r3, r7, #32
 8002d14:	4618      	mov	r0, r3
 8002d16:	f004 f9c9 	bl	80070ac <HAL_RCC_OscConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d20:	f000 f94e 	bl	8002fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d24:	230f      	movs	r3, #15
 8002d26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fc2b 	bl	800759c <HAL_RCC_ClockConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d4c:	f000 f938 	bl	8002fc0 <Error_Handler>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3750      	adds	r7, #80	@ 0x50
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000

08002d60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d64:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d66:	4a13      	ldr	r2, [pc, #76]	@ (8002db4 <MX_I2C1_Init+0x54>)
 8002d68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d6c:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <MX_I2C1_Init+0x58>)
 8002d6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d84:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d90:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d96:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d9c:	4804      	ldr	r0, [pc, #16]	@ (8002db0 <MX_I2C1_Init+0x50>)
 8002d9e:	f001 fca1 	bl	80046e4 <HAL_I2C_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002da8:	f000 f90a 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000270 	.word	0x20000270
 8002db4:	40005400 	.word	0x40005400
 8002db8:	000186a0 	.word	0x000186a0

08002dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dc0:	4b17      	ldr	r3, [pc, #92]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002dc2:	4a18      	ldr	r2, [pc, #96]	@ (8002e24 <MX_SPI1_Init+0x68>)
 8002dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002dc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dce:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dda:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002de0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002df0:	2218      	movs	r2, #24
 8002df2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002df4:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e00:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002e08:	220a      	movs	r2, #10
 8002e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e0c:	4804      	ldr	r0, [pc, #16]	@ (8002e20 <MX_SPI1_Init+0x64>)
 8002e0e:	f004 fde5 	bl	80079dc <HAL_SPI_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e18:	f000 f8d2 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200002c4 	.word	0x200002c4
 8002e24:	40013000 	.word	0x40013000

08002e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e2e:	4a12      	ldr	r2, [pc, #72]	@ (8002e78 <MX_USART2_UART_Init+0x50>)
 8002e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e46:	4b0b      	ldr	r3, [pc, #44]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e4c:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e4e:	220c      	movs	r2, #12
 8002e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e5e:	4805      	ldr	r0, [pc, #20]	@ (8002e74 <MX_USART2_UART_Init+0x4c>)
 8002e60:	f005 f978 	bl	8008154 <HAL_UART_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e6a:	f000 f8a9 	bl	8002fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000031c 	.word	0x2000031c
 8002e78:	40004400 	.word	0x40004400

08002e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	@ 0x28
 8002e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b46      	ldr	r3, [pc, #280]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a45      	ldr	r2, [pc, #276]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b43      	ldr	r3, [pc, #268]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	4b38      	ldr	r3, [pc, #224]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4a37      	ldr	r2, [pc, #220]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eda:	4b35      	ldr	r3, [pc, #212]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	4b31      	ldr	r3, [pc, #196]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	4a30      	ldr	r2, [pc, #192]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8002fb0 <MX_GPIO_Init+0x134>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	607b      	str	r3, [r7, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_SET);
 8002f02:	2201      	movs	r2, #1
 8002f04:	2140      	movs	r1, #64	@ 0x40
 8002f06:	482b      	ldr	r0, [pc, #172]	@ (8002fb4 <MX_GPIO_Init+0x138>)
 8002f08:	f001 fbd2 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2140      	movs	r1, #64	@ 0x40
 8002f10:	4829      	ldr	r0, [pc, #164]	@ (8002fb8 <MX_GPIO_Init+0x13c>)
 8002f12:	f001 fbcd 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8002f16:	2201      	movs	r2, #1
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	4827      	ldr	r0, [pc, #156]	@ (8002fb8 <MX_GPIO_Init+0x13c>)
 8002f1c:	f001 fbc8 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4619      	mov	r1, r3
 8002f36:	4821      	ldr	r0, [pc, #132]	@ (8002fbc <MX_GPIO_Init+0x140>)
 8002f38:	f001 fa1e 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenBt_Pin RedBt_Pin YellowBt_Pin BlueBt_Pin */
  GPIO_InitStruct.Pin = GreenBt_Pin|RedBt_Pin|YellowBt_Pin|BlueBt_Pin;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	481b      	ldr	r0, [pc, #108]	@ (8002fbc <MX_GPIO_Init+0x140>)
 8002f50:	f001 fa12 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_RES_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin;
 8002f54:	2340      	movs	r3, #64	@ 0x40
 8002f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f60:	2302      	movs	r3, #2
 8002f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RES_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4812      	ldr	r0, [pc, #72]	@ (8002fb4 <MX_GPIO_Init+0x138>)
 8002f6c:	f001 fa04 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8002f70:	2340      	movs	r3, #64	@ 0x40
 8002f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f74:	2301      	movs	r3, #1
 8002f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8002f80:	f107 0314 	add.w	r3, r7, #20
 8002f84:	4619      	mov	r1, r3
 8002f86:	480c      	ldr	r0, [pc, #48]	@ (8002fb8 <MX_GPIO_Init+0x13c>)
 8002f88:	f001 f9f6 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <MX_GPIO_Init+0x13c>)
 8002fa4:	f001 f9e8 	bl	8004378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	@ 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020800 	.word	0x40020800

08002fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc4:	b672      	cpsid	i
}
 8002fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <Error_Handler+0x8>

08002fcc <OLED_Reset>:

// Bufor wyświetlacza - przechowuje aktualny stan pikseli
static uint8_t displayBuffer[OLED_PAGES][OLED_WIDTH] = {0};

// Resetuje wyświetlacz poprzez manipulację pinem RES
void OLED_Reset(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2140      	movs	r1, #64	@ 0x40
 8002fd4:	4806      	ldr	r0, [pc, #24]	@ (8002ff0 <OLED_Reset+0x24>)
 8002fd6:	f001 fb6b 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8002fda:	200a      	movs	r0, #10
 8002fdc:	f000 fff6 	bl	8003fcc <HAL_Delay>
    HAL_GPIO_WritePin(OLED_RES_GPIO_Port, OLED_RES_Pin, GPIO_PIN_SET);
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2140      	movs	r1, #64	@ 0x40
 8002fe4:	4802      	ldr	r0, [pc, #8]	@ (8002ff0 <OLED_Reset+0x24>)
 8002fe6:	f001 fb63 	bl	80046b0 <HAL_GPIO_WritePin>
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40020000 	.word	0x40020000

08002ff4 <OLED_WriteCommand>:

// Wysyła komendę do wyświetlacza przez SPI
void OLED_WriteCommand(uint8_t command) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);  // Tryb komend
 8002ffe:	2200      	movs	r2, #0
 8003000:	2140      	movs	r1, #64	@ 0x40
 8003002:	480c      	ldr	r0, [pc, #48]	@ (8003034 <OLED_WriteCommand+0x40>)
 8003004:	f001 fb54 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);  // Wybór OLED
 8003008:	2200      	movs	r2, #0
 800300a:	2180      	movs	r1, #128	@ 0x80
 800300c:	4809      	ldr	r0, [pc, #36]	@ (8003034 <OLED_WriteCommand+0x40>)
 800300e:	f001 fb4f 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8003012:	1df9      	adds	r1, r7, #7
 8003014:	f04f 33ff 	mov.w	r3, #4294967295
 8003018:	2201      	movs	r2, #1
 800301a:	4807      	ldr	r0, [pc, #28]	@ (8003038 <OLED_WriteCommand+0x44>)
 800301c:	f004 fd67 	bl	8007aee <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);    // Deselect OLED
 8003020:	2201      	movs	r2, #1
 8003022:	2180      	movs	r1, #128	@ 0x80
 8003024:	4803      	ldr	r0, [pc, #12]	@ (8003034 <OLED_WriteCommand+0x40>)
 8003026:	f001 fb43 	bl	80046b0 <HAL_GPIO_WritePin>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40020400 	.word	0x40020400
 8003038:	200002c4 	.word	0x200002c4

0800303c <OLED_WriteData>:

// Wysyła dane do wyświetlacza przez SPI
void OLED_WriteData(uint8_t data) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_SET);    // Tryb danych
 8003046:	2201      	movs	r2, #1
 8003048:	2140      	movs	r1, #64	@ 0x40
 800304a:	480c      	ldr	r0, [pc, #48]	@ (800307c <OLED_WriteData+0x40>)
 800304c:	f001 fb30 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);  // Wybór OLED
 8003050:	2200      	movs	r2, #0
 8003052:	2180      	movs	r1, #128	@ 0x80
 8003054:	4809      	ldr	r0, [pc, #36]	@ (800307c <OLED_WriteData+0x40>)
 8003056:	f001 fb2b 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800305a:	1df9      	adds	r1, r7, #7
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	2201      	movs	r2, #1
 8003062:	4807      	ldr	r0, [pc, #28]	@ (8003080 <OLED_WriteData+0x44>)
 8003064:	f004 fd43 	bl	8007aee <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);    // Deselect OLED
 8003068:	2201      	movs	r2, #1
 800306a:	2180      	movs	r1, #128	@ 0x80
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <OLED_WriteData+0x40>)
 800306e:	f001 fb1f 	bl	80046b0 <HAL_GPIO_WritePin>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40020400 	.word	0x40020400
 8003080:	200002c4 	.word	0x200002c4

08003084 <OLED_Init>:

// Inicjalizacja wyświetlacza - konfiguracja wszystkich niezbędnych parametrów
void OLED_Init(void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
    OLED_Reset();
 8003088:	f7ff ffa0 	bl	8002fcc <OLED_Reset>
    HAL_Delay(10);
 800308c:	200a      	movs	r0, #10
 800308e:	f000 ff9d 	bl	8003fcc <HAL_Delay>

    OLED_WriteCommand(0xAE); // Wyłączenie wyświetlacza
 8003092:	20ae      	movs	r0, #174	@ 0xae
 8003094:	f7ff ffae 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xD5); // Ustawienie zegara wyświetlacza
 8003098:	20d5      	movs	r0, #213	@ 0xd5
 800309a:	f7ff ffab 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0x80); // Zalecane wartości
 800309e:	2080      	movs	r0, #128	@ 0x80
 80030a0:	f7ff ffa8 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xA8); // Współczynnik multipleksowania
 80030a4:	20a8      	movs	r0, #168	@ 0xa8
 80030a6:	f7ff ffa5 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0x3F); // 1/64 duty cycle
 80030aa:	203f      	movs	r0, #63	@ 0x3f
 80030ac:	f7ff ffa2 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xD3); // Offset wyświetlacza
 80030b0:	20d3      	movs	r0, #211	@ 0xd3
 80030b2:	f7ff ff9f 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0x00); // Bez offsetu
 80030b6:	2000      	movs	r0, #0
 80030b8:	f7ff ff9c 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0x40); // Linia startowa = 0
 80030bc:	2040      	movs	r0, #64	@ 0x40
 80030be:	f7ff ff99 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0x8D); // Pompa ładowania
 80030c2:	208d      	movs	r0, #141	@ 0x8d
 80030c4:	f7ff ff96 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0x14); // Włączenie pompy ładowania
 80030c8:	2014      	movs	r0, #20
 80030ca:	f7ff ff93 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0x20); // Tryb pamięci
 80030ce:	2020      	movs	r0, #32
 80030d0:	f7ff ff90 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0x00); // Adresowanie poziome
 80030d4:	2000      	movs	r0, #0
 80030d6:	f7ff ff8d 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xA0); // Mapowanie segmentów (0 do 127)
 80030da:	20a0      	movs	r0, #160	@ 0xa0
 80030dc:	f7ff ff8a 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0xC0); // Kierunek skanowania COM
 80030e0:	20c0      	movs	r0, #192	@ 0xc0
 80030e2:	f7ff ff87 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xDA); // Piny COM
 80030e6:	20da      	movs	r0, #218	@ 0xda
 80030e8:	f7ff ff84 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0x12); // Konfiguracja pinów COM
 80030ec:	2012      	movs	r0, #18
 80030ee:	f7ff ff81 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0x81); // Kontrast
 80030f2:	2081      	movs	r0, #129	@ 0x81
 80030f4:	f7ff ff7e 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0xFF); // Maksymalny kontrast
 80030f8:	20ff      	movs	r0, #255	@ 0xff
 80030fa:	f7ff ff7b 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xA4); // Wyświetlanie z RAM
 80030fe:	20a4      	movs	r0, #164	@ 0xa4
 8003100:	f7ff ff78 	bl	8002ff4 <OLED_WriteCommand>
    OLED_WriteCommand(0xA6); // Normalne wyświetlanie (nie odwrócone)
 8003104:	20a6      	movs	r0, #166	@ 0xa6
 8003106:	f7ff ff75 	bl	8002ff4 <OLED_WriteCommand>

    OLED_WriteCommand(0xAF); // Włączenie wyświetlacza
 800310a:	20af      	movs	r0, #175	@ 0xaf
 800310c:	f7ff ff72 	bl	8002ff4 <OLED_WriteCommand>
}
 8003110:	bf00      	nop
 8003112:	bd80      	pop	{r7, pc}

08003114 <OLED_Fill>:
    OLED_WriteCommand(0x10 | ((x >> 4) & 0x0F));
    OLED_WriteData(displayBuffer[page][x]);
}

// Wypełnia cały wyświetlacz jednym kolorem
void OLED_Fill(uint8_t color) {
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
    uint8_t fillValue = (color == WHITE) ? 0xFF : 0x00;
 800311e:	79fb      	ldrb	r3, [r7, #7]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <OLED_Fill+0x14>
 8003124:	23ff      	movs	r3, #255	@ 0xff
 8003126:	e000      	b.n	800312a <OLED_Fill+0x16>
 8003128:	2300      	movs	r3, #0
 800312a:	737b      	strb	r3, [r7, #13]

    for (uint8_t page = 0; page < OLED_PAGES; page++) {
 800312c:	2300      	movs	r3, #0
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	e025      	b.n	800317e <OLED_Fill+0x6a>
        OLED_WriteCommand(0xB0 | page);
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ff5a 	bl	8002ff4 <OLED_WriteCommand>
        OLED_WriteCommand(0x00);
 8003140:	2000      	movs	r0, #0
 8003142:	f7ff ff57 	bl	8002ff4 <OLED_WriteCommand>
        OLED_WriteCommand(0x10);
 8003146:	2010      	movs	r0, #16
 8003148:	f7ff ff54 	bl	8002ff4 <OLED_WriteCommand>

        for (uint8_t x = 0; x < OLED_WIDTH; x++) {
 800314c:	2300      	movs	r3, #0
 800314e:	73bb      	strb	r3, [r7, #14]
 8003150:	e00e      	b.n	8003170 <OLED_Fill+0x5c>
            displayBuffer[page][x] = fillValue;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	490e      	ldr	r1, [pc, #56]	@ (8003190 <OLED_Fill+0x7c>)
 8003158:	01d2      	lsls	r2, r2, #7
 800315a:	440a      	add	r2, r1
 800315c:	4413      	add	r3, r2
 800315e:	7b7a      	ldrb	r2, [r7, #13]
 8003160:	701a      	strb	r2, [r3, #0]
            OLED_WriteData(fillValue);
 8003162:	7b7b      	ldrb	r3, [r7, #13]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff69 	bl	800303c <OLED_WriteData>
        for (uint8_t x = 0; x < OLED_WIDTH; x++) {
 800316a:	7bbb      	ldrb	r3, [r7, #14]
 800316c:	3301      	adds	r3, #1
 800316e:	73bb      	strb	r3, [r7, #14]
 8003170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003174:	2b00      	cmp	r3, #0
 8003176:	daec      	bge.n	8003152 <OLED_Fill+0x3e>
    for (uint8_t page = 0; page < OLED_PAGES; page++) {
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	3301      	adds	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b07      	cmp	r3, #7
 8003182:	d9d6      	bls.n	8003132 <OLED_Fill+0x1e>
        }
    }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000047c 	.word	0x2000047c

08003194 <OLED_Clear>:

// Czyści wyświetlacz (wypełnia czarnym kolorem)
void OLED_Clear(void) {
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
    OLED_Fill(BLACK);
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff ffbb 	bl	8003114 <OLED_Fill>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <OLED_PrintSmallImageFromCoords>:
    }
}

// Wyświetla mały obraz od zadanych współrzędnych (zoptymalizowana wersja)
void OLED_PrintSmallImageFromCoords(const uint8_t *imageData, uint8_t startX, uint8_t startY,
                              uint8_t imageWidth, uint8_t imageHeight) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	70fb      	strb	r3, [r7, #3]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70bb      	strb	r3, [r7, #2]
 80031ba:	4613      	mov	r3, r2
 80031bc:	707b      	strb	r3, [r7, #1]
    for (uint8_t y = 0; y < imageHeight; y++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	75fb      	strb	r3, [r7, #23]
 80031c2:	e09b      	b.n	80032fc <OLED_PrintSmallImageFromCoords+0x158>
        uint8_t displayY = startY + y;
 80031c4:	78ba      	ldrb	r2, [r7, #2]
 80031c6:	7dfb      	ldrb	r3, [r7, #23]
 80031c8:	4413      	add	r3, r2
 80031ca:	757b      	strb	r3, [r7, #21]
        if (displayY >= OLED_HEIGHT) continue;
 80031cc:	7d7b      	ldrb	r3, [r7, #21]
 80031ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80031d0:	f200 8090 	bhi.w	80032f4 <OLED_PrintSmallImageFromCoords+0x150>

        uint8_t page = displayY / 8;
 80031d4:	7d7b      	ldrb	r3, [r7, #21]
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	753b      	strb	r3, [r7, #20]
        uint8_t bit = displayY % 8;
 80031da:	7d7b      	ldrb	r3, [r7, #21]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	74fb      	strb	r3, [r7, #19]

        for (uint8_t x = 0; x < imageWidth; x++) {
 80031e2:	2300      	movs	r3, #0
 80031e4:	75bb      	strb	r3, [r7, #22]
 80031e6:	e07f      	b.n	80032e8 <OLED_PrintSmallImageFromCoords+0x144>
            uint8_t displayX = startX + x;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	7dbb      	ldrb	r3, [r7, #22]
 80031ec:	4413      	add	r3, r2
 80031ee:	74bb      	strb	r3, [r7, #18]
            if (displayX >= OLED_WIDTH) continue;
 80031f0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	db73      	blt.n	80032e0 <OLED_PrintSmallImageFromCoords+0x13c>

            uint8_t imageByteIndex = (y / 8) * imageWidth + x;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
 80031fa:	08db      	lsrs	r3, r3, #3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	787a      	ldrb	r2, [r7, #1]
 8003200:	fb12 f303 	smulbb	r3, r2, r3
 8003204:	b2da      	uxtb	r2, r3
 8003206:	7dbb      	ldrb	r3, [r7, #22]
 8003208:	4413      	add	r3, r2
 800320a:	747b      	strb	r3, [r7, #17]
            uint8_t imageBitIndex = y % 8;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	743b      	strb	r3, [r7, #16]

            uint8_t pixelValue = (imageData[imageByteIndex] & (1 << imageBitIndex)) ? 1 : 0;
 8003214:	7c7b      	ldrb	r3, [r7, #17]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	7c3b      	ldrb	r3, [r7, #16]
 8003220:	fa42 f303 	asr.w	r3, r2, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]

            if (pixelValue) {
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <OLED_PrintSmallImageFromCoords+0xc0>
                displayBuffer[page][displayX] |= (1 << bit);
 8003232:	7d3a      	ldrb	r2, [r7, #20]
 8003234:	7cbb      	ldrb	r3, [r7, #18]
 8003236:	4937      	ldr	r1, [pc, #220]	@ (8003314 <OLED_PrintSmallImageFromCoords+0x170>)
 8003238:	01d2      	lsls	r2, r2, #7
 800323a:	440a      	add	r2, r1
 800323c:	4413      	add	r3, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b25a      	sxtb	r2, r3
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2101      	movs	r1, #1
 8003246:	fa01 f303 	lsl.w	r3, r1, r3
 800324a:	b25b      	sxtb	r3, r3
 800324c:	4313      	orrs	r3, r2
 800324e:	b259      	sxtb	r1, r3
 8003250:	7d3a      	ldrb	r2, [r7, #20]
 8003252:	7cbb      	ldrb	r3, [r7, #18]
 8003254:	b2c8      	uxtb	r0, r1
 8003256:	492f      	ldr	r1, [pc, #188]	@ (8003314 <OLED_PrintSmallImageFromCoords+0x170>)
 8003258:	01d2      	lsls	r2, r2, #7
 800325a:	440a      	add	r2, r1
 800325c:	4413      	add	r3, r2
 800325e:	4602      	mov	r2, r0
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	e019      	b.n	8003298 <OLED_PrintSmallImageFromCoords+0xf4>
            } else {
                displayBuffer[page][displayX] &= ~(1 << bit);
 8003264:	7d3a      	ldrb	r2, [r7, #20]
 8003266:	7cbb      	ldrb	r3, [r7, #18]
 8003268:	492a      	ldr	r1, [pc, #168]	@ (8003314 <OLED_PrintSmallImageFromCoords+0x170>)
 800326a:	01d2      	lsls	r2, r2, #7
 800326c:	440a      	add	r2, r1
 800326e:	4413      	add	r3, r2
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b25a      	sxtb	r2, r3
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	2101      	movs	r1, #1
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	b25b      	sxtb	r3, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	b25b      	sxtb	r3, r3
 8003282:	4013      	ands	r3, r2
 8003284:	b259      	sxtb	r1, r3
 8003286:	7d3a      	ldrb	r2, [r7, #20]
 8003288:	7cbb      	ldrb	r3, [r7, #18]
 800328a:	b2c8      	uxtb	r0, r1
 800328c:	4921      	ldr	r1, [pc, #132]	@ (8003314 <OLED_PrintSmallImageFromCoords+0x170>)
 800328e:	01d2      	lsls	r2, r2, #7
 8003290:	440a      	add	r2, r1
 8003292:	4413      	add	r3, r2
 8003294:	4602      	mov	r2, r0
 8003296:	701a      	strb	r2, [r3, #0]
            }

            OLED_WriteCommand(0xB0 | page);
 8003298:	7d3b      	ldrb	r3, [r7, #20]
 800329a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fea7 	bl	8002ff4 <OLED_WriteCommand>
            OLED_WriteCommand(0x00 | (displayX & 0x0F));
 80032a6:	7cbb      	ldrb	r3, [r7, #18]
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fea0 	bl	8002ff4 <OLED_WriteCommand>
            OLED_WriteCommand(0x10 | ((displayX >> 4) & 0x0F));
 80032b4:	7cbb      	ldrb	r3, [r7, #18]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	b25b      	sxtb	r3, r3
 80032bc:	f043 0310 	orr.w	r3, r3, #16
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fe95 	bl	8002ff4 <OLED_WriteCommand>
            OLED_WriteData(displayBuffer[page][displayX]);
 80032ca:	7d3a      	ldrb	r2, [r7, #20]
 80032cc:	7cbb      	ldrb	r3, [r7, #18]
 80032ce:	4911      	ldr	r1, [pc, #68]	@ (8003314 <OLED_PrintSmallImageFromCoords+0x170>)
 80032d0:	01d2      	lsls	r2, r2, #7
 80032d2:	440a      	add	r2, r1
 80032d4:	4413      	add	r3, r2
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff feaf 	bl	800303c <OLED_WriteData>
 80032de:	e000      	b.n	80032e2 <OLED_PrintSmallImageFromCoords+0x13e>
            if (displayX >= OLED_WIDTH) continue;
 80032e0:	bf00      	nop
        for (uint8_t x = 0; x < imageWidth; x++) {
 80032e2:	7dbb      	ldrb	r3, [r7, #22]
 80032e4:	3301      	adds	r3, #1
 80032e6:	75bb      	strb	r3, [r7, #22]
 80032e8:	7dba      	ldrb	r2, [r7, #22]
 80032ea:	787b      	ldrb	r3, [r7, #1]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f4ff af7b 	bcc.w	80031e8 <OLED_PrintSmallImageFromCoords+0x44>
 80032f2:	e000      	b.n	80032f6 <OLED_PrintSmallImageFromCoords+0x152>
        if (displayY >= OLED_HEIGHT) continue;
 80032f4:	bf00      	nop
    for (uint8_t y = 0; y < imageHeight; y++) {
 80032f6:	7dfb      	ldrb	r3, [r7, #23]
 80032f8:	3301      	adds	r3, #1
 80032fa:	75fb      	strb	r3, [r7, #23]
 80032fc:	7dfa      	ldrb	r2, [r7, #23]
 80032fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003302:	429a      	cmp	r2, r3
 8003304:	f4ff af5e 	bcc.w	80031c4 <OLED_PrintSmallImageFromCoords+0x20>
        }
    }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000047c 	.word	0x2000047c

08003318 <OLED_PrintImageFromCoords>:

// Wyświetla obraz od zadanych współrzędnych
void OLED_PrintImageFromCoords(const uint8_t *imageData, uint8_t startX, uint8_t startY,
                              uint8_t imageWidth, uint8_t imageHeight) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	70fb      	strb	r3, [r7, #3]
 800332a:	460b      	mov	r3, r1
 800332c:	70bb      	strb	r3, [r7, #2]
 800332e:	4613      	mov	r3, r2
 8003330:	707b      	strb	r3, [r7, #1]
    uint8_t imagePages = (imageHeight + 7) / 8;  // Liczba stron 8-pikselowych w obrazie
 8003332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003336:	3307      	adds	r3, #7
 8003338:	2b00      	cmp	r3, #0
 800333a:	da00      	bge.n	800333e <OLED_PrintImageFromCoords+0x26>
 800333c:	3307      	adds	r3, #7
 800333e:	10db      	asrs	r3, r3, #3
 8003340:	753b      	strb	r3, [r7, #20]

    for (uint8_t page = 0; page < imagePages; page++) {
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
 8003346:	e0a0      	b.n	800348a <OLED_PrintImageFromCoords+0x172>
        for (uint8_t x = 0; x < imageWidth; x++) {
 8003348:	2300      	movs	r3, #0
 800334a:	75bb      	strb	r3, [r7, #22]
 800334c:	e095      	b.n	800347a <OLED_PrintImageFromCoords+0x162>
            uint8_t imageByte = imageData[page * imageWidth + x];
 800334e:	7dfb      	ldrb	r3, [r7, #23]
 8003350:	787a      	ldrb	r2, [r7, #1]
 8003352:	fb03 f202 	mul.w	r2, r3, r2
 8003356:	7dbb      	ldrb	r3, [r7, #22]
 8003358:	4413      	add	r3, r2
 800335a:	461a      	mov	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	74fb      	strb	r3, [r7, #19]

            for (uint8_t bit = 0; bit < 8; bit++) {
 8003364:	2300      	movs	r3, #0
 8003366:	757b      	strb	r3, [r7, #21]
 8003368:	e080      	b.n	800346c <OLED_PrintImageFromCoords+0x154>
                uint8_t displayY = startY + (page * 8) + bit;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	b2da      	uxtb	r2, r3
 8003370:	78bb      	ldrb	r3, [r7, #2]
 8003372:	4413      	add	r3, r2
 8003374:	b2da      	uxtb	r2, r3
 8003376:	7d7b      	ldrb	r3, [r7, #21]
 8003378:	4413      	add	r3, r2
 800337a:	74bb      	strb	r3, [r7, #18]
                uint8_t displayX = startX + x;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	7dbb      	ldrb	r3, [r7, #22]
 8003380:	4413      	add	r3, r2
 8003382:	747b      	strb	r3, [r7, #17]

                if (displayY >= OLED_HEIGHT || displayX >= OLED_WIDTH) continue;
 8003384:	7cbb      	ldrb	r3, [r7, #18]
 8003386:	2b3f      	cmp	r3, #63	@ 0x3f
 8003388:	d86c      	bhi.n	8003464 <OLED_PrintImageFromCoords+0x14c>
 800338a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800338e:	2b00      	cmp	r3, #0
 8003390:	db68      	blt.n	8003464 <OLED_PrintImageFromCoords+0x14c>

                uint8_t pixelValue = (imageByte & (1 << bit)) ? 1 : 0;
 8003392:	7cfa      	ldrb	r2, [r7, #19]
 8003394:	7d7b      	ldrb	r3, [r7, #21]
 8003396:	fa42 f303 	asr.w	r3, r2, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	743b      	strb	r3, [r7, #16]

                uint8_t displayPage = displayY / 8;
 80033a2:	7cbb      	ldrb	r3, [r7, #18]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	73fb      	strb	r3, [r7, #15]
                uint8_t displayBit = displayY % 8;
 80033a8:	7cbb      	ldrb	r3, [r7, #18]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	73bb      	strb	r3, [r7, #14]

                if (pixelValue) {
 80033b0:	7c3b      	ldrb	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d018      	beq.n	80033e8 <OLED_PrintImageFromCoords+0xd0>
                    displayBuffer[displayPage][displayX] |= (1 << displayBit);
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	7c7b      	ldrb	r3, [r7, #17]
 80033ba:	4939      	ldr	r1, [pc, #228]	@ (80034a0 <OLED_PrintImageFromCoords+0x188>)
 80033bc:	01d2      	lsls	r2, r2, #7
 80033be:	440a      	add	r2, r1
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b25a      	sxtb	r2, r3
 80033c6:	7bbb      	ldrb	r3, [r7, #14]
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f303 	lsl.w	r3, r1, r3
 80033ce:	b25b      	sxtb	r3, r3
 80033d0:	4313      	orrs	r3, r2
 80033d2:	b259      	sxtb	r1, r3
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	7c7b      	ldrb	r3, [r7, #17]
 80033d8:	b2c8      	uxtb	r0, r1
 80033da:	4931      	ldr	r1, [pc, #196]	@ (80034a0 <OLED_PrintImageFromCoords+0x188>)
 80033dc:	01d2      	lsls	r2, r2, #7
 80033de:	440a      	add	r2, r1
 80033e0:	4413      	add	r3, r2
 80033e2:	4602      	mov	r2, r0
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	e019      	b.n	800341c <OLED_PrintImageFromCoords+0x104>
                } else {
                    displayBuffer[displayPage][displayX] &= ~(1 << displayBit);
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	7c7b      	ldrb	r3, [r7, #17]
 80033ec:	492c      	ldr	r1, [pc, #176]	@ (80034a0 <OLED_PrintImageFromCoords+0x188>)
 80033ee:	01d2      	lsls	r2, r2, #7
 80033f0:	440a      	add	r2, r1
 80033f2:	4413      	add	r3, r2
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b25a      	sxtb	r2, r3
 80033f8:	7bbb      	ldrb	r3, [r7, #14]
 80033fa:	2101      	movs	r1, #1
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	b25b      	sxtb	r3, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	b25b      	sxtb	r3, r3
 8003406:	4013      	ands	r3, r2
 8003408:	b259      	sxtb	r1, r3
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	7c7b      	ldrb	r3, [r7, #17]
 800340e:	b2c8      	uxtb	r0, r1
 8003410:	4923      	ldr	r1, [pc, #140]	@ (80034a0 <OLED_PrintImageFromCoords+0x188>)
 8003412:	01d2      	lsls	r2, r2, #7
 8003414:	440a      	add	r2, r1
 8003416:	4413      	add	r3, r2
 8003418:	4602      	mov	r2, r0
 800341a:	701a      	strb	r2, [r3, #0]
                }

                OLED_WriteCommand(0xB0 | displayPage);
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fde5 	bl	8002ff4 <OLED_WriteCommand>
                OLED_WriteCommand(0x00 | (displayX & 0x0F));
 800342a:	7c7b      	ldrb	r3, [r7, #17]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2db      	uxtb	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fdde 	bl	8002ff4 <OLED_WriteCommand>
                OLED_WriteCommand(0x10 | ((displayX >> 4) & 0x0F));
 8003438:	7c7b      	ldrb	r3, [r7, #17]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	b2db      	uxtb	r3, r3
 800343e:	b25b      	sxtb	r3, r3
 8003440:	f043 0310 	orr.w	r3, r3, #16
 8003444:	b25b      	sxtb	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fdd3 	bl	8002ff4 <OLED_WriteCommand>
                OLED_WriteData(displayBuffer[displayPage][displayX]);
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	7c7b      	ldrb	r3, [r7, #17]
 8003452:	4913      	ldr	r1, [pc, #76]	@ (80034a0 <OLED_PrintImageFromCoords+0x188>)
 8003454:	01d2      	lsls	r2, r2, #7
 8003456:	440a      	add	r2, r1
 8003458:	4413      	add	r3, r2
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fded 	bl	800303c <OLED_WriteData>
 8003462:	e000      	b.n	8003466 <OLED_PrintImageFromCoords+0x14e>
                if (displayY >= OLED_HEIGHT || displayX >= OLED_WIDTH) continue;
 8003464:	bf00      	nop
            for (uint8_t bit = 0; bit < 8; bit++) {
 8003466:	7d7b      	ldrb	r3, [r7, #21]
 8003468:	3301      	adds	r3, #1
 800346a:	757b      	strb	r3, [r7, #21]
 800346c:	7d7b      	ldrb	r3, [r7, #21]
 800346e:	2b07      	cmp	r3, #7
 8003470:	f67f af7b 	bls.w	800336a <OLED_PrintImageFromCoords+0x52>
        for (uint8_t x = 0; x < imageWidth; x++) {
 8003474:	7dbb      	ldrb	r3, [r7, #22]
 8003476:	3301      	adds	r3, #1
 8003478:	75bb      	strb	r3, [r7, #22]
 800347a:	7dba      	ldrb	r2, [r7, #22]
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	429a      	cmp	r2, r3
 8003480:	f4ff af65 	bcc.w	800334e <OLED_PrintImageFromCoords+0x36>
    for (uint8_t page = 0; page < imagePages; page++) {
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	3301      	adds	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
 800348a:	7dfa      	ldrb	r2, [r7, #23]
 800348c:	7d3b      	ldrb	r3, [r7, #20]
 800348e:	429a      	cmp	r2, r3
 8003490:	f4ff af5a 	bcc.w	8003348 <OLED_PrintImageFromCoords+0x30>
            }
        }
    }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	2000047c 	.word	0x2000047c

080034a4 <OLED_FillRectangle>:

// Wypełnia prostokąt o zadanych wymiarach
void OLED_FillRectangle(uint8_t startX, uint8_t startY, uint8_t width, uint8_t height, bool fill) {
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4623      	mov	r3, r4
 80034b4:	71fb      	strb	r3, [r7, #7]
 80034b6:	4603      	mov	r3, r0
 80034b8:	71bb      	strb	r3, [r7, #6]
 80034ba:	460b      	mov	r3, r1
 80034bc:	717b      	strb	r3, [r7, #5]
 80034be:	4613      	mov	r3, r2
 80034c0:	713b      	strb	r3, [r7, #4]
    if (startX >= OLED_WIDTH || startY >= OLED_HEIGHT) return;
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f2c0 8093 	blt.w	80035f2 <OLED_FillRectangle+0x14e>
 80034cc:	79bb      	ldrb	r3, [r7, #6]
 80034ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80034d0:	f200 808f 	bhi.w	80035f2 <OLED_FillRectangle+0x14e>
    if ((startX + width) > OLED_WIDTH) width = OLED_WIDTH - startX;
 80034d4:	79fa      	ldrb	r2, [r7, #7]
 80034d6:	797b      	ldrb	r3, [r7, #5]
 80034d8:	4413      	add	r3, r2
 80034da:	2b80      	cmp	r3, #128	@ 0x80
 80034dc:	dd06      	ble.n	80034ec <OLED_FillRectangle+0x48>
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80034e4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80034e8:	3380      	adds	r3, #128	@ 0x80
 80034ea:	717b      	strb	r3, [r7, #5]
    if ((startY + height) > OLED_HEIGHT) height = OLED_HEIGHT - startY;
 80034ec:	79ba      	ldrb	r2, [r7, #6]
 80034ee:	793b      	ldrb	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	2b40      	cmp	r3, #64	@ 0x40
 80034f4:	dd03      	ble.n	80034fe <OLED_FillRectangle+0x5a>
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80034fc:	713b      	strb	r3, [r7, #4]

    for (uint8_t y = startY; y < (startY + height); y++) {
 80034fe:	79bb      	ldrb	r3, [r7, #6]
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e06f      	b.n	80035e4 <OLED_FillRectangle+0x140>
        uint8_t page = y / 8;
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	08db      	lsrs	r3, r3, #3
 8003508:	737b      	strb	r3, [r7, #13]
        uint8_t bit = y % 8;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	733b      	strb	r3, [r7, #12]

        for (uint8_t x = startX; x < (startX + width); x++) {
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	73bb      	strb	r3, [r7, #14]
 8003516:	e05c      	b.n	80035d2 <OLED_FillRectangle+0x12e>
            if (fill) {
 8003518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d018      	beq.n	8003552 <OLED_FillRectangle+0xae>
                displayBuffer[page][x] |= (1 << bit);     // Biały piksel
 8003520:	7b7a      	ldrb	r2, [r7, #13]
 8003522:	7bbb      	ldrb	r3, [r7, #14]
 8003524:	4935      	ldr	r1, [pc, #212]	@ (80035fc <OLED_FillRectangle+0x158>)
 8003526:	01d2      	lsls	r2, r2, #7
 8003528:	440a      	add	r2, r1
 800352a:	4413      	add	r3, r2
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	b25a      	sxtb	r2, r3
 8003530:	7b3b      	ldrb	r3, [r7, #12]
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	b25b      	sxtb	r3, r3
 800353a:	4313      	orrs	r3, r2
 800353c:	b259      	sxtb	r1, r3
 800353e:	7b7a      	ldrb	r2, [r7, #13]
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	b2c8      	uxtb	r0, r1
 8003544:	492d      	ldr	r1, [pc, #180]	@ (80035fc <OLED_FillRectangle+0x158>)
 8003546:	01d2      	lsls	r2, r2, #7
 8003548:	440a      	add	r2, r1
 800354a:	4413      	add	r3, r2
 800354c:	4602      	mov	r2, r0
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e019      	b.n	8003586 <OLED_FillRectangle+0xe2>
            } else {
                displayBuffer[page][x] &= ~(1 << bit);    // Czarny piksel
 8003552:	7b7a      	ldrb	r2, [r7, #13]
 8003554:	7bbb      	ldrb	r3, [r7, #14]
 8003556:	4929      	ldr	r1, [pc, #164]	@ (80035fc <OLED_FillRectangle+0x158>)
 8003558:	01d2      	lsls	r2, r2, #7
 800355a:	440a      	add	r2, r1
 800355c:	4413      	add	r3, r2
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	b25a      	sxtb	r2, r3
 8003562:	7b3b      	ldrb	r3, [r7, #12]
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	b25b      	sxtb	r3, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	b25b      	sxtb	r3, r3
 8003570:	4013      	ands	r3, r2
 8003572:	b259      	sxtb	r1, r3
 8003574:	7b7a      	ldrb	r2, [r7, #13]
 8003576:	7bbb      	ldrb	r3, [r7, #14]
 8003578:	b2c8      	uxtb	r0, r1
 800357a:	4920      	ldr	r1, [pc, #128]	@ (80035fc <OLED_FillRectangle+0x158>)
 800357c:	01d2      	lsls	r2, r2, #7
 800357e:	440a      	add	r2, r1
 8003580:	4413      	add	r3, r2
 8003582:	4602      	mov	r2, r0
 8003584:	701a      	strb	r2, [r3, #0]
            }

            OLED_WriteCommand(0xB0 | page);
 8003586:	7b7b      	ldrb	r3, [r7, #13]
 8003588:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800358c:	b2db      	uxtb	r3, r3
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fd30 	bl	8002ff4 <OLED_WriteCommand>
            OLED_WriteCommand(0x00 | (x & 0x0F));
 8003594:	7bbb      	ldrb	r3, [r7, #14]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fd29 	bl	8002ff4 <OLED_WriteCommand>
            OLED_WriteCommand(0x10 | ((x >> 4) & 0x0F));
 80035a2:	7bbb      	ldrb	r3, [r7, #14]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	f043 0310 	orr.w	r3, r3, #16
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fd1e 	bl	8002ff4 <OLED_WriteCommand>
            OLED_WriteData(displayBuffer[page][x]);
 80035b8:	7b7a      	ldrb	r2, [r7, #13]
 80035ba:	7bbb      	ldrb	r3, [r7, #14]
 80035bc:	490f      	ldr	r1, [pc, #60]	@ (80035fc <OLED_FillRectangle+0x158>)
 80035be:	01d2      	lsls	r2, r2, #7
 80035c0:	440a      	add	r2, r1
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd38 	bl	800303c <OLED_WriteData>
        for (uint8_t x = startX; x < (startX + width); x++) {
 80035cc:	7bbb      	ldrb	r3, [r7, #14]
 80035ce:	3301      	adds	r3, #1
 80035d0:	73bb      	strb	r3, [r7, #14]
 80035d2:	7bba      	ldrb	r2, [r7, #14]
 80035d4:	79f9      	ldrb	r1, [r7, #7]
 80035d6:	797b      	ldrb	r3, [r7, #5]
 80035d8:	440b      	add	r3, r1
 80035da:	429a      	cmp	r2, r3
 80035dc:	db9c      	blt.n	8003518 <OLED_FillRectangle+0x74>
    for (uint8_t y = startY; y < (startY + height); y++) {
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	3301      	adds	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	79b9      	ldrb	r1, [r7, #6]
 80035e8:	793b      	ldrb	r3, [r7, #4]
 80035ea:	440b      	add	r3, r1
 80035ec:	429a      	cmp	r2, r3
 80035ee:	db89      	blt.n	8003504 <OLED_FillRectangle+0x60>
 80035f0:	e000      	b.n	80035f4 <OLED_FillRectangle+0x150>
    if (startX >= OLED_WIDTH || startY >= OLED_HEIGHT) return;
 80035f2:	bf00      	nop
        }
    }
}
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000047c 	.word	0x2000047c

08003600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	4b10      	ldr	r3, [pc, #64]	@ (800364c <HAL_MspInit+0x4c>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	4a0f      	ldr	r2, [pc, #60]	@ (800364c <HAL_MspInit+0x4c>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003614:	6453      	str	r3, [r2, #68]	@ 0x44
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <HAL_MspInit+0x4c>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_MspInit+0x4c>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <HAL_MspInit+0x4c>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
 8003632:	4b06      	ldr	r3, [pc, #24]	@ (800364c <HAL_MspInit+0x4c>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800363e:	2007      	movs	r0, #7
 8003640:	f000 fdb8 	bl	80041b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800

08003650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	@ 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <HAL_I2C_MspInit+0xa4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d13c      	bne.n	80036ec <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_I2C_MspInit+0xa8>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	4a1f      	ldr	r2, [pc, #124]	@ (80036f8 <HAL_I2C_MspInit+0xa8>)
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	6313      	str	r3, [r2, #48]	@ 0x30
 8003682:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <HAL_I2C_MspInit+0xa8>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_I2C_SCL_Pin|BH1750_I2C_SDA_Pin;
 800368e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003694:	2312      	movs	r3, #18
 8003696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800369c:	2302      	movs	r3, #2
 800369e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036a0:	2304      	movs	r3, #4
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4619      	mov	r1, r3
 80036aa:	4814      	ldr	r0, [pc, #80]	@ (80036fc <HAL_I2C_MspInit+0xac>)
 80036ac:	f000 fe64 	bl	8004378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_I2C_MspInit+0xa8>)
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <HAL_I2C_MspInit+0xa8>)
 80036ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036be:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c0:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <HAL_I2C_MspInit+0xa8>)
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	2100      	movs	r1, #0
 80036d0:	201f      	movs	r0, #31
 80036d2:	f000 fd7a 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036d6:	201f      	movs	r0, #31
 80036d8:	f000 fd93 	bl	8004202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	2100      	movs	r1, #0
 80036e0:	2020      	movs	r0, #32
 80036e2:	f000 fd72 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80036e6:	2020      	movs	r0, #32
 80036e8:	f000 fd8b 	bl	8004202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80036ec:	bf00      	nop
 80036ee:	3728      	adds	r7, #40	@ 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40005400 	.word	0x40005400
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40020400 	.word	0x40020400

08003700 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	@ 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a34      	ldr	r2, [pc, #208]	@ (80037f0 <HAL_SPI_MspInit+0xf0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d161      	bne.n	80037e6 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	4b33      	ldr	r3, [pc, #204]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	4a32      	ldr	r2, [pc, #200]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 800372c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003730:	6453      	str	r3, [r2, #68]	@ 0x44
 8003732:	4b30      	ldr	r3, [pc, #192]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6313      	str	r3, [r2, #48]	@ 0x30
 800374e:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60bb      	str	r3, [r7, #8]
 800375e:	4b25      	ldr	r3, [pc, #148]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	4a24      	ldr	r2, [pc, #144]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6313      	str	r3, [r2, #48]	@ 0x30
 800376a:	4b22      	ldr	r3, [pc, #136]	@ (80037f4 <HAL_SPI_MspInit+0xf4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003776:	2320      	movs	r3, #32
 8003778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003782:	2303      	movs	r3, #3
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003786:	2305      	movs	r3, #5
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378a:	f107 0314 	add.w	r3, r7, #20
 800378e:	4619      	mov	r1, r3
 8003790:	4819      	ldr	r0, [pc, #100]	@ (80037f8 <HAL_SPI_MspInit+0xf8>)
 8003792:	f000 fdf1 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379a:	2302      	movs	r3, #2
 800379c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037a2:	2302      	movs	r3, #2
 80037a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037a6:	2305      	movs	r3, #5
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f107 0314 	add.w	r3, r7, #20
 80037ae:	4619      	mov	r1, r3
 80037b0:	4811      	ldr	r0, [pc, #68]	@ (80037f8 <HAL_SPI_MspInit+0xf8>)
 80037b2:	f000 fde1 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037b6:	2310      	movs	r3, #16
 80037b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ba:	2302      	movs	r3, #2
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037c6:	2305      	movs	r3, #5
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ca:	f107 0314 	add.w	r3, r7, #20
 80037ce:	4619      	mov	r1, r3
 80037d0:	480a      	ldr	r0, [pc, #40]	@ (80037fc <HAL_SPI_MspInit+0xfc>)
 80037d2:	f000 fdd1 	bl	8004378 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	2023      	movs	r0, #35	@ 0x23
 80037dc:	f000 fcf5 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037e0:	2023      	movs	r0, #35	@ 0x23
 80037e2:	f000 fd0e 	bl	8004202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80037e6:	bf00      	nop
 80037e8:	3728      	adds	r7, #40	@ 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40013000 	.word	0x40013000
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	40020400 	.word	0x40020400

08003800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	@ 0x28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1d      	ldr	r2, [pc, #116]	@ (8003894 <HAL_UART_MspInit+0x94>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d133      	bne.n	800388a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <HAL_UART_MspInit+0x98>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <HAL_UART_MspInit+0x98>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
 8003832:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_UART_MspInit+0x98>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b15      	ldr	r3, [pc, #84]	@ (8003898 <HAL_UART_MspInit+0x98>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	4a14      	ldr	r2, [pc, #80]	@ (8003898 <HAL_UART_MspInit+0x98>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6313      	str	r3, [r2, #48]	@ 0x30
 800384e:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_UART_MspInit+0x98>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800385a:	230c      	movs	r3, #12
 800385c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003866:	2303      	movs	r3, #3
 8003868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800386a:	2307      	movs	r3, #7
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800386e:	f107 0314 	add.w	r3, r7, #20
 8003872:	4619      	mov	r1, r3
 8003874:	4809      	ldr	r0, [pc, #36]	@ (800389c <HAL_UART_MspInit+0x9c>)
 8003876:	f000 fd7f 	bl	8004378 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	2026      	movs	r0, #38	@ 0x26
 8003880:	f000 fca3 	bl	80041ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003884:	2026      	movs	r0, #38	@ 0x26
 8003886:	f000 fcbc 	bl	8004202 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800388a:	bf00      	nop
 800388c:	3728      	adds	r7, #40	@ 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40004400 	.word	0x40004400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020000 	.word	0x40020000

080038a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038a4:	bf00      	nop
 80038a6:	e7fd      	b.n	80038a4 <NMI_Handler+0x4>

080038a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <HardFault_Handler+0x4>

080038b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b4:	bf00      	nop
 80038b6:	e7fd      	b.n	80038b4 <MemManage_Handler+0x4>

080038b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <BusFault_Handler+0x4>

080038c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c4:	bf00      	nop
 80038c6:	e7fd      	b.n	80038c4 <UsageFault_Handler+0x4>

080038c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f6:	f000 fb49 	bl	8003f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003904:	4802      	ldr	r0, [pc, #8]	@ (8003910 <I2C1_EV_IRQHandler+0x10>)
 8003906:	f001 fb77 	bl	8004ff8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000270 	.word	0x20000270

08003914 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003918:	4802      	ldr	r0, [pc, #8]	@ (8003924 <I2C1_ER_IRQHandler+0x10>)
 800391a:	f001 fcc0 	bl	800529e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800391e:	bf00      	nop
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000270 	.word	0x20000270

08003928 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800392c:	4802      	ldr	r0, [pc, #8]	@ (8003938 <SPI1_IRQHandler+0x10>)
 800392e:	f004 fa23 	bl	8007d78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003932:	bf00      	nop
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200002c4 	.word	0x200002c4

0800393c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003940:	4802      	ldr	r0, [pc, #8]	@ (800394c <USART2_IRQHandler+0x10>)
 8003942:	f004 fcb3 	bl	80082ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	2000031c 	.word	0x2000031c

08003950 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return 1;
 8003954:	2301      	movs	r3, #1
}
 8003956:	4618      	mov	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_kill>:

int _kill(int pid, int sig)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800396a:	f006 fb77 	bl	800a05c <__errno>
 800396e:	4603      	mov	r3, r0
 8003970:	2216      	movs	r2, #22
 8003972:	601a      	str	r2, [r3, #0]
  return -1;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_exit>:

void _exit (int status)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffe7 	bl	8003960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <_exit+0x12>

08003996 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]
 80039a6:	e00a      	b.n	80039be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039a8:	f3af 8000 	nop.w
 80039ac:	4601      	mov	r1, r0
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	60ba      	str	r2, [r7, #8]
 80039b4:	b2ca      	uxtb	r2, r1
 80039b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3301      	adds	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	dbf0      	blt.n	80039a8 <_read+0x12>
  }

  return len;
 80039c6:	687b      	ldr	r3, [r7, #4]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	e009      	b.n	80039f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	60ba      	str	r2, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	3301      	adds	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	dbf1      	blt.n	80039e2 <_write+0x12>
  }
  return len;
 80039fe:	687b      	ldr	r3, [r7, #4]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_close>:

int _close(int file)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a30:	605a      	str	r2, [r3, #4]
  return 0;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <_isatty>:

int _isatty(int file)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a48:	2301      	movs	r3, #1
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a78:	4a14      	ldr	r2, [pc, #80]	@ (8003acc <_sbrk+0x5c>)
 8003a7a:	4b15      	ldr	r3, [pc, #84]	@ (8003ad0 <_sbrk+0x60>)
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <_sbrk+0x64>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	@ (8003ad4 <_sbrk+0x64>)
 8003a8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ad8 <_sbrk+0x68>)
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a92:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <_sbrk+0x64>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d207      	bcs.n	8003ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa0:	f006 fadc 	bl	800a05c <__errno>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	e009      	b.n	8003ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab0:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <_sbrk+0x64>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ab6:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <_sbrk+0x64>)
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	4a05      	ldr	r2, [pc, #20]	@ (8003ad4 <_sbrk+0x64>)
 8003ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20020000 	.word	0x20020000
 8003ad0:	00000400 	.word	0x00000400
 8003ad4:	2000087c 	.word	0x2000087c
 8003ad8:	20001930 	.word	0x20001930

08003adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <SystemInit+0x20>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae6:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <SystemInit+0x20>)
 8003ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <USART_send_frame>:
        return tmp;
	}else return -1;
}

// Funkcja do wysyłania danych przez USART (z formatowaniem)
void USART_send_frame(const char *frame, int frame_idx) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
    // Indeks w buforze nadawczym
    int idx = USART_TX_Empty;
 8003b0a:	4b30      	ldr	r3, [pc, #192]	@ (8003bcc <USART_send_frame+0xcc>)
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	617b      	str	r3, [r7, #20]

    // Kopiowanie danych do bufora cyklicznego
    for(int i = 0; i < frame_idx; i++) {
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e014      	b.n	8003b42 <USART_send_frame+0x42>
        USART_TxBuf[idx] = frame[i];
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	4619      	mov	r1, r3
 8003b22:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd0 <USART_send_frame+0xd0>)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        idx++;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
        // Zapewnienie cykliczności bufora
        if(idx >= USART_TXBUF_LEN) {
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8003b36:	db01      	blt.n	8003b3c <USART_send_frame+0x3c>
            idx = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
    for(int i = 0; i < frame_idx; i++) {
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	dbe6      	blt.n	8003b18 <USART_send_frame+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b4a:	b672      	cpsid	i
}
 8003b4c:	bf00      	nop

    // Wyłączenie przerwań przed modyfikacją zmiennych współdzielonych
    __disable_irq();

    // Jeśli bufor jest pusty i UART gotowy do nadawania
    if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <USART_send_frame+0xcc>)
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <USART_send_frame+0xd4>)
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d12c      	bne.n	8003bb8 <USART_send_frame+0xb8>
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <USART_send_frame+0xd8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b68:	2b80      	cmp	r3, #128	@ 0x80
 8003b6a:	d125      	bne.n	8003bb8 <USART_send_frame+0xb8>
        // Aktualizacja wskaźnika końca danych
        USART_TX_Empty = idx;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <USART_send_frame+0xcc>)
 8003b72:	801a      	strh	r2, [r3, #0]
        // Pobranie pierwszego bajtu do wysłania
        uint8_t tmp = USART_TxBuf[USART_TX_Busy];
 8003b74:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <USART_send_frame+0xd4>)
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <USART_send_frame+0xd0>)
 8003b7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	73fb      	strb	r3, [r7, #15]
        // Przesunięcie wskaźnika odczytu
        USART_TX_Busy++;
 8003b88:	4b12      	ldr	r3, [pc, #72]	@ (8003bd4 <USART_send_frame+0xd4>)
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <USART_send_frame+0xd4>)
 8003b94:	801a      	strh	r2, [r3, #0]
        // Zapewnienie cykliczności bufora
        if(USART_TX_Busy >= USART_TXBUF_LEN) {
 8003b96:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <USART_send_frame+0xd4>)
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8003ba0:	d302      	bcc.n	8003ba8 <USART_send_frame+0xa8>
            USART_TX_Busy = 0;
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <USART_send_frame+0xd4>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	801a      	strh	r2, [r3, #0]
        }
        // Rozpoczęcie transmisji pierwszego bajtu
        HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 8003ba8:	f107 030f 	add.w	r3, r7, #15
 8003bac:	2201      	movs	r2, #1
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4809      	ldr	r0, [pc, #36]	@ (8003bd8 <USART_send_frame+0xd8>)
 8003bb2:	f004 fb1f 	bl	80081f4 <HAL_UART_Transmit_IT>
    if((USART_TX_Empty == USART_TX_Busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET)) {
 8003bb6:	e003      	b.n	8003bc0 <USART_send_frame+0xc0>
    } else {
        // Jeśli transmisja w toku, tylko aktualizujemy wskaźnik końca
        USART_TX_Empty = idx;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <USART_send_frame+0xcc>)
 8003bbe:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc0:	b662      	cpsie	i
}
 8003bc2:	bf00      	nop
    }

    // Włączenie przerwań
    __enable_irq();
}
 8003bc4:	bf00      	nop
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	200016ae 	.word	0x200016ae
 8003bd0:	20000adc 	.word	0x20000adc
 8003bd4:	200016ac 	.word	0x200016ac
 8003bd8:	2000031c 	.word	0x2000031c

08003bdc <USART_send_response>:
// Funkcja do wysyłania odpowiedzi
void USART_send_response(const char *sender, const char *receiver, const char *response_data) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	f5ad 6dc2 	sub.w	sp, sp, #1552	@ 0x610
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8003be8:	f2a3 6304 	subw	r3, r3, #1540	@ 0x604
 8003bec:	6018      	str	r0, [r3, #0]
 8003bee:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8003bf2:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8003bf6:	6019      	str	r1, [r3, #0]
 8003bf8:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8003bfc:	f2a3 630c 	subw	r3, r3, #1548	@ 0x60c
 8003c00:	601a      	str	r2, [r3, #0]
    char frame[USART_TXBUF_LEN];
    uint16_t data_length = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	f8a7 360e 	strh.w	r3, [r7, #1550]	@ 0x60e
    uint16_t crc;
    int frame_idx = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 3608 	str.w	r3, [r7, #1544]	@ 0x608

    frame[frame_idx++] = '{';
 8003c0e:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	f8c7 2608 	str.w	r2, [r7, #1544]	@ 0x608
 8003c18:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003c1c:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003c20:	217b      	movs	r1, #123	@ 0x7b
 8003c22:	54d1      	strb	r1, [r2, r3]

    // Skopiowanie nadawcy
    for (int i = 0; i < 3; i++) {
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8003c2a:	e017      	b.n	8003c5c <USART_send_response+0x80>
        frame[frame_idx++] = sender[i];
 8003c2c:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8003c30:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003c34:	f2a2 6204 	subw	r2, r2, #1540	@ 0x604
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003c40:	1c59      	adds	r1, r3, #1
 8003c42:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003c46:	7811      	ldrb	r1, [r2, #0]
 8003c48:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003c4c:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003c50:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 3; i++) {
 8003c52:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8003c56:	3301      	adds	r3, #1
 8003c58:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8003c5c:	f8d7 3604 	ldr.w	r3, [r7, #1540]	@ 0x604
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	dde3      	ble.n	8003c2c <USART_send_response+0x50>
    }

    // Skopiowanie odbiorcy
    for (int i = 0; i < 3; i++) {
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8003c6a:	e017      	b.n	8003c9c <USART_send_response+0xc0>
        frame[frame_idx++] = receiver[i];
 8003c6c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8003c70:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003c74:	f5a2 62c1 	sub.w	r2, r2, #1544	@ 0x608
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003c80:	1c59      	adds	r1, r3, #1
 8003c82:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003c86:	7811      	ldrb	r1, [r2, #0]
 8003c88:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003c8c:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003c90:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 3; i++) {
 8003c92:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8003c96:	3301      	adds	r3, #1
 8003c98:	f8c7 3600 	str.w	r3, [r7, #1536]	@ 0x600
 8003c9c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	@ 0x600
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	dde3      	ble.n	8003c6c <USART_send_response+0x90>
    }

    // Oblicz długość danych
    while (response_data[data_length] && data_length < 256) {
 8003ca4:	e004      	b.n	8003cb0 <USART_send_response+0xd4>
        data_length++;
 8003ca6:	f8b7 360e 	ldrh.w	r3, [r7, #1550]	@ 0x60e
 8003caa:	3301      	adds	r3, #1
 8003cac:	f8a7 360e 	strh.w	r3, [r7, #1550]	@ 0x60e
    while (response_data[data_length] && data_length < 256) {
 8003cb0:	f8b7 360e 	ldrh.w	r3, [r7, #1550]	@ 0x60e
 8003cb4:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003cb8:	f2a2 620c 	subw	r2, r2, #1548	@ 0x60c
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <USART_send_response+0xf2>
 8003cc6:	f8b7 360e 	ldrh.w	r3, [r7, #1550]	@ 0x60e
 8003cca:	2bff      	cmp	r3, #255	@ 0xff
 8003ccc:	d9eb      	bls.n	8003ca6 <USART_send_response+0xca>
    }
    // Konwertowanie długości na 3 cyfry dziesiętne
    frame[frame_idx++] = '0' + (data_length / 100);
 8003cce:	f8b7 360e 	ldrh.w	r3, [r7, #1550]	@ 0x60e
 8003cd2:	4a6d      	ldr	r2, [pc, #436]	@ (8003e88 <USART_send_response+0x2ac>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003ce2:	1c59      	adds	r1, r3, #1
 8003ce4:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003ce8:	3230      	adds	r2, #48	@ 0x30
 8003cea:	b2d1      	uxtb	r1, r2
 8003cec:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003cf0:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003cf4:	54d1      	strb	r1, [r2, r3]
    frame[frame_idx++] = '0' + ((data_length / 10) % 10);
 8003cf6:	f8b7 360e 	ldrh.w	r3, [r7, #1550]	@ 0x60e
 8003cfa:	4a64      	ldr	r2, [pc, #400]	@ (8003e8c <USART_send_response+0x2b0>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <USART_send_response+0x2b0>)
 8003d06:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0a:	08d9      	lsrs	r1, r3, #3
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003d24:	3230      	adds	r2, #48	@ 0x30
 8003d26:	b2d1      	uxtb	r1, r2
 8003d28:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003d2c:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003d30:	54d1      	strb	r1, [r2, r3]
    frame[frame_idx++] = '0' + (data_length % 10);
 8003d32:	f8b7 260e 	ldrh.w	r2, [r7, #1550]	@ 0x60e
 8003d36:	4b55      	ldr	r3, [pc, #340]	@ (8003e8c <USART_send_response+0x2b0>)
 8003d38:	fba3 1302 	umull	r1, r3, r3, r2
 8003d3c:	08d9      	lsrs	r1, r3, #3
 8003d3e:	460b      	mov	r3, r1
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003d50:	1c59      	adds	r1, r3, #1
 8003d52:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003d56:	3230      	adds	r2, #48	@ 0x30
 8003d58:	b2d1      	uxtb	r1, r2
 8003d5a:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003d5e:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003d62:	54d1      	strb	r1, [r2, r3]

    // Skopiuj dane odpowiedzi
    for (int i = 0; i < data_length && frame_idx < (USART_TXBUF_LEN - 6); i++) {
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8003d6a:	e017      	b.n	8003d9c <USART_send_response+0x1c0>
        frame[frame_idx++] = response_data[i];
 8003d6c:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 8003d70:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003d74:	f2a2 620c 	subw	r2, r2, #1548	@ 0x60c
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	441a      	add	r2, r3
 8003d7c:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003d80:	1c59      	adds	r1, r3, #1
 8003d82:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003d86:	7811      	ldrb	r1, [r2, #0]
 8003d88:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003d8c:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003d90:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < data_length && frame_idx < (USART_TXBUF_LEN - 6); i++) {
 8003d92:	f8d7 35fc 	ldr.w	r3, [r7, #1532]	@ 0x5fc
 8003d96:	3301      	adds	r3, #1
 8003d98:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8003d9c:	f8b7 360e 	ldrh.w	r3, [r7, #1550]	@ 0x60e
 8003da0:	f8d7 25fc 	ldr.w	r2, [r7, #1532]	@ 0x5fc
 8003da4:	429a      	cmp	r2, r3
 8003da6:	da05      	bge.n	8003db4 <USART_send_response+0x1d8>
 8003da8:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003dac:	f240 52e1 	movw	r2, #1505	@ 0x5e1
 8003db0:	4293      	cmp	r3, r2
 8003db2:	dddb      	ble.n	8003d6c <USART_send_response+0x190>
    }

    // Obliczanie CRC dla danych między { a CRC
    crc = crc16((uint8_t*)frame + 1, frame_idx - 1);
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	3301      	adds	r3, #1
 8003dba:	f8d7 2608 	ldr.w	r2, [r7, #1544]	@ 0x608
 8003dbe:	3a01      	subs	r2, #1
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe f8b2 	bl	8001f2c <crc16>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f8a7 35fa 	strh.w	r3, [r7, #1530]	@ 0x5fa

    // Dodanie CRC w formacie szesnastkowym
    frame[frame_idx++] = "0123456789ABCDEF"[(crc >> 12) & 0x0F];
 8003dce:	f8b7 35fa 	ldrh.w	r3, [r7, #1530]	@ 0x5fa
 8003dd2:	0b1b      	lsrs	r3, r3, #12
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003dde:	1c59      	adds	r1, r3, #1
 8003de0:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003de4:	492a      	ldr	r1, [pc, #168]	@ (8003e90 <USART_send_response+0x2b4>)
 8003de6:	5c89      	ldrb	r1, [r1, r2]
 8003de8:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003dec:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003df0:	54d1      	strb	r1, [r2, r3]
    frame[frame_idx++] = "0123456789ABCDEF"[(crc >> 8) & 0x0F];
 8003df2:	f8b7 35fa 	ldrh.w	r3, [r7, #1530]	@ 0x5fa
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003e08:	4921      	ldr	r1, [pc, #132]	@ (8003e90 <USART_send_response+0x2b4>)
 8003e0a:	5c89      	ldrb	r1, [r1, r2]
 8003e0c:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003e10:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003e14:	54d1      	strb	r1, [r2, r3]
    frame[frame_idx++] = "0123456789ABCDEF"[(crc >> 4) & 0x0F];
 8003e16:	f8b7 35fa 	ldrh.w	r3, [r7, #1530]	@ 0x5fa
 8003e1a:	091b      	lsrs	r3, r3, #4
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003e26:	1c59      	adds	r1, r3, #1
 8003e28:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003e2c:	4918      	ldr	r1, [pc, #96]	@ (8003e90 <USART_send_response+0x2b4>)
 8003e2e:	5c89      	ldrb	r1, [r1, r2]
 8003e30:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003e34:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003e38:	54d1      	strb	r1, [r2, r3]
    frame[frame_idx++] = "0123456789ABCDEF"[crc & 0x0F];
 8003e3a:	f8b7 35fa 	ldrh.w	r3, [r7, #1530]	@ 0x5fa
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8003e4c:	4910      	ldr	r1, [pc, #64]	@ (8003e90 <USART_send_response+0x2b4>)
 8003e4e:	5c89      	ldrb	r1, [r1, r2]
 8003e50:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003e54:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003e58:	54d1      	strb	r1, [r2, r3]

    // Zakończ ramkę znakiem '}'
    frame[frame_idx++] = '}';
 8003e5a:	f8d7 3608 	ldr.w	r3, [r7, #1544]	@ 0x608
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	f8c7 2608 	str.w	r2, [r7, #1544]	@ 0x608
 8003e64:	f507 62c2 	add.w	r2, r7, #1552	@ 0x610
 8003e68:	f5a2 62c0 	sub.w	r2, r2, #1536	@ 0x600
 8003e6c:	217d      	movs	r1, #125	@ 0x7d
 8003e6e:	54d1      	strb	r1, [r2, r3]
    USART_send_frame(frame, frame_idx);
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	f8d7 1608 	ldr.w	r1, [r7, #1544]	@ 0x608
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fe41 	bl	8003b00 <USART_send_frame>
}
 8003e7e:	bf00      	nop
 8003e80:	f507 67c2 	add.w	r7, r7, #1552	@ 0x610
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	51eb851f 	.word	0x51eb851f
 8003e8c:	cccccccd 	.word	0xcccccccd
 8003e90:	0800d864 	.word	0x0800d864

08003e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e98:	f7ff fe20 	bl	8003adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e9c:	480c      	ldr	r0, [pc, #48]	@ (8003ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e9e:	490d      	ldr	r1, [pc, #52]	@ (8003ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea4:	e002      	b.n	8003eac <LoopCopyDataInit>

08003ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eaa:	3304      	adds	r3, #4

08003eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb0:	d3f9      	bcc.n	8003ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb8:	e001      	b.n	8003ebe <LoopFillZerobss>

08003eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ebc:	3204      	adds	r2, #4

08003ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec0:	d3fb      	bcc.n	8003eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ec2:	f006 f8d1 	bl	800a068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ec6:	f7fe feb1 	bl	8002c2c <main>
  bx  lr    
 8003eca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003ed8:	08010578 	.word	0x08010578
  ldr r2, =_sbss
 8003edc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003ee0:	2000192c 	.word	0x2000192c

08003ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <ADC_IRQHandler>
	...

08003ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eec:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <HAL_Init+0x40>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8003f28 <HAL_Init+0x40>)
 8003ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_Init+0x40>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <HAL_Init+0x40>)
 8003efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f04:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <HAL_Init+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a07      	ldr	r2, [pc, #28]	@ (8003f28 <HAL_Init+0x40>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f10:	2003      	movs	r0, #3
 8003f12:	f000 f94f 	bl	80041b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f000 f808 	bl	8003f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f1c:	f7ff fb70 	bl	8003600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00

08003f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f34:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <HAL_InitTick+0x54>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	4b12      	ldr	r3, [pc, #72]	@ (8003f84 <HAL_InitTick+0x58>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f967 	bl	800421e <HAL_SYSTICK_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e00e      	b.n	8003f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d80a      	bhi.n	8003f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f60:	2200      	movs	r2, #0
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	f000 f92f 	bl	80041ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f6c:	4a06      	ldr	r2, [pc, #24]	@ (8003f88 <HAL_InitTick+0x5c>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	2000002c 	.word	0x2000002c
 8003f84:	20000034 	.word	0x20000034
 8003f88:	20000030 	.word	0x20000030

08003f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f90:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <HAL_IncTick+0x20>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_IncTick+0x24>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_IncTick+0x24>)
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000034 	.word	0x20000034
 8003fb0:	200017dc 	.word	0x200017dc

08003fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	@ (8003fc8 <HAL_GetTick+0x14>)
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	200017dc 	.word	0x200017dc

08003fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7ff ffee 	bl	8003fb4 <HAL_GetTick>
 8003fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d005      	beq.n	8003ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <HAL_Delay+0x44>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ff2:	bf00      	nop
 8003ff4:	f7ff ffde 	bl	8003fb4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d8f7      	bhi.n	8003ff4 <HAL_Delay+0x28>
  {
  }
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000034 	.word	0x20000034

08004014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004024:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004030:	4013      	ands	r3, r2
 8004032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800403c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004046:	4a04      	ldr	r2, [pc, #16]	@ (8004058 <__NVIC_SetPriorityGrouping+0x44>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	60d3      	str	r3, [r2, #12]
}
 800404c:	bf00      	nop
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000ed00 	.word	0xe000ed00

0800405c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004060:	4b04      	ldr	r3, [pc, #16]	@ (8004074 <__NVIC_GetPriorityGrouping+0x18>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	0a1b      	lsrs	r3, r3, #8
 8004066:	f003 0307 	and.w	r3, r3, #7
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	db0b      	blt.n	80040a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	f003 021f 	and.w	r2, r3, #31
 8004090:	4907      	ldr	r1, [pc, #28]	@ (80040b0 <__NVIC_EnableIRQ+0x38>)
 8004092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2001      	movs	r0, #1
 800409a:	fa00 f202 	lsl.w	r2, r0, r2
 800409e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	e000e100 	.word	0xe000e100

080040b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	@ (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	@ (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	@ 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
         );
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	@ 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004180:	d301      	bcc.n	8004186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004182:	2301      	movs	r3, #1
 8004184:	e00f      	b.n	80041a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004186:	4a0a      	ldr	r2, [pc, #40]	@ (80041b0 <SysTick_Config+0x40>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800418e:	210f      	movs	r1, #15
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	f7ff ff8e 	bl	80040b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004198:	4b05      	ldr	r3, [pc, #20]	@ (80041b0 <SysTick_Config+0x40>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800419e:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <SysTick_Config+0x40>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000e010 	.word	0xe000e010

080041b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff29 	bl	8004014 <__NVIC_SetPriorityGrouping>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041dc:	f7ff ff3e 	bl	800405c <__NVIC_GetPriorityGrouping>
 80041e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7ff ff8e 	bl	8004108 <NVIC_EncodePriority>
 80041ec:	4602      	mov	r2, r0
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff5d 	bl	80040b4 <__NVIC_SetPriority>
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	4603      	mov	r3, r0
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800420c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff31 	bl	8004078 <__NVIC_EnableIRQ>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ffa2 	bl	8004170 <SysTick_Config>
 800422c:	4603      	mov	r3, r0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004244:	f7ff feb6 	bl	8003fb4 <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d008      	beq.n	8004268 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2280      	movs	r2, #128	@ 0x80
 800425a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e052      	b.n	800430e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0216 	bic.w	r2, r2, #22
 8004276:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695a      	ldr	r2, [r3, #20]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004286:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <HAL_DMA_Abort+0x62>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0208 	bic.w	r2, r2, #8
 80042a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042b8:	e013      	b.n	80042e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ba:	f7ff fe7b 	bl	8003fb4 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b05      	cmp	r3, #5
 80042c6:	d90c      	bls.n	80042e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2203      	movs	r2, #3
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e015      	b.n	800430e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e4      	bne.n	80042ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f4:	223f      	movs	r2, #63	@ 0x3f
 80042f6:	409a      	lsls	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d004      	beq.n	8004334 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2280      	movs	r2, #128	@ 0x80
 800432e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e00c      	b.n	800434e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2205      	movs	r2, #5
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004368:	b2db      	uxtb	r3, r3
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e159      	b.n	8004648 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004394:	2201      	movs	r2, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	f040 8148 	bne.w	8004642 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d005      	beq.n	80043ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d130      	bne.n	800442c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	2203      	movs	r2, #3
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0201 	and.w	r2, r3, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b03      	cmp	r3, #3
 8004436:	d017      	beq.n	8004468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d123      	bne.n	80044bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	08da      	lsrs	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3208      	adds	r2, #8
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	08da      	lsrs	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3208      	adds	r2, #8
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a2 	beq.w	8004642 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b57      	ldr	r3, [pc, #348]	@ (8004660 <HAL_GPIO_Init+0x2e8>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	4a56      	ldr	r2, [pc, #344]	@ (8004660 <HAL_GPIO_Init+0x2e8>)
 8004508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800450c:	6453      	str	r3, [r2, #68]	@ 0x44
 800450e:	4b54      	ldr	r3, [pc, #336]	@ (8004660 <HAL_GPIO_Init+0x2e8>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800451a:	4a52      	ldr	r2, [pc, #328]	@ (8004664 <HAL_GPIO_Init+0x2ec>)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	3302      	adds	r3, #2
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a49      	ldr	r2, [pc, #292]	@ (8004668 <HAL_GPIO_Init+0x2f0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x202>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a48      	ldr	r2, [pc, #288]	@ (800466c <HAL_GPIO_Init+0x2f4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x1fe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a47      	ldr	r2, [pc, #284]	@ (8004670 <HAL_GPIO_Init+0x2f8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x1fa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a46      	ldr	r2, [pc, #280]	@ (8004674 <HAL_GPIO_Init+0x2fc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x1f6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a45      	ldr	r2, [pc, #276]	@ (8004678 <HAL_GPIO_Init+0x300>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x1f2>
 8004566:	2304      	movs	r3, #4
 8004568:	e008      	b.n	800457c <HAL_GPIO_Init+0x204>
 800456a:	2307      	movs	r3, #7
 800456c:	e006      	b.n	800457c <HAL_GPIO_Init+0x204>
 800456e:	2303      	movs	r3, #3
 8004570:	e004      	b.n	800457c <HAL_GPIO_Init+0x204>
 8004572:	2302      	movs	r3, #2
 8004574:	e002      	b.n	800457c <HAL_GPIO_Init+0x204>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_GPIO_Init+0x204>
 800457a:	2300      	movs	r3, #0
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	f002 0203 	and.w	r2, r2, #3
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	4093      	lsls	r3, r2
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800458c:	4935      	ldr	r1, [pc, #212]	@ (8004664 <HAL_GPIO_Init+0x2ec>)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800459a:	4b38      	ldr	r3, [pc, #224]	@ (800467c <HAL_GPIO_Init+0x304>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045be:	4a2f      	ldr	r2, [pc, #188]	@ (800467c <HAL_GPIO_Init+0x304>)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045c4:	4b2d      	ldr	r3, [pc, #180]	@ (800467c <HAL_GPIO_Init+0x304>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e8:	4a24      	ldr	r2, [pc, #144]	@ (800467c <HAL_GPIO_Init+0x304>)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ee:	4b23      	ldr	r3, [pc, #140]	@ (800467c <HAL_GPIO_Init+0x304>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004612:	4a1a      	ldr	r2, [pc, #104]	@ (800467c <HAL_GPIO_Init+0x304>)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004618:	4b18      	ldr	r3, [pc, #96]	@ (800467c <HAL_GPIO_Init+0x304>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800463c:	4a0f      	ldr	r2, [pc, #60]	@ (800467c <HAL_GPIO_Init+0x304>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	f67f aea2 	bls.w	8004394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3724      	adds	r7, #36	@ 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	40013800 	.word	0x40013800
 8004668:	40020000 	.word	0x40020000
 800466c:	40020400 	.word	0x40020400
 8004670:	40020800 	.word	0x40020800
 8004674:	40020c00 	.word	0x40020c00
 8004678:	40021000 	.word	0x40021000
 800467c:	40013c00 	.word	0x40013c00

08004680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e001      	b.n	80046a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	619a      	str	r2, [r3, #24]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e12b      	b.n	800494e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe ffa0 	bl	8003650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2224      	movs	r2, #36	@ 0x24
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004736:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004746:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004748:	f003 f920 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 800474c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4a81      	ldr	r2, [pc, #516]	@ (8004958 <HAL_I2C_Init+0x274>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d807      	bhi.n	8004768 <HAL_I2C_Init+0x84>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a80      	ldr	r2, [pc, #512]	@ (800495c <HAL_I2C_Init+0x278>)
 800475c:	4293      	cmp	r3, r2
 800475e:	bf94      	ite	ls
 8004760:	2301      	movls	r3, #1
 8004762:	2300      	movhi	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e006      	b.n	8004776 <HAL_I2C_Init+0x92>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a7d      	ldr	r2, [pc, #500]	@ (8004960 <HAL_I2C_Init+0x27c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	bf94      	ite	ls
 8004770:	2301      	movls	r3, #1
 8004772:	2300      	movhi	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0e7      	b.n	800494e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a78      	ldr	r2, [pc, #480]	@ (8004964 <HAL_I2C_Init+0x280>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004958 <HAL_I2C_Init+0x274>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d802      	bhi.n	80047b8 <HAL_I2C_Init+0xd4>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	3301      	adds	r3, #1
 80047b6:	e009      	b.n	80047cc <HAL_I2C_Init+0xe8>
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	4a69      	ldr	r2, [pc, #420]	@ (8004968 <HAL_I2C_Init+0x284>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	099b      	lsrs	r3, r3, #6
 80047ca:	3301      	adds	r3, #1
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	495c      	ldr	r1, [pc, #368]	@ (8004958 <HAL_I2C_Init+0x274>)
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d819      	bhi.n	8004820 <HAL_I2C_Init+0x13c>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e59      	subs	r1, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004800:	400b      	ands	r3, r1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_I2C_Init+0x138>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1e59      	subs	r1, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fbb1 f3f3 	udiv	r3, r1, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481a:	e051      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 800481c:	2304      	movs	r3, #4
 800481e:	e04f      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d111      	bne.n	800484c <HAL_I2C_Init+0x168>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e58      	subs	r0, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	440b      	add	r3, r1
 8004836:	fbb0 f3f3 	udiv	r3, r0, r3
 800483a:	3301      	adds	r3, #1
 800483c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004840:	2b00      	cmp	r3, #0
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e012      	b.n	8004872 <HAL_I2C_Init+0x18e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	1e58      	subs	r0, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	0099      	lsls	r1, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004862:	3301      	adds	r3, #1
 8004864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Init+0x196>
 8004876:	2301      	movs	r3, #1
 8004878:	e022      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10e      	bne.n	80048a0 <HAL_I2C_Init+0x1bc>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1e58      	subs	r0, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	440b      	add	r3, r1
 8004890:	fbb0 f3f3 	udiv	r3, r0, r3
 8004894:	3301      	adds	r3, #1
 8004896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800489a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800489e:	e00f      	b.n	80048c0 <HAL_I2C_Init+0x1dc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1e58      	subs	r0, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	0099      	lsls	r1, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	6809      	ldr	r1, [r1, #0]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6911      	ldr	r1, [r2, #16]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68d2      	ldr	r2, [r2, #12]
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6812      	ldr	r2, [r2, #0]
 8004900:	430b      	orrs	r3, r1
 8004902:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	000186a0 	.word	0x000186a0
 800495c:	001e847f 	.word	0x001e847f
 8004960:	003d08ff 	.word	0x003d08ff
 8004964:	431bde83 	.word	0x431bde83
 8004968:	10624dd3 	.word	0x10624dd3

0800496c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b80      	cmp	r3, #128	@ 0x80
 8004980:	d103      	bne.n	800498a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	611a      	str	r2, [r3, #16]
  }
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	461a      	mov	r2, r3
 80049a4:	460b      	mov	r3, r1
 80049a6:	817b      	strh	r3, [r7, #10]
 80049a8:	4613      	mov	r3, r2
 80049aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ac:	f7ff fb02 	bl	8003fb4 <HAL_GetTick>
 80049b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	f040 80e0 	bne.w	8004b80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2319      	movs	r3, #25
 80049c6:	2201      	movs	r2, #1
 80049c8:	4970      	ldr	r1, [pc, #448]	@ (8004b8c <HAL_I2C_Master_Transmit+0x1f4>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f002 f8ea 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0d3      	b.n	8004b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_I2C_Master_Transmit+0x50>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e0cc      	b.n	8004b82 <HAL_I2C_Master_Transmit+0x1ea>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d007      	beq.n	8004a0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2221      	movs	r2, #33	@ 0x21
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	893a      	ldrh	r2, [r7, #8]
 8004a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a50      	ldr	r2, [pc, #320]	@ (8004b90 <HAL_I2C_Master_Transmit+0x1f8>)
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a50:	8979      	ldrh	r1, [r7, #10]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6a3a      	ldr	r2, [r7, #32]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f001 feac 	bl	80067b4 <I2C_MasterRequestWrite>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e08d      	b.n	8004b82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a7c:	e066      	b.n	8004b4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	6a39      	ldr	r1, [r7, #32]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f002 f9a8 	bl	8006dd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d107      	bne.n	8004aa6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e06b      	b.n	8004b82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b04      	cmp	r3, #4
 8004ae6:	d11b      	bne.n	8004b20 <HAL_I2C_Master_Transmit+0x188>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d017      	beq.n	8004b20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	6a39      	ldr	r1, [r7, #32]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f002 f99f 	bl	8006e68 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d107      	bne.n	8004b48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e01a      	b.n	8004b82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d194      	bne.n	8004a7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e000      	b.n	8004b82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
  }
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	00100002 	.word	0x00100002
 8004b90:	ffff0000 	.word	0xffff0000

08004b94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	@ 0x30
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	817b      	strh	r3, [r7, #10]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ba8:	f7ff fa04 	bl	8003fb4 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	f040 8217 	bne.w	8004fea <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2319      	movs	r3, #25
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	497c      	ldr	r1, [pc, #496]	@ (8004db8 <HAL_I2C_Master_Receive+0x224>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f001 ffec 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e20a      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_I2C_Master_Receive+0x50>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e203      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d007      	beq.n	8004c0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2222      	movs	r2, #34	@ 0x22
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2210      	movs	r2, #16
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	893a      	ldrh	r2, [r7, #8]
 8004c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a5c      	ldr	r2, [pc, #368]	@ (8004dbc <HAL_I2C_Master_Receive+0x228>)
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c4c:	8979      	ldrh	r1, [r7, #10]
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f001 fe30 	bl	80068b8 <I2C_MasterRequestRead>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e1c4      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d113      	bne.n	8004c92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	623b      	str	r3, [r7, #32]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e198      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d11b      	bne.n	8004cd2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e178      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d11b      	bne.n	8004d12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61bb      	str	r3, [r7, #24]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	e158      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d38:	e144      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	f200 80f1 	bhi.w	8004f26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d123      	bne.n	8004d94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f002 f903 	bl	8006f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e145      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d92:	e117      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d14e      	bne.n	8004e3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	2200      	movs	r2, #0
 8004da4:	4906      	ldr	r1, [pc, #24]	@ (8004dc0 <HAL_I2C_Master_Receive+0x22c>)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f001 fefc 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e11a      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
 8004db6:	bf00      	nop
 8004db8:	00100002 	.word	0x00100002
 8004dbc:	ffff0000 	.word	0xffff0000
 8004dc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	1c5a      	adds	r2, r3, #1
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e38:	e0c4      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	2200      	movs	r2, #0
 8004e42:	496c      	ldr	r1, [pc, #432]	@ (8004ff4 <HAL_I2C_Master_Receive+0x460>)
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f001 fead 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0cb      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4955      	ldr	r1, [pc, #340]	@ (8004ff4 <HAL_I2C_Master_Receive+0x460>)
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f001 fe7f 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e09d      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	b2d2      	uxtb	r2, r2
 8004efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f24:	e04e      	b.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f002 f816 	bl	8006f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e058      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d124      	bne.n	8004fc4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d107      	bne.n	8004f92 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f90:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f47f aeb6 	bne.w	8004d3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3728      	adds	r7, #40	@ 0x28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	00010004 	.word	0x00010004

08004ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005018:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005020:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b10      	cmp	r3, #16
 8005026:	d003      	beq.n	8005030 <HAL_I2C_EV_IRQHandler+0x38>
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b40      	cmp	r3, #64	@ 0x40
 800502c:	f040 80b1 	bne.w	8005192 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <HAL_I2C_EV_IRQHandler+0x6e>
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005050:	d003      	beq.n	800505a <HAL_I2C_EV_IRQHandler+0x62>
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005058:	d101      	bne.n	800505e <HAL_I2C_EV_IRQHandler+0x66>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_I2C_EV_IRQHandler+0x68>
 800505e:	2300      	movs	r3, #0
 8005060:	2b01      	cmp	r3, #1
 8005062:	f000 8114 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <HAL_I2C_EV_IRQHandler+0x90>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fffa 	bl	8007074 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fd7a 	bl	8005b7a <I2C_Master_SB>
 8005086:	e083      	b.n	8005190 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_I2C_EV_IRQHandler+0xac>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fdf2 	bl	8005c86 <I2C_Master_ADD10>
 80050a2:	e075      	b.n	8005190 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_I2C_EV_IRQHandler+0xc8>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fe0e 	bl	8005cda <I2C_Master_ADDR>
 80050be:	e067      	b.n	8005190 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d036      	beq.n	8005138 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d8:	f000 80db 	beq.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00d      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0x10a>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d008      	beq.n	8005102 <HAL_I2C_EV_IRQHandler+0x10a>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9d6 	bl	80054ac <I2C_MasterTransmit_TXE>
 8005100:	e046      	b.n	8005190 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80c2 	beq.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80bc 	beq.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800511a:	7bbb      	ldrb	r3, [r7, #14]
 800511c:	2b21      	cmp	r3, #33	@ 0x21
 800511e:	d103      	bne.n	8005128 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa5f 	bl	80055e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005126:	e0b4      	b.n	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b40      	cmp	r3, #64	@ 0x40
 800512c:	f040 80b1 	bne.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 facd 	bl	80056d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005136:	e0ac      	b.n	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005146:	f000 80a4 	beq.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <HAL_I2C_EV_IRQHandler+0x178>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_I2C_EV_IRQHandler+0x178>
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fb49 	bl	8005800 <I2C_MasterReceive_RXNE>
 800516e:	e00f      	b.n	8005190 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 808b 	beq.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8085 	beq.w	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fc01 	bl	8005990 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800518e:	e080      	b.n	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
 8005190:	e07f      	b.n	8005292 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	61fb      	str	r3, [r7, #28]
 80051a2:	e007      	b.n	80051b4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d011      	beq.n	80051e2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80051d8:	69b9      	ldr	r1, [r7, #24]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 ffcc 	bl	8006178 <I2C_Slave_ADDR>
 80051e0:	e05a      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x206>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f001 f806 	bl	8006208 <I2C_Slave_STOPF>
 80051fc:	e04c      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051fe:	7bbb      	ldrb	r3, [r7, #14]
 8005200:	2b21      	cmp	r3, #33	@ 0x21
 8005202:	d002      	beq.n	800520a <HAL_I2C_EV_IRQHandler+0x212>
 8005204:	7bbb      	ldrb	r3, [r7, #14]
 8005206:	2b29      	cmp	r3, #41	@ 0x29
 8005208:	d120      	bne.n	800524c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <HAL_I2C_EV_IRQHandler+0x238>
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_I2C_EV_IRQHandler+0x238>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fee7 	bl	8005ffc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800522e:	e032      	b.n	8005296 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d02d      	beq.n	8005296 <HAL_I2C_EV_IRQHandler+0x29e>
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005240:	2b00      	cmp	r3, #0
 8005242:	d028      	beq.n	8005296 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 ff16 	bl	8006076 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800524a:	e024      	b.n	8005296 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <HAL_I2C_EV_IRQHandler+0x27a>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_I2C_EV_IRQHandler+0x27a>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 ff24 	bl	80060b8 <I2C_SlaveReceive_RXNE>
 8005270:	e012      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00d      	beq.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 ff54 	bl	8006134 <I2C_SlaveReceive_BTF>
 800528c:	e004      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005296:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005298:	3720      	adds	r7, #32
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b08a      	sub	sp, #40	@ 0x28
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <HAL_I2C_ER_IRQHandler+0x4a>
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <HAL_I2C_ER_IRQHandler+0x70>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800530c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005314:	2b00      	cmp	r3, #0
 8005316:	d03e      	beq.n	8005396 <HAL_I2C_ER_IRQHandler+0xf8>
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d039      	beq.n	8005396 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8005322:	7efb      	ldrb	r3, [r7, #27]
 8005324:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005334:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800533c:	7ebb      	ldrb	r3, [r7, #26]
 800533e:	2b20      	cmp	r3, #32
 8005340:	d112      	bne.n	8005368 <HAL_I2C_ER_IRQHandler+0xca>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10f      	bne.n	8005368 <HAL_I2C_ER_IRQHandler+0xca>
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	2b21      	cmp	r3, #33	@ 0x21
 800534c:	d008      	beq.n	8005360 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	2b29      	cmp	r3, #41	@ 0x29
 8005352:	d005      	beq.n	8005360 <HAL_I2C_ER_IRQHandler+0xc2>
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	2b28      	cmp	r3, #40	@ 0x28
 8005358:	d106      	bne.n	8005368 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b21      	cmp	r3, #33	@ 0x21
 800535e:	d103      	bne.n	8005368 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f001 f881 	bl	8006468 <I2C_Slave_AF>
 8005366:	e016      	b.n	8005396 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005370:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	f043 0304 	orr.w	r3, r3, #4
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800537a:	7efb      	ldrb	r3, [r7, #27]
 800537c:	2b10      	cmp	r3, #16
 800537e:	d002      	beq.n	8005386 <HAL_I2C_ER_IRQHandler+0xe8>
 8005380:	7efb      	ldrb	r3, [r7, #27]
 8005382:	2b40      	cmp	r3, #64	@ 0x40
 8005384:	d107      	bne.n	8005396 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005394:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00d      	beq.n	80053bc <HAL_I2C_ER_IRQHandler+0x11e>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	f043 0308 	orr.w	r3, r3, #8
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80053ba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 f8be 	bl	8006550 <I2C_ITError>
  }
}
 80053d4:	bf00      	nop
 80053d6:	3728      	adds	r7, #40	@ 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
 8005438:	4613      	mov	r3, r2
 800543a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d150      	bne.n	8005574 <I2C_MasterTransmit_TXE+0xc8>
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b21      	cmp	r3, #33	@ 0x21
 80054d6:	d14d      	bne.n	8005574 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d01d      	beq.n	800551a <I2C_MasterTransmit_TXE+0x6e>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d01a      	beq.n	800551a <I2C_MasterTransmit_TXE+0x6e>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054ea:	d016      	beq.n	800551a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2211      	movs	r2, #17
 8005500:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ff62 	bl	80053dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005518:	e060      	b.n	80055dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005528:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005538:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b40      	cmp	r3, #64	@ 0x40
 8005552:	d107      	bne.n	8005564 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff ff7d 	bl	800545c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005562:	e03b      	b.n	80055dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ff35 	bl	80053dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005572:	e033      	b.n	80055dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b21      	cmp	r3, #33	@ 0x21
 8005578:	d005      	beq.n	8005586 <I2C_MasterTransmit_TXE+0xda>
 800557a:	7bbb      	ldrb	r3, [r7, #14]
 800557c:	2b40      	cmp	r3, #64	@ 0x40
 800557e:	d12d      	bne.n	80055dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	2b22      	cmp	r3, #34	@ 0x22
 8005584:	d12a      	bne.n	80055dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055a0:	e01c      	b.n	80055dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b40      	cmp	r3, #64	@ 0x40
 80055ac:	d103      	bne.n	80055b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f88e 	bl	80056d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80055b4:	e012      	b.n	80055dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80055da:	e7ff      	b.n	80055dc <I2C_MasterTransmit_TXE+0x130>
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b21      	cmp	r3, #33	@ 0x21
 80055fc:	d164      	bne.n	80056c8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d012      	beq.n	800562e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800562c:	e04c      	b.n	80056c8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b08      	cmp	r3, #8
 8005632:	d01d      	beq.n	8005670 <I2C_MasterTransmit_BTF+0x8c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b20      	cmp	r3, #32
 8005638:	d01a      	beq.n	8005670 <I2C_MasterTransmit_BTF+0x8c>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005640:	d016      	beq.n	8005670 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005650:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2211      	movs	r2, #17
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff feb7 	bl	80053dc <HAL_I2C_MasterTxCpltCallback>
}
 800566e:	e02b      	b.n	80056c8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800567e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b40      	cmp	r3, #64	@ 0x40
 80056a8:	d107      	bne.n	80056ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff fed2 	bl	800545c <HAL_I2C_MemTxCpltCallback>
}
 80056b8:	e006      	b.n	80056c8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff fe8a 	bl	80053dc <HAL_I2C_MasterTxCpltCallback>
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d11d      	bne.n	8005724 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10b      	bne.n	8005708 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005700:	1c9a      	adds	r2, r3, #2
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005706:	e077      	b.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570c:	b29b      	uxth	r3, r3
 800570e:	121b      	asrs	r3, r3, #8
 8005710:	b2da      	uxtb	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005722:	e069      	b.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10b      	bne.n	8005744 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005730:	b2da      	uxtb	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005742:	e059      	b.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005748:	2b02      	cmp	r3, #2
 800574a:	d152      	bne.n	80057f2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b22      	cmp	r3, #34	@ 0x22
 8005750:	d10d      	bne.n	800576e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005760:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800576c:	e044      	b.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d015      	beq.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	2b21      	cmp	r3, #33	@ 0x21
 800577c:	d112      	bne.n	80057a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	781a      	ldrb	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80057a2:	e029      	b.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d124      	bne.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b21      	cmp	r3, #33	@ 0x21
 80057b2:	d121      	bne.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fe36 	bl	800545c <HAL_I2C_MemTxCpltCallback>
}
 80057f0:	e002      	b.n	80057f8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff f8ba 	bl	800496c <I2C_Flush_DR>
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b22      	cmp	r3, #34	@ 0x22
 8005812:	f040 80b9 	bne.w	8005988 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d921      	bls.n	800586e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b03      	cmp	r3, #3
 8005858:	f040 8096 	bne.w	8005988 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800586c:	e08c      	b.n	8005988 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005872:	2b02      	cmp	r3, #2
 8005874:	d07f      	beq.n	8005976 <I2C_MasterReceive_RXNE+0x176>
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d002      	beq.n	8005882 <I2C_MasterReceive_RXNE+0x82>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d179      	bne.n	8005976 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fb38 	bl	8006ef8 <I2C_WaitOnSTOPRequestThroughIT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d14c      	bne.n	8005928 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d10a      	bne.n	80058fe <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff fdba 	bl	8005470 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058fc:	e044      	b.n	8005988 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d002      	beq.n	8005912 <I2C_MasterReceive_RXNE+0x112>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b20      	cmp	r3, #32
 8005910:	d103      	bne.n	800591a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
 8005918:	e002      	b.n	8005920 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2212      	movs	r2, #18
 800591e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fd65 	bl	80053f0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005926:	e02f      	b.n	8005988 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005936:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff fd88 	bl	8005484 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005974:	e008      	b.n	8005988 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005984:	605a      	str	r2, [r3, #4]
}
 8005986:	e7ff      	b.n	8005988 <I2C_MasterReceive_RXNE+0x188>
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d11b      	bne.n	80059e0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80059de:	e0c8      	b.n	8005b72 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d129      	bne.n	8005a3e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d00a      	beq.n	8005a16 <I2C_MasterReceive_BTF+0x86>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d007      	beq.n	8005a16 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a14:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005a3c:	e099      	b.n	8005b72 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f040 8081 	bne.w	8005b4c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d002      	beq.n	8005a56 <I2C_MasterReceive_BTF+0xc6>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d108      	bne.n	8005a68 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e019      	b.n	8005a9c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d002      	beq.n	8005a74 <I2C_MasterReceive_BTF+0xe4>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d108      	bne.n	8005a86 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	e00a      	b.n	8005a9c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d007      	beq.n	8005a9c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691a      	ldr	r2, [r3, #16]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	b2d2      	uxtb	r2, r2
 8005aa8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005af6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b40      	cmp	r3, #64	@ 0x40
 8005b0a:	d10a      	bne.n	8005b22 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fca8 	bl	8005470 <HAL_I2C_MemRxCpltCallback>
}
 8005b20:	e027      	b.n	8005b72 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d002      	beq.n	8005b36 <I2C_MasterReceive_BTF+0x1a6>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d103      	bne.n	8005b3e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b3c:	e002      	b.n	8005b44 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2212      	movs	r2, #18
 8005b42:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7ff fc53 	bl	80053f0 <HAL_I2C_MasterRxCpltCallback>
}
 8005b4a:	e012      	b.n	8005b72 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b40      	cmp	r3, #64	@ 0x40
 8005b8c:	d117      	bne.n	8005bbe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ba6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ba8:	e067      	b.n	8005c7a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	611a      	str	r2, [r3, #16]
}
 8005bbc:	e05d      	b.n	8005c7a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bc6:	d133      	bne.n	8005c30 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b21      	cmp	r3, #33	@ 0x21
 8005bd2:	d109      	bne.n	8005be8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	e008      	b.n	8005bfa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <I2C_Master_SB+0x92>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d032      	beq.n	8005c7a <I2C_Master_SB+0x100>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d02d      	beq.n	8005c7a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c2c:	605a      	str	r2, [r3, #4]
}
 8005c2e:	e024      	b.n	8005c7a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10e      	bne.n	8005c56 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	11db      	asrs	r3, r3, #7
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	f003 0306 	and.w	r3, r3, #6
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f063 030f 	orn	r3, r3, #15
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]
}
 8005c54:	e011      	b.n	8005c7a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d10d      	bne.n	8005c7a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	11db      	asrs	r3, r3, #7
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	f003 0306 	and.w	r3, r3, #6
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f063 030e 	orn	r3, r3, #14
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	611a      	str	r2, [r3, #16]
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <I2C_Master_ADD10+0x26>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <I2C_Master_ADD10+0x48>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ccc:	605a      	str	r2, [r3, #4]
  }
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b091      	sub	sp, #68	@ 0x44
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ce8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b22      	cmp	r3, #34	@ 0x22
 8005d02:	f040 8169 	bne.w	8005fd8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10f      	bne.n	8005d2e <I2C_Master_ADDR+0x54>
 8005d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d12:	2b40      	cmp	r3, #64	@ 0x40
 8005d14:	d10b      	bne.n	8005d2e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d16:	2300      	movs	r3, #0
 8005d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	e160      	b.n	8005ff0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d11d      	bne.n	8005d72 <I2C_Master_ADDR+0x98>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d3e:	d118      	bne.n	8005d72 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d40:	2300      	movs	r3, #0
 8005d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d64:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d70:	e13e      	b.n	8005ff0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d113      	bne.n	8005da4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e115      	b.n	8005fd0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	f040 808a 	bne.w	8005ec4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005db6:	d137      	bne.n	8005e28 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dd6:	d113      	bne.n	8005e00 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de8:	2300      	movs	r3, #0
 8005dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	e0e7      	b.n	8005fd0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e00:	2300      	movs	r3, #0
 8005e02:	623b      	str	r3, [r7, #32]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e0d3      	b.n	8005fd0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d02e      	beq.n	8005e8c <I2C_Master_ADDR+0x1b2>
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d02b      	beq.n	8005e8c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e36:	2b12      	cmp	r3, #18
 8005e38:	d102      	bne.n	8005e40 <I2C_Master_ADDR+0x166>
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d125      	bne.n	8005e8c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d00e      	beq.n	8005e64 <I2C_Master_ADDR+0x18a>
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d00b      	beq.n	8005e64 <I2C_Master_ADDR+0x18a>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d008      	beq.n	8005e64 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e007      	b.n	8005e74 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e72:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	e0a1      	b.n	8005fd0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e9a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61bb      	str	r3, [r7, #24]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	61bb      	str	r3, [r7, #24]
 8005eb0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e085      	b.n	8005fd0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d14d      	bne.n	8005f6a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d016      	beq.n	8005f02 <I2C_Master_ADDR+0x228>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d013      	beq.n	8005f02 <I2C_Master_ADDR+0x228>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d010      	beq.n	8005f02 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e007      	b.n	8005f12 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f10:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f20:	d117      	bne.n	8005f52 <I2C_Master_ADDR+0x278>
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f28:	d00b      	beq.n	8005f42 <I2C_Master_ADDR+0x268>
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d008      	beq.n	8005f42 <I2C_Master_ADDR+0x268>
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d005      	beq.n	8005f42 <I2C_Master_ADDR+0x268>
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d002      	beq.n	8005f42 <I2C_Master_ADDR+0x268>
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d107      	bne.n	8005f52 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	e032      	b.n	8005fd0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f78:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f88:	d117      	bne.n	8005fba <I2C_Master_ADDR+0x2e0>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f90:	d00b      	beq.n	8005faa <I2C_Master_ADDR+0x2d0>
 8005f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d008      	beq.n	8005faa <I2C_Master_ADDR+0x2d0>
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d005      	beq.n	8005faa <I2C_Master_ADDR+0x2d0>
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d002      	beq.n	8005faa <I2C_Master_ADDR+0x2d0>
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d107      	bne.n	8005fba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fb8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	613b      	str	r3, [r7, #16]
 8005fce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005fd6:	e00b      	b.n	8005ff0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	e7ff      	b.n	8005ff0 <I2C_Master_ADDR+0x316>
 8005ff0:	bf00      	nop
 8005ff2:	3744      	adds	r7, #68	@ 0x44
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d02b      	beq.n	800606e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	d114      	bne.n	800606e <I2C_SlaveTransmit_TXE+0x72>
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	2b29      	cmp	r3, #41	@ 0x29
 8006048:	d111      	bne.n	800606e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006058:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2221      	movs	r2, #33	@ 0x21
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2228      	movs	r2, #40	@ 0x28
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff f9cb 	bl	8005404 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d011      	beq.n	80060ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608c:	781a      	ldrb	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d02c      	beq.n	800612c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691a      	ldr	r2, [r3, #16]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d114      	bne.n	800612c <I2C_SlaveReceive_RXNE+0x74>
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b2a      	cmp	r3, #42	@ 0x2a
 8006106:	d111      	bne.n	800612c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006116:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2222      	movs	r2, #34	@ 0x22
 800611c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2228      	movs	r2, #40	@ 0x28
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff f976 	bl	8005418 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d012      	beq.n	800616c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006192:	2b28      	cmp	r3, #40	@ 0x28
 8006194:	d125      	bne.n	80061e2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	81bb      	strh	r3, [r7, #12]
 80061c4:	e002      	b.n	80061cc <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80061d4:	89ba      	ldrh	r2, [r7, #12]
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff f926 	bl	800542c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80061e0:	e00e      	b.n	8006200 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	60bb      	str	r3, [r7, #8]
 80061f6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006216:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006226:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006228:	2300      	movs	r3, #0
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006254:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006264:	d172      	bne.n	800634c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	2b22      	cmp	r3, #34	@ 0x22
 800626a:	d002      	beq.n	8006272 <I2C_Slave_STOPF+0x6a>
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006270:	d135      	bne.n	80062de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	f043 0204 	orr.w	r2, r3, #4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f855 	bl	800435a <HAL_DMA_GetState>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d049      	beq.n	800634a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ba:	4a69      	ldr	r2, [pc, #420]	@ (8006460 <I2C_Slave_STOPF+0x258>)
 80062bc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe f827 	bl	8004316 <HAL_DMA_Abort_IT>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d03d      	beq.n	800634a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062dc:	e035      	b.n	800634a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	f043 0204 	orr.w	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006310:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe f81f 	bl	800435a <HAL_DMA_GetState>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d014      	beq.n	800634c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006326:	4a4e      	ldr	r2, [pc, #312]	@ (8006460 <I2C_Slave_STOPF+0x258>)
 8006328:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd fff1 	bl	8004316 <HAL_DMA_Abort_IT>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006344:	4610      	mov	r0, r2
 8006346:	4798      	blx	r3
 8006348:	e000      	b.n	800634c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800634a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d03e      	beq.n	80063d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d112      	bne.n	800638a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b40      	cmp	r3, #64	@ 0x40
 8006396:	d112      	bne.n	80063be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	f043 0204 	orr.w	r2, r3, #4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f8b7 	bl	8006550 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80063e2:	e039      	b.n	8006458 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80063e8:	d109      	bne.n	80063fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2228      	movs	r2, #40	@ 0x28
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff f80d 	bl	8005418 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b28      	cmp	r3, #40	@ 0x28
 8006408:	d111      	bne.n	800642e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a15      	ldr	r2, [pc, #84]	@ (8006464 <I2C_Slave_STOPF+0x25c>)
 800640e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7ff f80e 	bl	8005448 <HAL_I2C_ListenCpltCallback>
}
 800642c:	e014      	b.n	8006458 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	2b22      	cmp	r3, #34	@ 0x22
 8006434:	d002      	beq.n	800643c <I2C_Slave_STOPF+0x234>
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b22      	cmp	r3, #34	@ 0x22
 800643a:	d10d      	bne.n	8006458 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fe ffe0 	bl	8005418 <HAL_I2C_SlaveRxCpltCallback>
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	08006a55 	.word	0x08006a55
 8006464:	ffff0000 	.word	0xffff0000

08006468 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006476:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b08      	cmp	r3, #8
 8006482:	d002      	beq.n	800648a <I2C_Slave_AF+0x22>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b20      	cmp	r3, #32
 8006488:	d129      	bne.n	80064de <I2C_Slave_AF+0x76>
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	2b28      	cmp	r3, #40	@ 0x28
 800648e:	d126      	bne.n	80064de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a2e      	ldr	r2, [pc, #184]	@ (800654c <I2C_Slave_AF+0xe4>)
 8006494:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80064a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fe ffb6 	bl	8005448 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80064dc:	e031      	b.n	8006542 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b21      	cmp	r3, #33	@ 0x21
 80064e2:	d129      	bne.n	8006538 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a19      	ldr	r2, [pc, #100]	@ (800654c <I2C_Slave_AF+0xe4>)
 80064e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2221      	movs	r2, #33	@ 0x21
 80064ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800650e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006518:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006528:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fe fa1e 	bl	800496c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fe ff67 	bl	8005404 <HAL_I2C_SlaveTxCpltCallback>
}
 8006536:	e004      	b.n	8006542 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006540:	615a      	str	r2, [r3, #20]
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	ffff0000 	.word	0xffff0000

08006550 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006566:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	2b10      	cmp	r3, #16
 800656c:	d002      	beq.n	8006574 <I2C_ITError+0x24>
 800656e:	7bbb      	ldrb	r3, [r7, #14]
 8006570:	2b40      	cmp	r3, #64	@ 0x40
 8006572:	d10a      	bne.n	800658a <I2C_ITError+0x3a>
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	2b22      	cmp	r3, #34	@ 0x22
 8006578:	d107      	bne.n	800658a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006588:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006590:	2b28      	cmp	r3, #40	@ 0x28
 8006592:	d107      	bne.n	80065a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2228      	movs	r2, #40	@ 0x28
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80065a2:	e015      	b.n	80065d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b2:	d00a      	beq.n	80065ca <I2C_ITError+0x7a>
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
 80065b6:	2b60      	cmp	r3, #96	@ 0x60
 80065b8:	d007      	beq.n	80065ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2220      	movs	r2, #32
 80065be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065de:	d162      	bne.n	80066a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d020      	beq.n	8006640 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006602:	4a6a      	ldr	r2, [pc, #424]	@ (80067ac <I2C_ITError+0x25c>)
 8006604:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800660a:	4618      	mov	r0, r3
 800660c:	f7fd fe83 	bl	8004316 <HAL_DMA_Abort_IT>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 8089 	beq.w	800672a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0201 	bic.w	r2, r2, #1
 8006626:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800663a:	4610      	mov	r0, r2
 800663c:	4798      	blx	r3
 800663e:	e074      	b.n	800672a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	4a59      	ldr	r2, [pc, #356]	@ (80067ac <I2C_ITError+0x25c>)
 8006646:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664c:	4618      	mov	r0, r3
 800664e:	f7fd fe62 	bl	8004316 <HAL_DMA_Abort_IT>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d068      	beq.n	800672a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006662:	2b40      	cmp	r3, #64	@ 0x40
 8006664:	d10b      	bne.n	800667e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	e041      	b.n	800672a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b60      	cmp	r3, #96	@ 0x60
 80066b0:	d125      	bne.n	80066fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ca:	2b40      	cmp	r3, #64	@ 0x40
 80066cc:	d10b      	bne.n	80066e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fe fece 	bl	8005498 <HAL_I2C_AbortCpltCallback>
 80066fc:	e015      	b.n	800672a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d10b      	bne.n	8006724 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fe fead 	bl	8005484 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10e      	bne.n	8006758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800674a:	2b00      	cmp	r3, #0
 800674c:	d104      	bne.n	8006758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800676e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d113      	bne.n	80067a4 <I2C_ITError+0x254>
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	2b28      	cmp	r3, #40	@ 0x28
 8006780:	d110      	bne.n	80067a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a0a      	ldr	r2, [pc, #40]	@ (80067b0 <I2C_ITError+0x260>)
 8006786:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fe fe52 	bl	8005448 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	08006a55 	.word	0x08006a55
 80067b0:	ffff0000 	.word	0xffff0000

080067b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
 80067c0:	460b      	mov	r3, r1
 80067c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d006      	beq.n	80067de <I2C_MasterRequestWrite+0x2a>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d003      	beq.n	80067de <I2C_MasterRequestWrite+0x2a>
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067dc:	d108      	bne.n	80067f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e00b      	b.n	8006808 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	2b12      	cmp	r3, #18
 80067f6:	d107      	bne.n	8006808 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006806:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f9c5 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800682e:	d103      	bne.n	8006838 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006836:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e035      	b.n	80068a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006844:	d108      	bne.n	8006858 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006846:	897b      	ldrh	r3, [r7, #10]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006854:	611a      	str	r2, [r3, #16]
 8006856:	e01b      	b.n	8006890 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006858:	897b      	ldrh	r3, [r7, #10]
 800685a:	11db      	asrs	r3, r3, #7
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0306 	and.w	r3, r3, #6
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f063 030f 	orn	r3, r3, #15
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	490e      	ldr	r1, [pc, #56]	@ (80068b0 <I2C_MasterRequestWrite+0xfc>)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fa0e 	bl	8006c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e010      	b.n	80068a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006886:	897b      	ldrh	r3, [r7, #10]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4907      	ldr	r1, [pc, #28]	@ (80068b4 <I2C_MasterRequestWrite+0x100>)
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f9fe 	bl	8006c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	00010008 	.word	0x00010008
 80068b4:	00010002 	.word	0x00010002

080068b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af02      	add	r7, sp, #8
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	460b      	mov	r3, r1
 80068c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d006      	beq.n	80068f2 <I2C_MasterRequestRead+0x3a>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d003      	beq.n	80068f2 <I2C_MasterRequestRead+0x3a>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068f0:	d108      	bne.n	8006904 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e00b      	b.n	800691c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	2b11      	cmp	r3, #17
 800690a:	d107      	bne.n	800691c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800691a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f93b 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006942:	d103      	bne.n	800694c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800694a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e079      	b.n	8006a44 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006958:	d108      	bne.n	800696c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800695a:	897b      	ldrh	r3, [r7, #10]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f043 0301 	orr.w	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	611a      	str	r2, [r3, #16]
 800696a:	e05f      	b.n	8006a2c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800696c:	897b      	ldrh	r3, [r7, #10]
 800696e:	11db      	asrs	r3, r3, #7
 8006970:	b2db      	uxtb	r3, r3
 8006972:	f003 0306 	and.w	r3, r3, #6
 8006976:	b2db      	uxtb	r3, r3
 8006978:	f063 030f 	orn	r3, r3, #15
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	4930      	ldr	r1, [pc, #192]	@ (8006a4c <I2C_MasterRequestRead+0x194>)
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 f984 	bl	8006c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e054      	b.n	8006a44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800699a:	897b      	ldrh	r3, [r7, #10]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4929      	ldr	r1, [pc, #164]	@ (8006a50 <I2C_MasterRequestRead+0x198>)
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f974 	bl	8006c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e044      	b.n	8006a44 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ba:	2300      	movs	r3, #0
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	613b      	str	r3, [r7, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f8d9 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00d      	beq.n	8006a14 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a06:	d103      	bne.n	8006a10 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e017      	b.n	8006a44 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a14:	897b      	ldrh	r3, [r7, #10]
 8006a16:	11db      	asrs	r3, r3, #7
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f003 0306 	and.w	r3, r3, #6
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f063 030e 	orn	r3, r3, #14
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4907      	ldr	r1, [pc, #28]	@ (8006a50 <I2C_MasterRequestRead+0x198>)
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f930 	bl	8006c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	00010008 	.word	0x00010008
 8006a50:	00010002 	.word	0x00010002

08006a54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a6e:	4b4b      	ldr	r3, [pc, #300]	@ (8006b9c <I2C_DMAAbort+0x148>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	08db      	lsrs	r3, r3, #3
 8006a74:	4a4a      	ldr	r2, [pc, #296]	@ (8006ba0 <I2C_DMAAbort+0x14c>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	0a1a      	lsrs	r2, r3, #8
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	00da      	lsls	r2, r3, #3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a92:	f043 0220 	orr.w	r2, r3, #32
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006a9a:	e00a      	b.n	8006ab2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d0ea      	beq.n	8006a88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006abe:	2200      	movs	r2, #0
 8006ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ace:	2200      	movs	r2, #0
 8006ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ae0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af4:	2200      	movs	r2, #0
 8006af6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b04:	2200      	movs	r2, #0
 8006b06:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b60      	cmp	r3, #96	@ 0x60
 8006b22:	d10e      	bne.n	8006b42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2200      	movs	r2, #0
 8006b38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b3a:	6978      	ldr	r0, [r7, #20]
 8006b3c:	f7fe fcac 	bl	8005498 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b40:	e027      	b.n	8006b92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b42:	7cfb      	ldrb	r3, [r7, #19]
 8006b44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b48:	2b28      	cmp	r3, #40	@ 0x28
 8006b4a:	d117      	bne.n	8006b7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0201 	orr.w	r2, r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2228      	movs	r2, #40	@ 0x28
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b7a:	e007      	b.n	8006b8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006b8c:	6978      	ldr	r0, [r7, #20]
 8006b8e:	f7fe fc79 	bl	8005484 <HAL_I2C_ErrorCallback>
}
 8006b92:	bf00      	nop
 8006b94:	3718      	adds	r7, #24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2000002c 	.word	0x2000002c
 8006ba0:	14f8b589 	.word	0x14f8b589

08006ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb4:	e048      	b.n	8006c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d044      	beq.n	8006c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bbe:	f7fd f9f9 	bl	8003fb4 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d302      	bcc.n	8006bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d139      	bne.n	8006c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	0c1b      	lsrs	r3, r3, #16
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d10d      	bne.n	8006bfa <I2C_WaitOnFlagUntilTimeout+0x56>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	43da      	mvns	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	4013      	ands	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	e00c      	b.n	8006c14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	43da      	mvns	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4013      	ands	r3, r2
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d116      	bne.n	8006c48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c34:	f043 0220 	orr.w	r2, r3, #32
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e023      	b.n	8006c90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	0c1b      	lsrs	r3, r3, #16
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10d      	bne.n	8006c6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	43da      	mvns	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	bf0c      	ite	eq
 8006c64:	2301      	moveq	r3, #1
 8006c66:	2300      	movne	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	e00c      	b.n	8006c88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	43da      	mvns	r2, r3
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d093      	beq.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ca6:	e071      	b.n	8006d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cb6:	d123      	bne.n	8006d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cec:	f043 0204 	orr.w	r2, r3, #4
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e067      	b.n	8006dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d041      	beq.n	8006d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d08:	f7fd f954 	bl	8003fb4 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d302      	bcc.n	8006d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d136      	bne.n	8006d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	0c1b      	lsrs	r3, r3, #16
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10c      	bne.n	8006d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	43da      	mvns	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bf14      	ite	ne
 8006d3a:	2301      	movne	r3, #1
 8006d3c:	2300      	moveq	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	e00b      	b.n	8006d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	43da      	mvns	r2, r3
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bf14      	ite	ne
 8006d54:	2301      	movne	r3, #1
 8006d56:	2300      	moveq	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	f043 0220 	orr.w	r2, r3, #32
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e021      	b.n	8006dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	0c1b      	lsrs	r3, r3, #16
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d10c      	bne.n	8006db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	43da      	mvns	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4013      	ands	r3, r2
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e00b      	b.n	8006dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	43da      	mvns	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f47f af6d 	bne.w	8006ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006de4:	e034      	b.n	8006e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f915 	bl	8007016 <I2C_IsAcknowledgeFailed>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e034      	b.n	8006e60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d028      	beq.n	8006e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfe:	f7fd f8d9 	bl	8003fb4 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d302      	bcc.n	8006e14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d11d      	bne.n	8006e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e1e:	2b80      	cmp	r3, #128	@ 0x80
 8006e20:	d016      	beq.n	8006e50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3c:	f043 0220 	orr.w	r2, r3, #32
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e007      	b.n	8006e60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e5a:	2b80      	cmp	r3, #128	@ 0x80
 8006e5c:	d1c3      	bne.n	8006de6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e74:	e034      	b.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f000 f8cd 	bl	8007016 <I2C_IsAcknowledgeFailed>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e034      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8c:	d028      	beq.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e8e:	f7fd f891 	bl	8003fb4 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d302      	bcc.n	8006ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d11d      	bne.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d016      	beq.n	8006ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e007      	b.n	8006ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0304 	and.w	r3, r3, #4
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d1c3      	bne.n	8006e76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f04:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	4a13      	ldr	r2, [pc, #76]	@ (8006f58 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	0a1a      	lsrs	r2, r3, #8
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d107      	bne.n	8006f36 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	f043 0220 	orr.w	r2, r3, #32
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e008      	b.n	8006f48 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f44:	d0e9      	beq.n	8006f1a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	2000002c 	.word	0x2000002c
 8006f58:	14f8b589 	.word	0x14f8b589

08006f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f68:	e049      	b.n	8006ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d119      	bne.n	8006fac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0210 	mvn.w	r2, #16
 8006f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e030      	b.n	800700e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fac:	f7fd f802 	bl	8003fb4 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d11d      	bne.n	8006ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fcc:	2b40      	cmp	r3, #64	@ 0x40
 8006fce:	d016      	beq.n	8006ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	f043 0220 	orr.w	r2, r3, #32
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e007      	b.n	800700e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007008:	2b40      	cmp	r3, #64	@ 0x40
 800700a:	d1ae      	bne.n	8006f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800702c:	d11b      	bne.n	8007066 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007036:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	f043 0204 	orr.w	r2, r3, #4
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007080:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007084:	d103      	bne.n	800708e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800708c:	e007      	b.n	800709e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007092:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007096:	d102      	bne.n	800709e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2208      	movs	r2, #8
 800709c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e267      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d075      	beq.n	80071b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070ca:	4b88      	ldr	r3, [pc, #544]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d00c      	beq.n	80070f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070d6:	4b85      	ldr	r3, [pc, #532]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d112      	bne.n	8007108 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070e2:	4b82      	ldr	r3, [pc, #520]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ee:	d10b      	bne.n	8007108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	4b7e      	ldr	r3, [pc, #504]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d05b      	beq.n	80071b4 <HAL_RCC_OscConfig+0x108>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d157      	bne.n	80071b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e242      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007110:	d106      	bne.n	8007120 <HAL_RCC_OscConfig+0x74>
 8007112:	4b76      	ldr	r3, [pc, #472]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a75      	ldr	r2, [pc, #468]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e01d      	b.n	800715c <HAL_RCC_OscConfig+0xb0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007128:	d10c      	bne.n	8007144 <HAL_RCC_OscConfig+0x98>
 800712a:	4b70      	ldr	r3, [pc, #448]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a6f      	ldr	r2, [pc, #444]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4b6d      	ldr	r3, [pc, #436]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6c      	ldr	r2, [pc, #432]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00b      	b.n	800715c <HAL_RCC_OscConfig+0xb0>
 8007144:	4b69      	ldr	r3, [pc, #420]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a68      	ldr	r2, [pc, #416]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800714a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4b66      	ldr	r3, [pc, #408]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a65      	ldr	r2, [pc, #404]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800715a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007164:	f7fc ff26 	bl	8003fb4 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800716c:	f7fc ff22 	bl	8003fb4 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b64      	cmp	r3, #100	@ 0x64
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e207      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717e:	4b5b      	ldr	r3, [pc, #364]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCC_OscConfig+0xc0>
 800718a:	e014      	b.n	80071b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718c:	f7fc ff12 	bl	8003fb4 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007194:	f7fc ff0e 	bl	8003fb4 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	@ 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e1f3      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071a6:	4b51      	ldr	r3, [pc, #324]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0xe8>
 80071b2:	e000      	b.n	80071b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d063      	beq.n	800728a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071c2:	4b4a      	ldr	r3, [pc, #296]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ce:	4b47      	ldr	r3, [pc, #284]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d11c      	bne.n	8007214 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071da:	4b44      	ldr	r3, [pc, #272]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d116      	bne.n	8007214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071e6:	4b41      	ldr	r3, [pc, #260]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_RCC_OscConfig+0x152>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d001      	beq.n	80071fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e1c7      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	4b3b      	ldr	r3, [pc, #236]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4937      	ldr	r1, [pc, #220]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007212:	e03a      	b.n	800728a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d020      	beq.n	800725e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800721c:	4b34      	ldr	r3, [pc, #208]	@ (80072f0 <HAL_RCC_OscConfig+0x244>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007222:	f7fc fec7 	bl	8003fb4 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722a:	f7fc fec3 	bl	8003fb4 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e1a8      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723c:	4b2b      	ldr	r3, [pc, #172]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007248:	4b28      	ldr	r3, [pc, #160]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4925      	ldr	r1, [pc, #148]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007258:	4313      	orrs	r3, r2
 800725a:	600b      	str	r3, [r1, #0]
 800725c:	e015      	b.n	800728a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800725e:	4b24      	ldr	r3, [pc, #144]	@ (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fc fea6 	bl	8003fb4 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726c:	f7fc fea2 	bl	8003fb4 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e187      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d036      	beq.n	8007304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729e:	4b15      	ldr	r3, [pc, #84]	@ (80072f4 <HAL_RCC_OscConfig+0x248>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fc fe86 	bl	8003fb4 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ac:	f7fc fe82 	bl	8003fb4 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e167      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80072c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0x200>
 80072ca:	e01b      	b.n	8007304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072cc:	4b09      	ldr	r3, [pc, #36]	@ (80072f4 <HAL_RCC_OscConfig+0x248>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072d2:	f7fc fe6f 	bl	8003fb4 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d8:	e00e      	b.n	80072f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072da:	f7fc fe6b 	bl	8003fb4 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d907      	bls.n	80072f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e150      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
 80072ec:	40023800 	.word	0x40023800
 80072f0:	42470000 	.word	0x42470000
 80072f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f8:	4b88      	ldr	r3, [pc, #544]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80072fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1ea      	bne.n	80072da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8097 	beq.w	8007440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007316:	4b81      	ldr	r3, [pc, #516]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	4b7d      	ldr	r3, [pc, #500]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	4a7c      	ldr	r2, [pc, #496]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007330:	6413      	str	r3, [r2, #64]	@ 0x40
 8007332:	4b7a      	ldr	r3, [pc, #488]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733e:	2301      	movs	r3, #1
 8007340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007342:	4b77      	ldr	r3, [pc, #476]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d118      	bne.n	8007380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734e:	4b74      	ldr	r3, [pc, #464]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a73      	ldr	r2, [pc, #460]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800735a:	f7fc fe2b 	bl	8003fb4 <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fc fe27 	bl	8003fb4 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e10c      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007374:	4b6a      	ldr	r3, [pc, #424]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0f0      	beq.n	8007362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d106      	bne.n	8007396 <HAL_RCC_OscConfig+0x2ea>
 8007388:	4b64      	ldr	r3, [pc, #400]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738c:	4a63      	ldr	r2, [pc, #396]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	6713      	str	r3, [r2, #112]	@ 0x70
 8007394:	e01c      	b.n	80073d0 <HAL_RCC_OscConfig+0x324>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b05      	cmp	r3, #5
 800739c:	d10c      	bne.n	80073b8 <HAL_RCC_OscConfig+0x30c>
 800739e:	4b5f      	ldr	r3, [pc, #380]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	4a5e      	ldr	r2, [pc, #376]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073aa:	4b5c      	ldr	r3, [pc, #368]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ae:	4a5b      	ldr	r2, [pc, #364]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b6:	e00b      	b.n	80073d0 <HAL_RCC_OscConfig+0x324>
 80073b8:	4b58      	ldr	r3, [pc, #352]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073bc:	4a57      	ldr	r2, [pc, #348]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c4:	4b55      	ldr	r3, [pc, #340]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c8:	4a54      	ldr	r2, [pc, #336]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073ca:	f023 0304 	bic.w	r3, r3, #4
 80073ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d015      	beq.n	8007404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d8:	f7fc fdec 	bl	8003fb4 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e0:	f7fc fde8 	bl	8003fb4 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e0cb      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f6:	4b49      	ldr	r3, [pc, #292]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0ee      	beq.n	80073e0 <HAL_RCC_OscConfig+0x334>
 8007402:	e014      	b.n	800742e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007404:	f7fc fdd6 	bl	8003fb4 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800740a:	e00a      	b.n	8007422 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740c:	f7fc fdd2 	bl	8003fb4 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e0b5      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007422:	4b3e      	ldr	r3, [pc, #248]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1ee      	bne.n	800740c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d105      	bne.n	8007440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007434:	4b39      	ldr	r3, [pc, #228]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007438:	4a38      	ldr	r2, [pc, #224]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800743e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80a1 	beq.w	800758c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800744a:	4b34      	ldr	r3, [pc, #208]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 030c 	and.w	r3, r3, #12
 8007452:	2b08      	cmp	r3, #8
 8007454:	d05c      	beq.n	8007510 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d141      	bne.n	80074e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745e:	4b31      	ldr	r3, [pc, #196]	@ (8007524 <HAL_RCC_OscConfig+0x478>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007464:	f7fc fda6 	bl	8003fb4 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746c:	f7fc fda2 	bl	8003fb4 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e087      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747e:	4b27      	ldr	r3, [pc, #156]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	019b      	lsls	r3, r3, #6
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	3b01      	subs	r3, #1
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	061b      	lsls	r3, r3, #24
 80074ae:	491b      	ldr	r1, [pc, #108]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007524 <HAL_RCC_OscConfig+0x478>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ba:	f7fc fd7b 	bl	8003fb4 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c2:	f7fc fd77 	bl	8003fb4 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e05c      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d4:	4b11      	ldr	r3, [pc, #68]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x416>
 80074e0:	e054      	b.n	800758c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e2:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <HAL_RCC_OscConfig+0x478>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fc fd64 	bl	8003fb4 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fc fd60 	bl	8003fb4 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e045      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x444>
 800750e:	e03d      	b.n	800758c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d107      	bne.n	8007528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e038      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
 800751c:	40023800 	.word	0x40023800
 8007520:	40007000 	.word	0x40007000
 8007524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007528:	4b1b      	ldr	r3, [pc, #108]	@ (8007598 <HAL_RCC_OscConfig+0x4ec>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d028      	beq.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d121      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d11a      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800755e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007560:	4293      	cmp	r3, r2
 8007562:	d111      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	3b01      	subs	r3, #1
 8007572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d107      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d001      	beq.n	800758c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800

0800759c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0cc      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075b0:	4b68      	ldr	r3, [pc, #416]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d90c      	bls.n	80075d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075be:	4b65      	ldr	r3, [pc, #404]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c6:	4b63      	ldr	r3, [pc, #396]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d001      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0b8      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d020      	beq.n	8007626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075f0:	4b59      	ldr	r3, [pc, #356]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	4a58      	ldr	r2, [pc, #352]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007608:	4b53      	ldr	r3, [pc, #332]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a52      	ldr	r2, [pc, #328]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007614:	4b50      	ldr	r3, [pc, #320]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	494d      	ldr	r1, [pc, #308]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d044      	beq.n	80076bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d107      	bne.n	800764a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763a:	4b47      	ldr	r3, [pc, #284]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d119      	bne.n	800767a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e07f      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d003      	beq.n	800765a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007656:	2b03      	cmp	r3, #3
 8007658:	d107      	bne.n	800766a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765a:	4b3f      	ldr	r3, [pc, #252]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e06f      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766a:	4b3b      	ldr	r3, [pc, #236]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e067      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800767a:	4b37      	ldr	r3, [pc, #220]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 0203 	bic.w	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	4934      	ldr	r1, [pc, #208]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007688:	4313      	orrs	r3, r2
 800768a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800768c:	f7fc fc92 	bl	8003fb4 <HAL_GetTick>
 8007690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007692:	e00a      	b.n	80076aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007694:	f7fc fc8e 	bl	8003fb4 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e04f      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 020c 	and.w	r2, r3, #12
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d1eb      	bne.n	8007694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076bc:	4b25      	ldr	r3, [pc, #148]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d20c      	bcs.n	80076e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ca:	4b22      	ldr	r3, [pc, #136]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d2:	4b20      	ldr	r3, [pc, #128]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e032      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f0:	4b19      	ldr	r3, [pc, #100]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4916      	ldr	r1, [pc, #88]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800770e:	4b12      	ldr	r3, [pc, #72]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	490e      	ldr	r1, [pc, #56]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007722:	f000 f821 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 8007726:	4602      	mov	r2, r0
 8007728:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	490a      	ldr	r1, [pc, #40]	@ (800775c <HAL_RCC_ClockConfig+0x1c0>)
 8007734:	5ccb      	ldrb	r3, [r1, r3]
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	4a09      	ldr	r2, [pc, #36]	@ (8007760 <HAL_RCC_ClockConfig+0x1c4>)
 800773c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800773e:	4b09      	ldr	r3, [pc, #36]	@ (8007764 <HAL_RCC_ClockConfig+0x1c8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f7fc fbf2 	bl	8003f2c <HAL_InitTick>

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40023c00 	.word	0x40023c00
 8007758:	40023800 	.word	0x40023800
 800775c:	08010120 	.word	0x08010120
 8007760:	2000002c 	.word	0x2000002c
 8007764:	20000030 	.word	0x20000030

08007768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800776c:	b094      	sub	sp, #80	@ 0x50
 800776e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007780:	4b79      	ldr	r3, [pc, #484]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 030c 	and.w	r3, r3, #12
 8007788:	2b08      	cmp	r3, #8
 800778a:	d00d      	beq.n	80077a8 <HAL_RCC_GetSysClockFreq+0x40>
 800778c:	2b08      	cmp	r3, #8
 800778e:	f200 80e1 	bhi.w	8007954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0x34>
 8007796:	2b04      	cmp	r3, #4
 8007798:	d003      	beq.n	80077a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800779a:	e0db      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800779c:	4b73      	ldr	r3, [pc, #460]	@ (800796c <HAL_RCC_GetSysClockFreq+0x204>)
 800779e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077a0:	e0db      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077a2:	4b73      	ldr	r3, [pc, #460]	@ (8007970 <HAL_RCC_GetSysClockFreq+0x208>)
 80077a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077a6:	e0d8      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d063      	beq.n	8007886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077be:	4b6a      	ldr	r3, [pc, #424]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	099b      	lsrs	r3, r3, #6
 80077c4:	2200      	movs	r2, #0
 80077c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	f04f 0000 	mov.w	r0, #0
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	0159      	lsls	r1, r3, #5
 80077e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077ec:	0150      	lsls	r0, r2, #5
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4621      	mov	r1, r4
 80077f4:	1a51      	subs	r1, r2, r1
 80077f6:	6139      	str	r1, [r7, #16]
 80077f8:	4629      	mov	r1, r5
 80077fa:	eb63 0301 	sbc.w	r3, r3, r1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800780c:	4659      	mov	r1, fp
 800780e:	018b      	lsls	r3, r1, #6
 8007810:	4651      	mov	r1, sl
 8007812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007816:	4651      	mov	r1, sl
 8007818:	018a      	lsls	r2, r1, #6
 800781a:	4651      	mov	r1, sl
 800781c:	ebb2 0801 	subs.w	r8, r2, r1
 8007820:	4659      	mov	r1, fp
 8007822:	eb63 0901 	sbc.w	r9, r3, r1
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800783a:	4690      	mov	r8, r2
 800783c:	4699      	mov	r9, r3
 800783e:	4623      	mov	r3, r4
 8007840:	eb18 0303 	adds.w	r3, r8, r3
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	462b      	mov	r3, r5
 8007848:	eb49 0303 	adc.w	r3, r9, r3
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800785a:	4629      	mov	r1, r5
 800785c:	024b      	lsls	r3, r1, #9
 800785e:	4621      	mov	r1, r4
 8007860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007864:	4621      	mov	r1, r4
 8007866:	024a      	lsls	r2, r1, #9
 8007868:	4610      	mov	r0, r2
 800786a:	4619      	mov	r1, r3
 800786c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800786e:	2200      	movs	r2, #0
 8007870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007878:	f7f9 fa0e 	bl	8000c98 <__aeabi_uldivmod>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4613      	mov	r3, r2
 8007882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007884:	e058      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007886:	4b38      	ldr	r3, [pc, #224]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	099b      	lsrs	r3, r3, #6
 800788c:	2200      	movs	r2, #0
 800788e:	4618      	mov	r0, r3
 8007890:	4611      	mov	r1, r2
 8007892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007896:	623b      	str	r3, [r7, #32]
 8007898:	2300      	movs	r3, #0
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
 800789c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	f04f 0000 	mov.w	r0, #0
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	0159      	lsls	r1, r3, #5
 80078ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078b2:	0150      	lsls	r0, r2, #5
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4641      	mov	r1, r8
 80078ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80078be:	4649      	mov	r1, r9
 80078c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078d8:	ebb2 040a 	subs.w	r4, r2, sl
 80078dc:	eb63 050b 	sbc.w	r5, r3, fp
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	00eb      	lsls	r3, r5, #3
 80078ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ee:	00e2      	lsls	r2, r4, #3
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	4643      	mov	r3, r8
 80078f6:	18e3      	adds	r3, r4, r3
 80078f8:	603b      	str	r3, [r7, #0]
 80078fa:	464b      	mov	r3, r9
 80078fc:	eb45 0303 	adc.w	r3, r5, r3
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800790e:	4629      	mov	r1, r5
 8007910:	028b      	lsls	r3, r1, #10
 8007912:	4621      	mov	r1, r4
 8007914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007918:	4621      	mov	r1, r4
 800791a:	028a      	lsls	r2, r1, #10
 800791c:	4610      	mov	r0, r2
 800791e:	4619      	mov	r1, r3
 8007920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007922:	2200      	movs	r2, #0
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	61fa      	str	r2, [r7, #28]
 8007928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800792c:	f7f9 f9b4 	bl	8000c98 <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007938:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	3301      	adds	r3, #1
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800794a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007952:	e002      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007954:	4b05      	ldr	r3, [pc, #20]	@ (800796c <HAL_RCC_GetSysClockFreq+0x204>)
 8007956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800795a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800795c:	4618      	mov	r0, r3
 800795e:	3750      	adds	r7, #80	@ 0x50
 8007960:	46bd      	mov	sp, r7
 8007962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007966:	bf00      	nop
 8007968:	40023800 	.word	0x40023800
 800796c:	00f42400 	.word	0x00f42400
 8007970:	007a1200 	.word	0x007a1200

08007974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007978:	4b03      	ldr	r3, [pc, #12]	@ (8007988 <HAL_RCC_GetHCLKFreq+0x14>)
 800797a:	681b      	ldr	r3, [r3, #0]
}
 800797c:	4618      	mov	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	2000002c 	.word	0x2000002c

0800798c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007990:	f7ff fff0 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 8007994:	4602      	mov	r2, r0
 8007996:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0a9b      	lsrs	r3, r3, #10
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	4903      	ldr	r1, [pc, #12]	@ (80079b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a2:	5ccb      	ldrb	r3, [r1, r3]
 80079a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40023800 	.word	0x40023800
 80079b0:	08010130 	.word	0x08010130

080079b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079b8:	f7ff ffdc 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	0b5b      	lsrs	r3, r3, #13
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	4903      	ldr	r1, [pc, #12]	@ (80079d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ca:	5ccb      	ldrb	r3, [r1, r3]
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40023800 	.word	0x40023800
 80079d8:	08010130 	.word	0x08010130

080079dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e07b      	b.n	8007ae6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d108      	bne.n	8007a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079fe:	d009      	beq.n	8007a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	61da      	str	r2, [r3, #28]
 8007a06:	e005      	b.n	8007a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fb fe66 	bl	8003700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a84:	431a      	orrs	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a98:	ea42 0103 	orr.w	r1, r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	f003 0104 	and.w	r1, r3, #4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	f003 0210 	and.w	r2, r3, #16
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ad4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b088      	sub	sp, #32
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	60f8      	str	r0, [r7, #12]
 8007af6:	60b9      	str	r1, [r7, #8]
 8007af8:	603b      	str	r3, [r7, #0]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007afe:	f7fc fa59 	bl	8003fb4 <HAL_GetTick>
 8007b02:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007b04:	88fb      	ldrh	r3, [r7, #6]
 8007b06:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d001      	beq.n	8007b18 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
 8007b16:	e12a      	b.n	8007d6e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <HAL_SPI_Transmit+0x36>
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e122      	b.n	8007d6e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_SPI_Transmit+0x48>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e11b      	b.n	8007d6e <HAL_SPI_Transmit+0x280>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2203      	movs	r2, #3
 8007b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	88fa      	ldrh	r2, [r7, #6]
 8007b56:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b84:	d10f      	bne.n	8007ba6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ba4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb0:	2b40      	cmp	r3, #64	@ 0x40
 8007bb2:	d007      	beq.n	8007bc4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bcc:	d152      	bne.n	8007c74 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <HAL_SPI_Transmit+0xee>
 8007bd6:	8b7b      	ldrh	r3, [r7, #26]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d145      	bne.n	8007c68 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	881a      	ldrh	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c00:	e032      	b.n	8007c68 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d112      	bne.n	8007c36 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c14:	881a      	ldrh	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c20:	1c9a      	adds	r2, r3, #2
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007c34:	e018      	b.n	8007c68 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c36:	f7fc f9bd 	bl	8003fb4 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d803      	bhi.n	8007c4e <HAL_SPI_Transmit+0x160>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d102      	bne.n	8007c54 <HAL_SPI_Transmit+0x166>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e082      	b.n	8007d6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1c7      	bne.n	8007c02 <HAL_SPI_Transmit+0x114>
 8007c72:	e053      	b.n	8007d1c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d002      	beq.n	8007c82 <HAL_SPI_Transmit+0x194>
 8007c7c:	8b7b      	ldrh	r3, [r7, #26]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d147      	bne.n	8007d12 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	7812      	ldrb	r2, [r2, #0]
 8007c8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ca8:	e033      	b.n	8007d12 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d113      	bne.n	8007ce0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	7812      	ldrb	r2, [r2, #0]
 8007cc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	b29a      	uxth	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007cde:	e018      	b.n	8007d12 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ce0:	f7fc f968 	bl	8003fb4 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d803      	bhi.n	8007cf8 <HAL_SPI_Transmit+0x20a>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d102      	bne.n	8007cfe <HAL_SPI_Transmit+0x210>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e02d      	b.n	8007d6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1c6      	bne.n	8007caa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f9c3 	bl	80080ac <SPI_EndRxTxTransaction>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10a      	bne.n	8007d50 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3720      	adds	r7, #32
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10e      	bne.n	8007db8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d004      	beq.n	8007db8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
    return;
 8007db6:	e0ce      	b.n	8007f56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d009      	beq.n	8007dd6 <HAL_SPI_IRQHandler+0x5e>
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d004      	beq.n	8007dd6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
    return;
 8007dd4:	e0bf      	b.n	8007f56 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <HAL_SPI_IRQHandler+0x7e>
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80b0 	beq.w	8007f56 <HAL_SPI_IRQHandler+0x1de>
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80aa 	beq.w	8007f56 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d023      	beq.n	8007e54 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d011      	beq.n	8007e3c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1c:	f043 0204 	orr.w	r2, r3, #4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	e00b      	b.n	8007e54 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]
        return;
 8007e52:	e080      	b.n	8007f56 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d014      	beq.n	8007e88 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e62:	f043 0201 	orr.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e96:	f043 0208 	orr.w	r2, r3, #8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d04f      	beq.n	8007f54 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ec2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d104      	bne.n	8007ee0 <HAL_SPI_IRQHandler+0x168>
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d034      	beq.n	8007f4a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0203 	bic.w	r2, r2, #3
 8007eee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d011      	beq.n	8007f1c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efc:	4a17      	ldr	r2, [pc, #92]	@ (8007f5c <HAL_SPI_IRQHandler+0x1e4>)
 8007efe:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fc fa06 	bl	8004316 <HAL_DMA_Abort_IT>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d016      	beq.n	8007f52 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f28:	4a0c      	ldr	r2, [pc, #48]	@ (8007f5c <HAL_SPI_IRQHandler+0x1e4>)
 8007f2a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fc f9f0 	bl	8004316 <HAL_DMA_Abort_IT>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007f48:	e003      	b.n	8007f52 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f808 	bl	8007f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f50:	e000      	b.n	8007f54 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007f52:	bf00      	nop
    return;
 8007f54:	bf00      	nop
  }
}
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	08007f75 	.word	0x08007f75

08007f60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff ffe6 	bl	8007f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fac:	f7fc f802 	bl	8003fb4 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb4:	1a9b      	subs	r3, r3, r2
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	4413      	add	r3, r2
 8007fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fbc:	f7fb fffa 	bl	8003fb4 <HAL_GetTick>
 8007fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fc2:	4b39      	ldr	r3, [pc, #228]	@ (80080a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	015b      	lsls	r3, r3, #5
 8007fc8:	0d1b      	lsrs	r3, r3, #20
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fd2:	e054      	b.n	800807e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fda:	d050      	beq.n	800807e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fdc:	f7fb ffea 	bl	8003fb4 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d902      	bls.n	8007ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d13d      	bne.n	800806e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800800a:	d111      	bne.n	8008030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008014:	d004      	beq.n	8008020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800801e:	d107      	bne.n	8008030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800802e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008038:	d10f      	bne.n	800805a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e017      	b.n	800809e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	3b01      	subs	r3, #1
 800807c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	4013      	ands	r3, r2
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	bf0c      	ite	eq
 800808e:	2301      	moveq	r3, #1
 8008090:	2300      	movne	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	429a      	cmp	r2, r3
 800809a:	d19b      	bne.n	8007fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3720      	adds	r7, #32
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	2000002c 	.word	0x2000002c

080080ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2201      	movs	r2, #1
 80080c0:	2102      	movs	r1, #2
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f7ff ff6a 	bl	8007f9c <SPI_WaitFlagStateUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d2:	f043 0220 	orr.w	r2, r3, #32
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e032      	b.n	8008144 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80080de:	4b1b      	ldr	r3, [pc, #108]	@ (800814c <SPI_EndRxTxTransaction+0xa0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008150 <SPI_EndRxTxTransaction+0xa4>)
 80080e4:	fba2 2303 	umull	r2, r3, r2, r3
 80080e8:	0d5b      	lsrs	r3, r3, #21
 80080ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080ee:	fb02 f303 	mul.w	r3, r2, r3
 80080f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080fc:	d112      	bne.n	8008124 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	2180      	movs	r1, #128	@ 0x80
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff ff47 	bl	8007f9c <SPI_WaitFlagStateUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d016      	beq.n	8008142 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008118:	f043 0220 	orr.w	r2, r3, #32
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e00f      	b.n	8008144 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	3b01      	subs	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813a:	2b80      	cmp	r3, #128	@ 0x80
 800813c:	d0f2      	beq.n	8008124 <SPI_EndRxTxTransaction+0x78>
 800813e:	e000      	b.n	8008142 <SPI_EndRxTxTransaction+0x96>
        break;
 8008140:	bf00      	nop
  }

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	2000002c 	.word	0x2000002c
 8008150:	165e9f81 	.word	0x165e9f81

08008154 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e042      	b.n	80081ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fb fb40 	bl	8003800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2224      	movs	r2, #36	@ 0x24
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008196:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fd07 	bl	8008bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	695a      	ldr	r2, [r3, #20]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b20      	cmp	r3, #32
 800820c:	d121      	bne.n	8008252 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <HAL_UART_Transmit_IT+0x26>
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e01a      	b.n	8008254 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	88fa      	ldrh	r2, [r7, #6]
 8008228:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2221      	movs	r2, #33	@ 0x21
 800823a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68da      	ldr	r2, [r3, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800824c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e000      	b.n	8008254 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008252:	2302      	movs	r3, #2
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b20      	cmp	r3, #32
 8008278:	d112      	bne.n	80082a0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <HAL_UART_Receive_IT+0x26>
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e00b      	b.n	80082a2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008290:	88fb      	ldrh	r3, [r7, #6]
 8008292:	461a      	mov	r2, r3
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 fab0 	bl	80087fc <UART_Start_Receive_IT>
 800829c:	4603      	mov	r3, r0
 800829e:	e000      	b.n	80082a2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80082a0:	2302      	movs	r3, #2
  }
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b0ba      	sub	sp, #232	@ 0xe8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80082d8:	2300      	movs	r3, #0
 80082da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80082ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10f      	bne.n	8008312 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <HAL_UART_IRQHandler+0x66>
 80082fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fb8f 	bl	8008a2e <UART_Receive_IT>
      return;
 8008310:	e25b      	b.n	80087ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 80de 	beq.w	80084d8 <HAL_UART_IRQHandler+0x22c>
 800831c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800832c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80d1 	beq.w	80084d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <HAL_UART_IRQHandler+0xae>
 8008342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800834a:	2b00      	cmp	r3, #0
 800834c:	d005      	beq.n	800835a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008352:	f043 0201 	orr.w	r2, r3, #1
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800835a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835e:	f003 0304 	and.w	r3, r3, #4
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00b      	beq.n	800837e <HAL_UART_IRQHandler+0xd2>
 8008366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d005      	beq.n	800837e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008376:	f043 0202 	orr.w	r2, r3, #2
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800837e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <HAL_UART_IRQHandler+0xf6>
 800838a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839a:	f043 0204 	orr.w	r2, r3, #4
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d011      	beq.n	80083d2 <HAL_UART_IRQHandler+0x126>
 80083ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d005      	beq.n	80083d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ca:	f043 0208 	orr.w	r2, r3, #8
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 81f2 	beq.w	80087c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083e0:	f003 0320 	and.w	r3, r3, #32
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d008      	beq.n	80083fa <HAL_UART_IRQHandler+0x14e>
 80083e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fb1a 	bl	8008a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008404:	2b40      	cmp	r3, #64	@ 0x40
 8008406:	bf0c      	ite	eq
 8008408:	2301      	moveq	r3, #1
 800840a:	2300      	movne	r3, #0
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d103      	bne.n	8008426 <HAL_UART_IRQHandler+0x17a>
 800841e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008422:	2b00      	cmp	r3, #0
 8008424:	d04f      	beq.n	80084c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fa22 	bl	8008870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008436:	2b40      	cmp	r3, #64	@ 0x40
 8008438:	d141      	bne.n	80084be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3314      	adds	r3, #20
 8008440:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008448:	e853 3f00 	ldrex	r3, [r3]
 800844c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008466:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800846a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008476:	e841 2300 	strex	r3, r2, [r1]
 800847a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800847e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1d9      	bne.n	800843a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d013      	beq.n	80084b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008492:	4a7e      	ldr	r2, [pc, #504]	@ (800868c <HAL_UART_IRQHandler+0x3e0>)
 8008494:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849a:	4618      	mov	r0, r3
 800849c:	f7fb ff3b 	bl	8004316 <HAL_DMA_Abort_IT>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d016      	beq.n	80084d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b4:	e00e      	b.n	80084d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f98a 	bl	80087d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084bc:	e00a      	b.n	80084d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f986 	bl	80087d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	e006      	b.n	80084d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f982 	bl	80087d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80084d2:	e175      	b.n	80087c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	bf00      	nop
    return;
 80084d6:	e173      	b.n	80087c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084dc:	2b01      	cmp	r3, #1
 80084de:	f040 814f 	bne.w	8008780 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e6:	f003 0310 	and.w	r3, r3, #16
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8148 	beq.w	8008780 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8141 	beq.w	8008780 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60bb      	str	r3, [r7, #8]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800851e:	2b40      	cmp	r3, #64	@ 0x40
 8008520:	f040 80b6 	bne.w	8008690 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8145 	beq.w	80087c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800853e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008542:	429a      	cmp	r2, r3
 8008544:	f080 813e 	bcs.w	80087c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800854e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800855a:	f000 8088 	beq.w	800866e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008568:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800856c:	e853 3f00 	ldrex	r3, [r3]
 8008570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008574:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800857c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	330c      	adds	r3, #12
 8008586:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800858a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800858e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008596:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80085a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1d9      	bne.n	800855e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80085ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80085bc:	f023 0301 	bic.w	r3, r3, #1
 80085c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3314      	adds	r3, #20
 80085ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80085e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e1      	bne.n	80085aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800860a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800860c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008610:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008612:	e841 2300 	strex	r3, r2, [r1]
 8008616:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008618:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1e3      	bne.n	80085e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2220      	movs	r2, #32
 8008622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800863c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	330c      	adds	r3, #12
 800864c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008650:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008652:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008654:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008656:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008658:	e841 2300 	strex	r3, r2, [r1]
 800865c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800865e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e3      	bne.n	800862c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008668:	4618      	mov	r0, r3
 800866a:	f7fb fde4 	bl	8004236 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800867c:	b29b      	uxth	r3, r3
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	b29b      	uxth	r3, r3
 8008682:	4619      	mov	r1, r3
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f8ad 	bl	80087e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800868a:	e09b      	b.n	80087c4 <HAL_UART_IRQHandler+0x518>
 800868c:	08008937 	.word	0x08008937
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008698:	b29b      	uxth	r3, r3
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 808e 	beq.w	80087c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80086ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8089 	beq.w	80087c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	330c      	adds	r3, #12
 80086bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	330c      	adds	r3, #12
 80086d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80086da:	647a      	str	r2, [r7, #68]	@ 0x44
 80086dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086e2:	e841 2300 	strex	r3, r2, [r1]
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1e3      	bne.n	80086b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3314      	adds	r3, #20
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	623b      	str	r3, [r7, #32]
   return(result);
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	f023 0301 	bic.w	r3, r3, #1
 8008704:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3314      	adds	r3, #20
 800870e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008712:	633a      	str	r2, [r7, #48]	@ 0x30
 8008714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e3      	bne.n	80086ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	60fb      	str	r3, [r7, #12]
   return(result);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0310 	bic.w	r3, r3, #16
 800874a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	330c      	adds	r3, #12
 8008754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008758:	61fa      	str	r2, [r7, #28]
 800875a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	69b9      	ldr	r1, [r7, #24]
 800875e:	69fa      	ldr	r2, [r7, #28]
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	617b      	str	r3, [r7, #20]
   return(result);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e3      	bne.n	8008734 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f833 	bl	80087e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800877e:	e023      	b.n	80087c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008788:	2b00      	cmp	r3, #0
 800878a:	d009      	beq.n	80087a0 <HAL_UART_IRQHandler+0x4f4>
 800878c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8e0 	bl	800895e <UART_Transmit_IT>
    return;
 800879e:	e014      	b.n	80087ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00e      	beq.n	80087ca <HAL_UART_IRQHandler+0x51e>
 80087ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d008      	beq.n	80087ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f920 	bl	80089fe <UART_EndTransmit_IT>
    return;
 80087be:	e004      	b.n	80087ca <HAL_UART_IRQHandler+0x51e>
    return;
 80087c0:	bf00      	nop
 80087c2:	e002      	b.n	80087ca <HAL_UART_IRQHandler+0x51e>
      return;
 80087c4:	bf00      	nop
 80087c6:	e000      	b.n	80087ca <HAL_UART_IRQHandler+0x51e>
      return;
 80087c8:	bf00      	nop
  }
}
 80087ca:	37e8      	adds	r7, #232	@ 0xe8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4613      	mov	r3, r2
 8008808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2222      	movs	r2, #34	@ 0x22
 8008826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d007      	beq.n	8008842 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008840:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f042 0201 	orr.w	r2, r2, #1
 8008850:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f042 0220 	orr.w	r2, r2, #32
 8008860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b095      	sub	sp, #84	@ 0x54
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	330c      	adds	r3, #12
 800887e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800888e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	330c      	adds	r3, #12
 8008896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008898:	643a      	str	r2, [r7, #64]	@ 0x40
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800889e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e5      	bne.n	8008878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	3314      	adds	r3, #20
 80088b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	f023 0301 	bic.w	r3, r3, #1
 80088c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3314      	adds	r3, #20
 80088ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e5      	bne.n	80088ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d119      	bne.n	800891c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	330c      	adds	r3, #12
 80088ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f023 0310 	bic.w	r3, r3, #16
 80088fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	330c      	adds	r3, #12
 8008906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008908:	61ba      	str	r2, [r7, #24]
 800890a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6979      	ldr	r1, [r7, #20]
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	613b      	str	r3, [r7, #16]
   return(result);
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e5      	bne.n	80088e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800892a:	bf00      	nop
 800892c:	3754      	adds	r7, #84	@ 0x54
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b084      	sub	sp, #16
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008942:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff ff3d 	bl	80087d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b21      	cmp	r3, #33	@ 0x21
 8008970:	d13e      	bne.n	80089f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800897a:	d114      	bne.n	80089a6 <UART_Transmit_IT+0x48>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d110      	bne.n	80089a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008998:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	1c9a      	adds	r2, r3, #2
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	621a      	str	r2, [r3, #32]
 80089a4:	e008      	b.n	80089b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	1c59      	adds	r1, r3, #1
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6211      	str	r1, [r2, #32]
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089bc:	b29b      	uxth	r3, r3
 80089be:	3b01      	subs	r3, #1
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	4619      	mov	r1, r3
 80089c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10f      	bne.n	80089ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68da      	ldr	r2, [r3, #12]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e000      	b.n	80089f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089f0:	2302      	movs	r3, #2
  }
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7f9 fa18 	bl	8001e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b08c      	sub	sp, #48	@ 0x30
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b22      	cmp	r3, #34	@ 0x22
 8008a40:	f040 80ae 	bne.w	8008ba0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a4c:	d117      	bne.n	8008a7e <UART_Receive_IT+0x50>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d113      	bne.n	8008a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	1c9a      	adds	r2, r3, #2
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a7c:	e026      	b.n	8008acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a84:	2300      	movs	r3, #0
 8008a86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a90:	d007      	beq.n	8008aa2 <UART_Receive_IT+0x74>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <UART_Receive_IT+0x82>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	e008      	b.n	8008ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d15d      	bne.n	8008b9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f022 0220 	bic.w	r2, r2, #32
 8008aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68da      	ldr	r2, [r3, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	695a      	ldr	r2, [r3, #20]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d135      	bne.n	8008b92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f023 0310 	bic.w	r3, r3, #16
 8008b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	330c      	adds	r3, #12
 8008b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b4c:	623a      	str	r2, [r7, #32]
 8008b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	69f9      	ldr	r1, [r7, #28]
 8008b52:	6a3a      	ldr	r2, [r7, #32]
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e5      	bne.n	8008b2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0310 	and.w	r3, r3, #16
 8008b6a:	2b10      	cmp	r3, #16
 8008b6c:	d10a      	bne.n	8008b84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff fe2a 	bl	80087e4 <HAL_UARTEx_RxEventCallback>
 8008b90:	e002      	b.n	8008b98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7f9 f99c 	bl	8001ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e002      	b.n	8008ba2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e000      	b.n	8008ba2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008ba0:	2302      	movs	r3, #2
  }
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3730      	adds	r7, #48	@ 0x30
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb0:	b0c0      	sub	sp, #256	@ 0x100
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc8:	68d9      	ldr	r1, [r3, #12]
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	ea40 0301 	orr.w	r3, r0, r1
 8008bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bda:	689a      	ldr	r2, [r3, #8]
 8008bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	431a      	orrs	r2, r3
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c04:	f021 010c 	bic.w	r1, r1, #12
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c12:	430b      	orrs	r3, r1
 8008c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	6999      	ldr	r1, [r3, #24]
 8008c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	ea40 0301 	orr.w	r3, r0, r1
 8008c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	4b8f      	ldr	r3, [pc, #572]	@ (8008e78 <UART_SetConfig+0x2cc>)
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d005      	beq.n	8008c4c <UART_SetConfig+0xa0>
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b8d      	ldr	r3, [pc, #564]	@ (8008e7c <UART_SetConfig+0x2d0>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d104      	bne.n	8008c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c4c:	f7fe feb2 	bl	80079b4 <HAL_RCC_GetPCLK2Freq>
 8008c50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c54:	e003      	b.n	8008c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c56:	f7fe fe99 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 8008c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c68:	f040 810c 	bne.w	8008e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c7e:	4622      	mov	r2, r4
 8008c80:	462b      	mov	r3, r5
 8008c82:	1891      	adds	r1, r2, r2
 8008c84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c86:	415b      	adcs	r3, r3
 8008c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c8e:	4621      	mov	r1, r4
 8008c90:	eb12 0801 	adds.w	r8, r2, r1
 8008c94:	4629      	mov	r1, r5
 8008c96:	eb43 0901 	adc.w	r9, r3, r1
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cae:	4690      	mov	r8, r2
 8008cb0:	4699      	mov	r9, r3
 8008cb2:	4623      	mov	r3, r4
 8008cb4:	eb18 0303 	adds.w	r3, r8, r3
 8008cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	eb49 0303 	adc.w	r3, r9, r3
 8008cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008cda:	460b      	mov	r3, r1
 8008cdc:	18db      	adds	r3, r3, r3
 8008cde:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	eb42 0303 	adc.w	r3, r2, r3
 8008ce6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008cf0:	f7f7 ffd2 	bl	8000c98 <__aeabi_uldivmod>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	4b61      	ldr	r3, [pc, #388]	@ (8008e80 <UART_SetConfig+0x2d4>)
 8008cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008cfe:	095b      	lsrs	r3, r3, #5
 8008d00:	011c      	lsls	r4, r3, #4
 8008d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d14:	4642      	mov	r2, r8
 8008d16:	464b      	mov	r3, r9
 8008d18:	1891      	adds	r1, r2, r2
 8008d1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d1c:	415b      	adcs	r3, r3
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d24:	4641      	mov	r1, r8
 8008d26:	eb12 0a01 	adds.w	sl, r2, r1
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	f04f 0300 	mov.w	r3, #0
 8008d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d44:	4692      	mov	sl, r2
 8008d46:	469b      	mov	fp, r3
 8008d48:	4643      	mov	r3, r8
 8008d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d52:	464b      	mov	r3, r9
 8008d54:	eb4b 0303 	adc.w	r3, fp, r3
 8008d58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d70:	460b      	mov	r3, r1
 8008d72:	18db      	adds	r3, r3, r3
 8008d74:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d76:	4613      	mov	r3, r2
 8008d78:	eb42 0303 	adc.w	r3, r2, r3
 8008d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d86:	f7f7 ff87 	bl	8000c98 <__aeabi_uldivmod>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	4b3b      	ldr	r3, [pc, #236]	@ (8008e80 <UART_SetConfig+0x2d4>)
 8008d92:	fba3 2301 	umull	r2, r3, r3, r1
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	2264      	movs	r2, #100	@ 0x64
 8008d9a:	fb02 f303 	mul.w	r3, r2, r3
 8008d9e:	1acb      	subs	r3, r1, r3
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008da6:	4b36      	ldr	r3, [pc, #216]	@ (8008e80 <UART_SetConfig+0x2d4>)
 8008da8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	005b      	lsls	r3, r3, #1
 8008db0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008db4:	441c      	add	r4, r3
 8008db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	1891      	adds	r1, r2, r2
 8008dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008dd0:	415b      	adcs	r3, r3
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008dd8:	4641      	mov	r1, r8
 8008dda:	1851      	adds	r1, r2, r1
 8008ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8008dde:	4649      	mov	r1, r9
 8008de0:	414b      	adcs	r3, r1
 8008de2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de4:	f04f 0200 	mov.w	r2, #0
 8008de8:	f04f 0300 	mov.w	r3, #0
 8008dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008df0:	4659      	mov	r1, fp
 8008df2:	00cb      	lsls	r3, r1, #3
 8008df4:	4651      	mov	r1, sl
 8008df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dfa:	4651      	mov	r1, sl
 8008dfc:	00ca      	lsls	r2, r1, #3
 8008dfe:	4610      	mov	r0, r2
 8008e00:	4619      	mov	r1, r3
 8008e02:	4603      	mov	r3, r0
 8008e04:	4642      	mov	r2, r8
 8008e06:	189b      	adds	r3, r3, r2
 8008e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	460a      	mov	r2, r1
 8008e10:	eb42 0303 	adc.w	r3, r2, r3
 8008e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	18db      	adds	r3, r3, r3
 8008e30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e32:	4613      	mov	r3, r2
 8008e34:	eb42 0303 	adc.w	r3, r2, r3
 8008e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e42:	f7f7 ff29 	bl	8000c98 <__aeabi_uldivmod>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <UART_SetConfig+0x2d4>)
 8008e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	2164      	movs	r1, #100	@ 0x64
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	3332      	adds	r3, #50	@ 0x32
 8008e5e:	4a08      	ldr	r2, [pc, #32]	@ (8008e80 <UART_SetConfig+0x2d4>)
 8008e60:	fba2 2303 	umull	r2, r3, r2, r3
 8008e64:	095b      	lsrs	r3, r3, #5
 8008e66:	f003 0207 	and.w	r2, r3, #7
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4422      	add	r2, r4
 8008e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e74:	e106      	b.n	8009084 <UART_SetConfig+0x4d8>
 8008e76:	bf00      	nop
 8008e78:	40011000 	.word	0x40011000
 8008e7c:	40011400 	.word	0x40011400
 8008e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e96:	4642      	mov	r2, r8
 8008e98:	464b      	mov	r3, r9
 8008e9a:	1891      	adds	r1, r2, r2
 8008e9c:	6239      	str	r1, [r7, #32]
 8008e9e:	415b      	adcs	r3, r3
 8008ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ea6:	4641      	mov	r1, r8
 8008ea8:	1854      	adds	r4, r2, r1
 8008eaa:	4649      	mov	r1, r9
 8008eac:	eb43 0501 	adc.w	r5, r3, r1
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	f04f 0300 	mov.w	r3, #0
 8008eb8:	00eb      	lsls	r3, r5, #3
 8008eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ebe:	00e2      	lsls	r2, r4, #3
 8008ec0:	4614      	mov	r4, r2
 8008ec2:	461d      	mov	r5, r3
 8008ec4:	4643      	mov	r3, r8
 8008ec6:	18e3      	adds	r3, r4, r3
 8008ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ecc:	464b      	mov	r3, r9
 8008ece:	eb45 0303 	adc.w	r3, r5, r3
 8008ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ee2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	008b      	lsls	r3, r1, #2
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008efc:	4621      	mov	r1, r4
 8008efe:	008a      	lsls	r2, r1, #2
 8008f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f04:	f7f7 fec8 	bl	8000c98 <__aeabi_uldivmod>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4b60      	ldr	r3, [pc, #384]	@ (8009090 <UART_SetConfig+0x4e4>)
 8008f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	011c      	lsls	r4, r3, #4
 8008f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f28:	4642      	mov	r2, r8
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	1891      	adds	r1, r2, r2
 8008f2e:	61b9      	str	r1, [r7, #24]
 8008f30:	415b      	adcs	r3, r3
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f38:	4641      	mov	r1, r8
 8008f3a:	1851      	adds	r1, r2, r1
 8008f3c:	6139      	str	r1, [r7, #16]
 8008f3e:	4649      	mov	r1, r9
 8008f40:	414b      	adcs	r3, r1
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	f04f 0200 	mov.w	r2, #0
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f50:	4659      	mov	r1, fp
 8008f52:	00cb      	lsls	r3, r1, #3
 8008f54:	4651      	mov	r1, sl
 8008f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f5a:	4651      	mov	r1, sl
 8008f5c:	00ca      	lsls	r2, r1, #3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4619      	mov	r1, r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	4642      	mov	r2, r8
 8008f66:	189b      	adds	r3, r3, r2
 8008f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	460a      	mov	r2, r1
 8008f70:	eb42 0303 	adc.w	r3, r2, r3
 8008f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f84:	f04f 0200 	mov.w	r2, #0
 8008f88:	f04f 0300 	mov.w	r3, #0
 8008f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f90:	4649      	mov	r1, r9
 8008f92:	008b      	lsls	r3, r1, #2
 8008f94:	4641      	mov	r1, r8
 8008f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f9a:	4641      	mov	r1, r8
 8008f9c:	008a      	lsls	r2, r1, #2
 8008f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008fa2:	f7f7 fe79 	bl	8000c98 <__aeabi_uldivmod>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4611      	mov	r1, r2
 8008fac:	4b38      	ldr	r3, [pc, #224]	@ (8009090 <UART_SetConfig+0x4e4>)
 8008fae:	fba3 2301 	umull	r2, r3, r3, r1
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	2264      	movs	r2, #100	@ 0x64
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	1acb      	subs	r3, r1, r3
 8008fbc:	011b      	lsls	r3, r3, #4
 8008fbe:	3332      	adds	r3, #50	@ 0x32
 8008fc0:	4a33      	ldr	r2, [pc, #204]	@ (8009090 <UART_SetConfig+0x4e4>)
 8008fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc6:	095b      	lsrs	r3, r3, #5
 8008fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fcc:	441c      	add	r4, r3
 8008fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8008fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	1891      	adds	r1, r2, r2
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	415b      	adcs	r3, r3
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fec:	4641      	mov	r1, r8
 8008fee:	1851      	adds	r1, r2, r1
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	414b      	adcs	r3, r1
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009004:	4659      	mov	r1, fp
 8009006:	00cb      	lsls	r3, r1, #3
 8009008:	4651      	mov	r1, sl
 800900a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800900e:	4651      	mov	r1, sl
 8009010:	00ca      	lsls	r2, r1, #3
 8009012:	4610      	mov	r0, r2
 8009014:	4619      	mov	r1, r3
 8009016:	4603      	mov	r3, r0
 8009018:	4642      	mov	r2, r8
 800901a:	189b      	adds	r3, r3, r2
 800901c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800901e:	464b      	mov	r3, r9
 8009020:	460a      	mov	r2, r1
 8009022:	eb42 0303 	adc.w	r3, r2, r3
 8009026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	663b      	str	r3, [r7, #96]	@ 0x60
 8009032:	667a      	str	r2, [r7, #100]	@ 0x64
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	f04f 0300 	mov.w	r3, #0
 800903c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009040:	4649      	mov	r1, r9
 8009042:	008b      	lsls	r3, r1, #2
 8009044:	4641      	mov	r1, r8
 8009046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800904a:	4641      	mov	r1, r8
 800904c:	008a      	lsls	r2, r1, #2
 800904e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009052:	f7f7 fe21 	bl	8000c98 <__aeabi_uldivmod>
 8009056:	4602      	mov	r2, r0
 8009058:	460b      	mov	r3, r1
 800905a:	4b0d      	ldr	r3, [pc, #52]	@ (8009090 <UART_SetConfig+0x4e4>)
 800905c:	fba3 1302 	umull	r1, r3, r3, r2
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	2164      	movs	r1, #100	@ 0x64
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	011b      	lsls	r3, r3, #4
 800906c:	3332      	adds	r3, #50	@ 0x32
 800906e:	4a08      	ldr	r2, [pc, #32]	@ (8009090 <UART_SetConfig+0x4e4>)
 8009070:	fba2 2303 	umull	r2, r3, r2, r3
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	f003 020f 	and.w	r2, r3, #15
 800907a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4422      	add	r2, r4
 8009082:	609a      	str	r2, [r3, #8]
}
 8009084:	bf00      	nop
 8009086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800908a:	46bd      	mov	sp, r7
 800908c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009090:	51eb851f 	.word	0x51eb851f

08009094 <__cvt>:
 8009094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009098:	ec57 6b10 	vmov	r6, r7, d0
 800909c:	2f00      	cmp	r7, #0
 800909e:	460c      	mov	r4, r1
 80090a0:	4619      	mov	r1, r3
 80090a2:	463b      	mov	r3, r7
 80090a4:	bfbb      	ittet	lt
 80090a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80090aa:	461f      	movlt	r7, r3
 80090ac:	2300      	movge	r3, #0
 80090ae:	232d      	movlt	r3, #45	@ 0x2d
 80090b0:	700b      	strb	r3, [r1, #0]
 80090b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80090b8:	4691      	mov	r9, r2
 80090ba:	f023 0820 	bic.w	r8, r3, #32
 80090be:	bfbc      	itt	lt
 80090c0:	4632      	movlt	r2, r6
 80090c2:	4616      	movlt	r6, r2
 80090c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090c8:	d005      	beq.n	80090d6 <__cvt+0x42>
 80090ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80090ce:	d100      	bne.n	80090d2 <__cvt+0x3e>
 80090d0:	3401      	adds	r4, #1
 80090d2:	2102      	movs	r1, #2
 80090d4:	e000      	b.n	80090d8 <__cvt+0x44>
 80090d6:	2103      	movs	r1, #3
 80090d8:	ab03      	add	r3, sp, #12
 80090da:	9301      	str	r3, [sp, #4]
 80090dc:	ab02      	add	r3, sp, #8
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	ec47 6b10 	vmov	d0, r6, r7
 80090e4:	4653      	mov	r3, sl
 80090e6:	4622      	mov	r2, r4
 80090e8:	f001 f876 	bl	800a1d8 <_dtoa_r>
 80090ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80090f0:	4605      	mov	r5, r0
 80090f2:	d119      	bne.n	8009128 <__cvt+0x94>
 80090f4:	f019 0f01 	tst.w	r9, #1
 80090f8:	d00e      	beq.n	8009118 <__cvt+0x84>
 80090fa:	eb00 0904 	add.w	r9, r0, r4
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	4630      	mov	r0, r6
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800910a:	b108      	cbz	r0, 8009110 <__cvt+0x7c>
 800910c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009110:	2230      	movs	r2, #48	@ 0x30
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	454b      	cmp	r3, r9
 8009116:	d31e      	bcc.n	8009156 <__cvt+0xc2>
 8009118:	9b03      	ldr	r3, [sp, #12]
 800911a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800911c:	1b5b      	subs	r3, r3, r5
 800911e:	4628      	mov	r0, r5
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	b004      	add	sp, #16
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800912c:	eb00 0904 	add.w	r9, r0, r4
 8009130:	d1e5      	bne.n	80090fe <__cvt+0x6a>
 8009132:	7803      	ldrb	r3, [r0, #0]
 8009134:	2b30      	cmp	r3, #48	@ 0x30
 8009136:	d10a      	bne.n	800914e <__cvt+0xba>
 8009138:	2200      	movs	r2, #0
 800913a:	2300      	movs	r3, #0
 800913c:	4630      	mov	r0, r6
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fcca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009144:	b918      	cbnz	r0, 800914e <__cvt+0xba>
 8009146:	f1c4 0401 	rsb	r4, r4, #1
 800914a:	f8ca 4000 	str.w	r4, [sl]
 800914e:	f8da 3000 	ldr.w	r3, [sl]
 8009152:	4499      	add	r9, r3
 8009154:	e7d3      	b.n	80090fe <__cvt+0x6a>
 8009156:	1c59      	adds	r1, r3, #1
 8009158:	9103      	str	r1, [sp, #12]
 800915a:	701a      	strb	r2, [r3, #0]
 800915c:	e7d9      	b.n	8009112 <__cvt+0x7e>

0800915e <__exponent>:
 800915e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009160:	2900      	cmp	r1, #0
 8009162:	bfba      	itte	lt
 8009164:	4249      	neglt	r1, r1
 8009166:	232d      	movlt	r3, #45	@ 0x2d
 8009168:	232b      	movge	r3, #43	@ 0x2b
 800916a:	2909      	cmp	r1, #9
 800916c:	7002      	strb	r2, [r0, #0]
 800916e:	7043      	strb	r3, [r0, #1]
 8009170:	dd29      	ble.n	80091c6 <__exponent+0x68>
 8009172:	f10d 0307 	add.w	r3, sp, #7
 8009176:	461d      	mov	r5, r3
 8009178:	270a      	movs	r7, #10
 800917a:	461a      	mov	r2, r3
 800917c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009180:	fb07 1416 	mls	r4, r7, r6, r1
 8009184:	3430      	adds	r4, #48	@ 0x30
 8009186:	f802 4c01 	strb.w	r4, [r2, #-1]
 800918a:	460c      	mov	r4, r1
 800918c:	2c63      	cmp	r4, #99	@ 0x63
 800918e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009192:	4631      	mov	r1, r6
 8009194:	dcf1      	bgt.n	800917a <__exponent+0x1c>
 8009196:	3130      	adds	r1, #48	@ 0x30
 8009198:	1e94      	subs	r4, r2, #2
 800919a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800919e:	1c41      	adds	r1, r0, #1
 80091a0:	4623      	mov	r3, r4
 80091a2:	42ab      	cmp	r3, r5
 80091a4:	d30a      	bcc.n	80091bc <__exponent+0x5e>
 80091a6:	f10d 0309 	add.w	r3, sp, #9
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	42ac      	cmp	r4, r5
 80091ae:	bf88      	it	hi
 80091b0:	2300      	movhi	r3, #0
 80091b2:	3302      	adds	r3, #2
 80091b4:	4403      	add	r3, r0
 80091b6:	1a18      	subs	r0, r3, r0
 80091b8:	b003      	add	sp, #12
 80091ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80091c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80091c4:	e7ed      	b.n	80091a2 <__exponent+0x44>
 80091c6:	2330      	movs	r3, #48	@ 0x30
 80091c8:	3130      	adds	r1, #48	@ 0x30
 80091ca:	7083      	strb	r3, [r0, #2]
 80091cc:	70c1      	strb	r1, [r0, #3]
 80091ce:	1d03      	adds	r3, r0, #4
 80091d0:	e7f1      	b.n	80091b6 <__exponent+0x58>
	...

080091d4 <_printf_float>:
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	b08d      	sub	sp, #52	@ 0x34
 80091da:	460c      	mov	r4, r1
 80091dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80091e0:	4616      	mov	r6, r2
 80091e2:	461f      	mov	r7, r3
 80091e4:	4605      	mov	r5, r0
 80091e6:	f000 feef 	bl	8009fc8 <_localeconv_r>
 80091ea:	6803      	ldr	r3, [r0, #0]
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7f7 f846 	bl	8000280 <strlen>
 80091f4:	2300      	movs	r3, #0
 80091f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091f8:	f8d8 3000 	ldr.w	r3, [r8]
 80091fc:	9005      	str	r0, [sp, #20]
 80091fe:	3307      	adds	r3, #7
 8009200:	f023 0307 	bic.w	r3, r3, #7
 8009204:	f103 0208 	add.w	r2, r3, #8
 8009208:	f894 a018 	ldrb.w	sl, [r4, #24]
 800920c:	f8d4 b000 	ldr.w	fp, [r4]
 8009210:	f8c8 2000 	str.w	r2, [r8]
 8009214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009218:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009222:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009226:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800922a:	4b9c      	ldr	r3, [pc, #624]	@ (800949c <_printf_float+0x2c8>)
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	f7f7 fc84 	bl	8000b3c <__aeabi_dcmpun>
 8009234:	bb70      	cbnz	r0, 8009294 <_printf_float+0xc0>
 8009236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800923a:	4b98      	ldr	r3, [pc, #608]	@ (800949c <_printf_float+0x2c8>)
 800923c:	f04f 32ff 	mov.w	r2, #4294967295
 8009240:	f7f7 fc5e 	bl	8000b00 <__aeabi_dcmple>
 8009244:	bb30      	cbnz	r0, 8009294 <_printf_float+0xc0>
 8009246:	2200      	movs	r2, #0
 8009248:	2300      	movs	r3, #0
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	f7f7 fc4d 	bl	8000aec <__aeabi_dcmplt>
 8009252:	b110      	cbz	r0, 800925a <_printf_float+0x86>
 8009254:	232d      	movs	r3, #45	@ 0x2d
 8009256:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800925a:	4a91      	ldr	r2, [pc, #580]	@ (80094a0 <_printf_float+0x2cc>)
 800925c:	4b91      	ldr	r3, [pc, #580]	@ (80094a4 <_printf_float+0x2d0>)
 800925e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009262:	bf94      	ite	ls
 8009264:	4690      	movls	r8, r2
 8009266:	4698      	movhi	r8, r3
 8009268:	2303      	movs	r3, #3
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	f02b 0304 	bic.w	r3, fp, #4
 8009270:	6023      	str	r3, [r4, #0]
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	9700      	str	r7, [sp, #0]
 8009278:	4633      	mov	r3, r6
 800927a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f9d2 	bl	8009628 <_printf_common>
 8009284:	3001      	adds	r0, #1
 8009286:	f040 808d 	bne.w	80093a4 <_printf_float+0x1d0>
 800928a:	f04f 30ff 	mov.w	r0, #4294967295
 800928e:	b00d      	add	sp, #52	@ 0x34
 8009290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	4640      	mov	r0, r8
 800929a:	4649      	mov	r1, r9
 800929c:	f7f7 fc4e 	bl	8000b3c <__aeabi_dcmpun>
 80092a0:	b140      	cbz	r0, 80092b4 <_printf_float+0xe0>
 80092a2:	464b      	mov	r3, r9
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bfbc      	itt	lt
 80092a8:	232d      	movlt	r3, #45	@ 0x2d
 80092aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80092ae:	4a7e      	ldr	r2, [pc, #504]	@ (80094a8 <_printf_float+0x2d4>)
 80092b0:	4b7e      	ldr	r3, [pc, #504]	@ (80094ac <_printf_float+0x2d8>)
 80092b2:	e7d4      	b.n	800925e <_printf_float+0x8a>
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80092ba:	9206      	str	r2, [sp, #24]
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	d13b      	bne.n	8009338 <_printf_float+0x164>
 80092c0:	2306      	movs	r3, #6
 80092c2:	6063      	str	r3, [r4, #4]
 80092c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80092c8:	2300      	movs	r3, #0
 80092ca:	6022      	str	r2, [r4, #0]
 80092cc:	9303      	str	r3, [sp, #12]
 80092ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80092d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80092d4:	ab09      	add	r3, sp, #36	@ 0x24
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	6861      	ldr	r1, [r4, #4]
 80092da:	ec49 8b10 	vmov	d0, r8, r9
 80092de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80092e2:	4628      	mov	r0, r5
 80092e4:	f7ff fed6 	bl	8009094 <__cvt>
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092ec:	2b47      	cmp	r3, #71	@ 0x47
 80092ee:	4680      	mov	r8, r0
 80092f0:	d129      	bne.n	8009346 <_printf_float+0x172>
 80092f2:	1cc8      	adds	r0, r1, #3
 80092f4:	db02      	blt.n	80092fc <_printf_float+0x128>
 80092f6:	6863      	ldr	r3, [r4, #4]
 80092f8:	4299      	cmp	r1, r3
 80092fa:	dd41      	ble.n	8009380 <_printf_float+0x1ac>
 80092fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8009300:	fa5f fa8a 	uxtb.w	sl, sl
 8009304:	3901      	subs	r1, #1
 8009306:	4652      	mov	r2, sl
 8009308:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800930c:	9109      	str	r1, [sp, #36]	@ 0x24
 800930e:	f7ff ff26 	bl	800915e <__exponent>
 8009312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009314:	1813      	adds	r3, r2, r0
 8009316:	2a01      	cmp	r2, #1
 8009318:	4681      	mov	r9, r0
 800931a:	6123      	str	r3, [r4, #16]
 800931c:	dc02      	bgt.n	8009324 <_printf_float+0x150>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	07d2      	lsls	r2, r2, #31
 8009322:	d501      	bpl.n	8009328 <_printf_float+0x154>
 8009324:	3301      	adds	r3, #1
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0a2      	beq.n	8009276 <_printf_float+0xa2>
 8009330:	232d      	movs	r3, #45	@ 0x2d
 8009332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009336:	e79e      	b.n	8009276 <_printf_float+0xa2>
 8009338:	9a06      	ldr	r2, [sp, #24]
 800933a:	2a47      	cmp	r2, #71	@ 0x47
 800933c:	d1c2      	bne.n	80092c4 <_printf_float+0xf0>
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1c0      	bne.n	80092c4 <_printf_float+0xf0>
 8009342:	2301      	movs	r3, #1
 8009344:	e7bd      	b.n	80092c2 <_printf_float+0xee>
 8009346:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800934a:	d9db      	bls.n	8009304 <_printf_float+0x130>
 800934c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009350:	d118      	bne.n	8009384 <_printf_float+0x1b0>
 8009352:	2900      	cmp	r1, #0
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	dd0b      	ble.n	8009370 <_printf_float+0x19c>
 8009358:	6121      	str	r1, [r4, #16]
 800935a:	b913      	cbnz	r3, 8009362 <_printf_float+0x18e>
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	07d0      	lsls	r0, r2, #31
 8009360:	d502      	bpl.n	8009368 <_printf_float+0x194>
 8009362:	3301      	adds	r3, #1
 8009364:	440b      	add	r3, r1
 8009366:	6123      	str	r3, [r4, #16]
 8009368:	65a1      	str	r1, [r4, #88]	@ 0x58
 800936a:	f04f 0900 	mov.w	r9, #0
 800936e:	e7db      	b.n	8009328 <_printf_float+0x154>
 8009370:	b913      	cbnz	r3, 8009378 <_printf_float+0x1a4>
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	07d2      	lsls	r2, r2, #31
 8009376:	d501      	bpl.n	800937c <_printf_float+0x1a8>
 8009378:	3302      	adds	r3, #2
 800937a:	e7f4      	b.n	8009366 <_printf_float+0x192>
 800937c:	2301      	movs	r3, #1
 800937e:	e7f2      	b.n	8009366 <_printf_float+0x192>
 8009380:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009386:	4299      	cmp	r1, r3
 8009388:	db05      	blt.n	8009396 <_printf_float+0x1c2>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	6121      	str	r1, [r4, #16]
 800938e:	07d8      	lsls	r0, r3, #31
 8009390:	d5ea      	bpl.n	8009368 <_printf_float+0x194>
 8009392:	1c4b      	adds	r3, r1, #1
 8009394:	e7e7      	b.n	8009366 <_printf_float+0x192>
 8009396:	2900      	cmp	r1, #0
 8009398:	bfd4      	ite	le
 800939a:	f1c1 0202 	rsble	r2, r1, #2
 800939e:	2201      	movgt	r2, #1
 80093a0:	4413      	add	r3, r2
 80093a2:	e7e0      	b.n	8009366 <_printf_float+0x192>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	055a      	lsls	r2, r3, #21
 80093a8:	d407      	bmi.n	80093ba <_printf_float+0x1e6>
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	4642      	mov	r2, r8
 80093ae:	4631      	mov	r1, r6
 80093b0:	4628      	mov	r0, r5
 80093b2:	47b8      	blx	r7
 80093b4:	3001      	adds	r0, #1
 80093b6:	d12b      	bne.n	8009410 <_printf_float+0x23c>
 80093b8:	e767      	b.n	800928a <_printf_float+0xb6>
 80093ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093be:	f240 80dd 	bls.w	800957c <_printf_float+0x3a8>
 80093c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	f7f7 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d033      	beq.n	800943a <_printf_float+0x266>
 80093d2:	4a37      	ldr	r2, [pc, #220]	@ (80094b0 <_printf_float+0x2dc>)
 80093d4:	2301      	movs	r3, #1
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	f43f af54 	beq.w	800928a <_printf_float+0xb6>
 80093e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80093e6:	4543      	cmp	r3, r8
 80093e8:	db02      	blt.n	80093f0 <_printf_float+0x21c>
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	07d8      	lsls	r0, r3, #31
 80093ee:	d50f      	bpl.n	8009410 <_printf_float+0x23c>
 80093f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093f4:	4631      	mov	r1, r6
 80093f6:	4628      	mov	r0, r5
 80093f8:	47b8      	blx	r7
 80093fa:	3001      	adds	r0, #1
 80093fc:	f43f af45 	beq.w	800928a <_printf_float+0xb6>
 8009400:	f04f 0900 	mov.w	r9, #0
 8009404:	f108 38ff 	add.w	r8, r8, #4294967295
 8009408:	f104 0a1a 	add.w	sl, r4, #26
 800940c:	45c8      	cmp	r8, r9
 800940e:	dc09      	bgt.n	8009424 <_printf_float+0x250>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	079b      	lsls	r3, r3, #30
 8009414:	f100 8103 	bmi.w	800961e <_printf_float+0x44a>
 8009418:	68e0      	ldr	r0, [r4, #12]
 800941a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800941c:	4298      	cmp	r0, r3
 800941e:	bfb8      	it	lt
 8009420:	4618      	movlt	r0, r3
 8009422:	e734      	b.n	800928e <_printf_float+0xba>
 8009424:	2301      	movs	r3, #1
 8009426:	4652      	mov	r2, sl
 8009428:	4631      	mov	r1, r6
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	f43f af2b 	beq.w	800928a <_printf_float+0xb6>
 8009434:	f109 0901 	add.w	r9, r9, #1
 8009438:	e7e8      	b.n	800940c <_printf_float+0x238>
 800943a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800943c:	2b00      	cmp	r3, #0
 800943e:	dc39      	bgt.n	80094b4 <_printf_float+0x2e0>
 8009440:	4a1b      	ldr	r2, [pc, #108]	@ (80094b0 <_printf_float+0x2dc>)
 8009442:	2301      	movs	r3, #1
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f af1d 	beq.w	800928a <_printf_float+0xb6>
 8009450:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009454:	ea59 0303 	orrs.w	r3, r9, r3
 8009458:	d102      	bne.n	8009460 <_printf_float+0x28c>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	07d9      	lsls	r1, r3, #31
 800945e:	d5d7      	bpl.n	8009410 <_printf_float+0x23c>
 8009460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009464:	4631      	mov	r1, r6
 8009466:	4628      	mov	r0, r5
 8009468:	47b8      	blx	r7
 800946a:	3001      	adds	r0, #1
 800946c:	f43f af0d 	beq.w	800928a <_printf_float+0xb6>
 8009470:	f04f 0a00 	mov.w	sl, #0
 8009474:	f104 0b1a 	add.w	fp, r4, #26
 8009478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800947a:	425b      	negs	r3, r3
 800947c:	4553      	cmp	r3, sl
 800947e:	dc01      	bgt.n	8009484 <_printf_float+0x2b0>
 8009480:	464b      	mov	r3, r9
 8009482:	e793      	b.n	80093ac <_printf_float+0x1d8>
 8009484:	2301      	movs	r3, #1
 8009486:	465a      	mov	r2, fp
 8009488:	4631      	mov	r1, r6
 800948a:	4628      	mov	r0, r5
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f aefb 	beq.w	800928a <_printf_float+0xb6>
 8009494:	f10a 0a01 	add.w	sl, sl, #1
 8009498:	e7ee      	b.n	8009478 <_printf_float+0x2a4>
 800949a:	bf00      	nop
 800949c:	7fefffff 	.word	0x7fefffff
 80094a0:	08010239 	.word	0x08010239
 80094a4:	0801023d 	.word	0x0801023d
 80094a8:	08010241 	.word	0x08010241
 80094ac:	08010245 	.word	0x08010245
 80094b0:	08010249 	.word	0x08010249
 80094b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80094b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094ba:	4553      	cmp	r3, sl
 80094bc:	bfa8      	it	ge
 80094be:	4653      	movge	r3, sl
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	4699      	mov	r9, r3
 80094c4:	dc36      	bgt.n	8009534 <_printf_float+0x360>
 80094c6:	f04f 0b00 	mov.w	fp, #0
 80094ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094ce:	f104 021a 	add.w	r2, r4, #26
 80094d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80094d4:	9306      	str	r3, [sp, #24]
 80094d6:	eba3 0309 	sub.w	r3, r3, r9
 80094da:	455b      	cmp	r3, fp
 80094dc:	dc31      	bgt.n	8009542 <_printf_float+0x36e>
 80094de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094e0:	459a      	cmp	sl, r3
 80094e2:	dc3a      	bgt.n	800955a <_printf_float+0x386>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	07da      	lsls	r2, r3, #31
 80094e8:	d437      	bmi.n	800955a <_printf_float+0x386>
 80094ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ec:	ebaa 0903 	sub.w	r9, sl, r3
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	ebaa 0303 	sub.w	r3, sl, r3
 80094f6:	4599      	cmp	r9, r3
 80094f8:	bfa8      	it	ge
 80094fa:	4699      	movge	r9, r3
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	dc33      	bgt.n	800956a <_printf_float+0x396>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800950a:	f104 0b1a 	add.w	fp, r4, #26
 800950e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009510:	ebaa 0303 	sub.w	r3, sl, r3
 8009514:	eba3 0309 	sub.w	r3, r3, r9
 8009518:	4543      	cmp	r3, r8
 800951a:	f77f af79 	ble.w	8009410 <_printf_float+0x23c>
 800951e:	2301      	movs	r3, #1
 8009520:	465a      	mov	r2, fp
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f aeae 	beq.w	800928a <_printf_float+0xb6>
 800952e:	f108 0801 	add.w	r8, r8, #1
 8009532:	e7ec      	b.n	800950e <_printf_float+0x33a>
 8009534:	4642      	mov	r2, r8
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	d1c2      	bne.n	80094c6 <_printf_float+0x2f2>
 8009540:	e6a3      	b.n	800928a <_printf_float+0xb6>
 8009542:	2301      	movs	r3, #1
 8009544:	4631      	mov	r1, r6
 8009546:	4628      	mov	r0, r5
 8009548:	9206      	str	r2, [sp, #24]
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae9c 	beq.w	800928a <_printf_float+0xb6>
 8009552:	9a06      	ldr	r2, [sp, #24]
 8009554:	f10b 0b01 	add.w	fp, fp, #1
 8009558:	e7bb      	b.n	80094d2 <_printf_float+0x2fe>
 800955a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	d1c0      	bne.n	80094ea <_printf_float+0x316>
 8009568:	e68f      	b.n	800928a <_printf_float+0xb6>
 800956a:	9a06      	ldr	r2, [sp, #24]
 800956c:	464b      	mov	r3, r9
 800956e:	4442      	add	r2, r8
 8009570:	4631      	mov	r1, r6
 8009572:	4628      	mov	r0, r5
 8009574:	47b8      	blx	r7
 8009576:	3001      	adds	r0, #1
 8009578:	d1c3      	bne.n	8009502 <_printf_float+0x32e>
 800957a:	e686      	b.n	800928a <_printf_float+0xb6>
 800957c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009580:	f1ba 0f01 	cmp.w	sl, #1
 8009584:	dc01      	bgt.n	800958a <_printf_float+0x3b6>
 8009586:	07db      	lsls	r3, r3, #31
 8009588:	d536      	bpl.n	80095f8 <_printf_float+0x424>
 800958a:	2301      	movs	r3, #1
 800958c:	4642      	mov	r2, r8
 800958e:	4631      	mov	r1, r6
 8009590:	4628      	mov	r0, r5
 8009592:	47b8      	blx	r7
 8009594:	3001      	adds	r0, #1
 8009596:	f43f ae78 	beq.w	800928a <_printf_float+0xb6>
 800959a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800959e:	4631      	mov	r1, r6
 80095a0:	4628      	mov	r0, r5
 80095a2:	47b8      	blx	r7
 80095a4:	3001      	adds	r0, #1
 80095a6:	f43f ae70 	beq.w	800928a <_printf_float+0xb6>
 80095aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095ae:	2200      	movs	r2, #0
 80095b0:	2300      	movs	r3, #0
 80095b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095b6:	f7f7 fa8f 	bl	8000ad8 <__aeabi_dcmpeq>
 80095ba:	b9c0      	cbnz	r0, 80095ee <_printf_float+0x41a>
 80095bc:	4653      	mov	r3, sl
 80095be:	f108 0201 	add.w	r2, r8, #1
 80095c2:	4631      	mov	r1, r6
 80095c4:	4628      	mov	r0, r5
 80095c6:	47b8      	blx	r7
 80095c8:	3001      	adds	r0, #1
 80095ca:	d10c      	bne.n	80095e6 <_printf_float+0x412>
 80095cc:	e65d      	b.n	800928a <_printf_float+0xb6>
 80095ce:	2301      	movs	r3, #1
 80095d0:	465a      	mov	r2, fp
 80095d2:	4631      	mov	r1, r6
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b8      	blx	r7
 80095d8:	3001      	adds	r0, #1
 80095da:	f43f ae56 	beq.w	800928a <_printf_float+0xb6>
 80095de:	f108 0801 	add.w	r8, r8, #1
 80095e2:	45d0      	cmp	r8, sl
 80095e4:	dbf3      	blt.n	80095ce <_printf_float+0x3fa>
 80095e6:	464b      	mov	r3, r9
 80095e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80095ec:	e6df      	b.n	80093ae <_printf_float+0x1da>
 80095ee:	f04f 0800 	mov.w	r8, #0
 80095f2:	f104 0b1a 	add.w	fp, r4, #26
 80095f6:	e7f4      	b.n	80095e2 <_printf_float+0x40e>
 80095f8:	2301      	movs	r3, #1
 80095fa:	4642      	mov	r2, r8
 80095fc:	e7e1      	b.n	80095c2 <_printf_float+0x3ee>
 80095fe:	2301      	movs	r3, #1
 8009600:	464a      	mov	r2, r9
 8009602:	4631      	mov	r1, r6
 8009604:	4628      	mov	r0, r5
 8009606:	47b8      	blx	r7
 8009608:	3001      	adds	r0, #1
 800960a:	f43f ae3e 	beq.w	800928a <_printf_float+0xb6>
 800960e:	f108 0801 	add.w	r8, r8, #1
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	4543      	cmp	r3, r8
 800961a:	dcf0      	bgt.n	80095fe <_printf_float+0x42a>
 800961c:	e6fc      	b.n	8009418 <_printf_float+0x244>
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	f104 0919 	add.w	r9, r4, #25
 8009626:	e7f4      	b.n	8009612 <_printf_float+0x43e>

08009628 <_printf_common>:
 8009628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962c:	4616      	mov	r6, r2
 800962e:	4698      	mov	r8, r3
 8009630:	688a      	ldr	r2, [r1, #8]
 8009632:	690b      	ldr	r3, [r1, #16]
 8009634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009638:	4293      	cmp	r3, r2
 800963a:	bfb8      	it	lt
 800963c:	4613      	movlt	r3, r2
 800963e:	6033      	str	r3, [r6, #0]
 8009640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009644:	4607      	mov	r7, r0
 8009646:	460c      	mov	r4, r1
 8009648:	b10a      	cbz	r2, 800964e <_printf_common+0x26>
 800964a:	3301      	adds	r3, #1
 800964c:	6033      	str	r3, [r6, #0]
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	0699      	lsls	r1, r3, #26
 8009652:	bf42      	ittt	mi
 8009654:	6833      	ldrmi	r3, [r6, #0]
 8009656:	3302      	addmi	r3, #2
 8009658:	6033      	strmi	r3, [r6, #0]
 800965a:	6825      	ldr	r5, [r4, #0]
 800965c:	f015 0506 	ands.w	r5, r5, #6
 8009660:	d106      	bne.n	8009670 <_printf_common+0x48>
 8009662:	f104 0a19 	add.w	sl, r4, #25
 8009666:	68e3      	ldr	r3, [r4, #12]
 8009668:	6832      	ldr	r2, [r6, #0]
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	42ab      	cmp	r3, r5
 800966e:	dc26      	bgt.n	80096be <_printf_common+0x96>
 8009670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	3b00      	subs	r3, #0
 8009678:	bf18      	it	ne
 800967a:	2301      	movne	r3, #1
 800967c:	0692      	lsls	r2, r2, #26
 800967e:	d42b      	bmi.n	80096d8 <_printf_common+0xb0>
 8009680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009684:	4641      	mov	r1, r8
 8009686:	4638      	mov	r0, r7
 8009688:	47c8      	blx	r9
 800968a:	3001      	adds	r0, #1
 800968c:	d01e      	beq.n	80096cc <_printf_common+0xa4>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	6922      	ldr	r2, [r4, #16]
 8009692:	f003 0306 	and.w	r3, r3, #6
 8009696:	2b04      	cmp	r3, #4
 8009698:	bf02      	ittt	eq
 800969a:	68e5      	ldreq	r5, [r4, #12]
 800969c:	6833      	ldreq	r3, [r6, #0]
 800969e:	1aed      	subeq	r5, r5, r3
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	bf0c      	ite	eq
 80096a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096a8:	2500      	movne	r5, #0
 80096aa:	4293      	cmp	r3, r2
 80096ac:	bfc4      	itt	gt
 80096ae:	1a9b      	subgt	r3, r3, r2
 80096b0:	18ed      	addgt	r5, r5, r3
 80096b2:	2600      	movs	r6, #0
 80096b4:	341a      	adds	r4, #26
 80096b6:	42b5      	cmp	r5, r6
 80096b8:	d11a      	bne.n	80096f0 <_printf_common+0xc8>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e008      	b.n	80096d0 <_printf_common+0xa8>
 80096be:	2301      	movs	r3, #1
 80096c0:	4652      	mov	r2, sl
 80096c2:	4641      	mov	r1, r8
 80096c4:	4638      	mov	r0, r7
 80096c6:	47c8      	blx	r9
 80096c8:	3001      	adds	r0, #1
 80096ca:	d103      	bne.n	80096d4 <_printf_common+0xac>
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d4:	3501      	adds	r5, #1
 80096d6:	e7c6      	b.n	8009666 <_printf_common+0x3e>
 80096d8:	18e1      	adds	r1, r4, r3
 80096da:	1c5a      	adds	r2, r3, #1
 80096dc:	2030      	movs	r0, #48	@ 0x30
 80096de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096e2:	4422      	add	r2, r4
 80096e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096ec:	3302      	adds	r3, #2
 80096ee:	e7c7      	b.n	8009680 <_printf_common+0x58>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4622      	mov	r2, r4
 80096f4:	4641      	mov	r1, r8
 80096f6:	4638      	mov	r0, r7
 80096f8:	47c8      	blx	r9
 80096fa:	3001      	adds	r0, #1
 80096fc:	d0e6      	beq.n	80096cc <_printf_common+0xa4>
 80096fe:	3601      	adds	r6, #1
 8009700:	e7d9      	b.n	80096b6 <_printf_common+0x8e>
	...

08009704 <_printf_i>:
 8009704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	7e0f      	ldrb	r7, [r1, #24]
 800970a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800970c:	2f78      	cmp	r7, #120	@ 0x78
 800970e:	4691      	mov	r9, r2
 8009710:	4680      	mov	r8, r0
 8009712:	460c      	mov	r4, r1
 8009714:	469a      	mov	sl, r3
 8009716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800971a:	d807      	bhi.n	800972c <_printf_i+0x28>
 800971c:	2f62      	cmp	r7, #98	@ 0x62
 800971e:	d80a      	bhi.n	8009736 <_printf_i+0x32>
 8009720:	2f00      	cmp	r7, #0
 8009722:	f000 80d2 	beq.w	80098ca <_printf_i+0x1c6>
 8009726:	2f58      	cmp	r7, #88	@ 0x58
 8009728:	f000 80b9 	beq.w	800989e <_printf_i+0x19a>
 800972c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009734:	e03a      	b.n	80097ac <_printf_i+0xa8>
 8009736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800973a:	2b15      	cmp	r3, #21
 800973c:	d8f6      	bhi.n	800972c <_printf_i+0x28>
 800973e:	a101      	add	r1, pc, #4	@ (adr r1, 8009744 <_printf_i+0x40>)
 8009740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009744:	0800979d 	.word	0x0800979d
 8009748:	080097b1 	.word	0x080097b1
 800974c:	0800972d 	.word	0x0800972d
 8009750:	0800972d 	.word	0x0800972d
 8009754:	0800972d 	.word	0x0800972d
 8009758:	0800972d 	.word	0x0800972d
 800975c:	080097b1 	.word	0x080097b1
 8009760:	0800972d 	.word	0x0800972d
 8009764:	0800972d 	.word	0x0800972d
 8009768:	0800972d 	.word	0x0800972d
 800976c:	0800972d 	.word	0x0800972d
 8009770:	080098b1 	.word	0x080098b1
 8009774:	080097db 	.word	0x080097db
 8009778:	0800986b 	.word	0x0800986b
 800977c:	0800972d 	.word	0x0800972d
 8009780:	0800972d 	.word	0x0800972d
 8009784:	080098d3 	.word	0x080098d3
 8009788:	0800972d 	.word	0x0800972d
 800978c:	080097db 	.word	0x080097db
 8009790:	0800972d 	.word	0x0800972d
 8009794:	0800972d 	.word	0x0800972d
 8009798:	08009873 	.word	0x08009873
 800979c:	6833      	ldr	r3, [r6, #0]
 800979e:	1d1a      	adds	r2, r3, #4
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6032      	str	r2, [r6, #0]
 80097a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097ac:	2301      	movs	r3, #1
 80097ae:	e09d      	b.n	80098ec <_printf_i+0x1e8>
 80097b0:	6833      	ldr	r3, [r6, #0]
 80097b2:	6820      	ldr	r0, [r4, #0]
 80097b4:	1d19      	adds	r1, r3, #4
 80097b6:	6031      	str	r1, [r6, #0]
 80097b8:	0606      	lsls	r6, r0, #24
 80097ba:	d501      	bpl.n	80097c0 <_printf_i+0xbc>
 80097bc:	681d      	ldr	r5, [r3, #0]
 80097be:	e003      	b.n	80097c8 <_printf_i+0xc4>
 80097c0:	0645      	lsls	r5, r0, #25
 80097c2:	d5fb      	bpl.n	80097bc <_printf_i+0xb8>
 80097c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	da03      	bge.n	80097d4 <_printf_i+0xd0>
 80097cc:	232d      	movs	r3, #45	@ 0x2d
 80097ce:	426d      	negs	r5, r5
 80097d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097d4:	4859      	ldr	r0, [pc, #356]	@ (800993c <_printf_i+0x238>)
 80097d6:	230a      	movs	r3, #10
 80097d8:	e011      	b.n	80097fe <_printf_i+0xfa>
 80097da:	6821      	ldr	r1, [r4, #0]
 80097dc:	6833      	ldr	r3, [r6, #0]
 80097de:	0608      	lsls	r0, r1, #24
 80097e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80097e4:	d402      	bmi.n	80097ec <_printf_i+0xe8>
 80097e6:	0649      	lsls	r1, r1, #25
 80097e8:	bf48      	it	mi
 80097ea:	b2ad      	uxthmi	r5, r5
 80097ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80097ee:	4853      	ldr	r0, [pc, #332]	@ (800993c <_printf_i+0x238>)
 80097f0:	6033      	str	r3, [r6, #0]
 80097f2:	bf14      	ite	ne
 80097f4:	230a      	movne	r3, #10
 80097f6:	2308      	moveq	r3, #8
 80097f8:	2100      	movs	r1, #0
 80097fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097fe:	6866      	ldr	r6, [r4, #4]
 8009800:	60a6      	str	r6, [r4, #8]
 8009802:	2e00      	cmp	r6, #0
 8009804:	bfa2      	ittt	ge
 8009806:	6821      	ldrge	r1, [r4, #0]
 8009808:	f021 0104 	bicge.w	r1, r1, #4
 800980c:	6021      	strge	r1, [r4, #0]
 800980e:	b90d      	cbnz	r5, 8009814 <_printf_i+0x110>
 8009810:	2e00      	cmp	r6, #0
 8009812:	d04b      	beq.n	80098ac <_printf_i+0x1a8>
 8009814:	4616      	mov	r6, r2
 8009816:	fbb5 f1f3 	udiv	r1, r5, r3
 800981a:	fb03 5711 	mls	r7, r3, r1, r5
 800981e:	5dc7      	ldrb	r7, [r0, r7]
 8009820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009824:	462f      	mov	r7, r5
 8009826:	42bb      	cmp	r3, r7
 8009828:	460d      	mov	r5, r1
 800982a:	d9f4      	bls.n	8009816 <_printf_i+0x112>
 800982c:	2b08      	cmp	r3, #8
 800982e:	d10b      	bne.n	8009848 <_printf_i+0x144>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	07df      	lsls	r7, r3, #31
 8009834:	d508      	bpl.n	8009848 <_printf_i+0x144>
 8009836:	6923      	ldr	r3, [r4, #16]
 8009838:	6861      	ldr	r1, [r4, #4]
 800983a:	4299      	cmp	r1, r3
 800983c:	bfde      	ittt	le
 800983e:	2330      	movle	r3, #48	@ 0x30
 8009840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009848:	1b92      	subs	r2, r2, r6
 800984a:	6122      	str	r2, [r4, #16]
 800984c:	f8cd a000 	str.w	sl, [sp]
 8009850:	464b      	mov	r3, r9
 8009852:	aa03      	add	r2, sp, #12
 8009854:	4621      	mov	r1, r4
 8009856:	4640      	mov	r0, r8
 8009858:	f7ff fee6 	bl	8009628 <_printf_common>
 800985c:	3001      	adds	r0, #1
 800985e:	d14a      	bne.n	80098f6 <_printf_i+0x1f2>
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	b004      	add	sp, #16
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	6823      	ldr	r3, [r4, #0]
 800986c:	f043 0320 	orr.w	r3, r3, #32
 8009870:	6023      	str	r3, [r4, #0]
 8009872:	4833      	ldr	r0, [pc, #204]	@ (8009940 <_printf_i+0x23c>)
 8009874:	2778      	movs	r7, #120	@ 0x78
 8009876:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	6831      	ldr	r1, [r6, #0]
 800987e:	061f      	lsls	r7, r3, #24
 8009880:	f851 5b04 	ldr.w	r5, [r1], #4
 8009884:	d402      	bmi.n	800988c <_printf_i+0x188>
 8009886:	065f      	lsls	r7, r3, #25
 8009888:	bf48      	it	mi
 800988a:	b2ad      	uxthmi	r5, r5
 800988c:	6031      	str	r1, [r6, #0]
 800988e:	07d9      	lsls	r1, r3, #31
 8009890:	bf44      	itt	mi
 8009892:	f043 0320 	orrmi.w	r3, r3, #32
 8009896:	6023      	strmi	r3, [r4, #0]
 8009898:	b11d      	cbz	r5, 80098a2 <_printf_i+0x19e>
 800989a:	2310      	movs	r3, #16
 800989c:	e7ac      	b.n	80097f8 <_printf_i+0xf4>
 800989e:	4827      	ldr	r0, [pc, #156]	@ (800993c <_printf_i+0x238>)
 80098a0:	e7e9      	b.n	8009876 <_printf_i+0x172>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	f023 0320 	bic.w	r3, r3, #32
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	e7f6      	b.n	800989a <_printf_i+0x196>
 80098ac:	4616      	mov	r6, r2
 80098ae:	e7bd      	b.n	800982c <_printf_i+0x128>
 80098b0:	6833      	ldr	r3, [r6, #0]
 80098b2:	6825      	ldr	r5, [r4, #0]
 80098b4:	6961      	ldr	r1, [r4, #20]
 80098b6:	1d18      	adds	r0, r3, #4
 80098b8:	6030      	str	r0, [r6, #0]
 80098ba:	062e      	lsls	r6, r5, #24
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	d501      	bpl.n	80098c4 <_printf_i+0x1c0>
 80098c0:	6019      	str	r1, [r3, #0]
 80098c2:	e002      	b.n	80098ca <_printf_i+0x1c6>
 80098c4:	0668      	lsls	r0, r5, #25
 80098c6:	d5fb      	bpl.n	80098c0 <_printf_i+0x1bc>
 80098c8:	8019      	strh	r1, [r3, #0]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6123      	str	r3, [r4, #16]
 80098ce:	4616      	mov	r6, r2
 80098d0:	e7bc      	b.n	800984c <_printf_i+0x148>
 80098d2:	6833      	ldr	r3, [r6, #0]
 80098d4:	1d1a      	adds	r2, r3, #4
 80098d6:	6032      	str	r2, [r6, #0]
 80098d8:	681e      	ldr	r6, [r3, #0]
 80098da:	6862      	ldr	r2, [r4, #4]
 80098dc:	2100      	movs	r1, #0
 80098de:	4630      	mov	r0, r6
 80098e0:	f7f6 fc7e 	bl	80001e0 <memchr>
 80098e4:	b108      	cbz	r0, 80098ea <_printf_i+0x1e6>
 80098e6:	1b80      	subs	r0, r0, r6
 80098e8:	6060      	str	r0, [r4, #4]
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	2300      	movs	r3, #0
 80098f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098f4:	e7aa      	b.n	800984c <_printf_i+0x148>
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	4632      	mov	r2, r6
 80098fa:	4649      	mov	r1, r9
 80098fc:	4640      	mov	r0, r8
 80098fe:	47d0      	blx	sl
 8009900:	3001      	adds	r0, #1
 8009902:	d0ad      	beq.n	8009860 <_printf_i+0x15c>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	079b      	lsls	r3, r3, #30
 8009908:	d413      	bmi.n	8009932 <_printf_i+0x22e>
 800990a:	68e0      	ldr	r0, [r4, #12]
 800990c:	9b03      	ldr	r3, [sp, #12]
 800990e:	4298      	cmp	r0, r3
 8009910:	bfb8      	it	lt
 8009912:	4618      	movlt	r0, r3
 8009914:	e7a6      	b.n	8009864 <_printf_i+0x160>
 8009916:	2301      	movs	r3, #1
 8009918:	4632      	mov	r2, r6
 800991a:	4649      	mov	r1, r9
 800991c:	4640      	mov	r0, r8
 800991e:	47d0      	blx	sl
 8009920:	3001      	adds	r0, #1
 8009922:	d09d      	beq.n	8009860 <_printf_i+0x15c>
 8009924:	3501      	adds	r5, #1
 8009926:	68e3      	ldr	r3, [r4, #12]
 8009928:	9903      	ldr	r1, [sp, #12]
 800992a:	1a5b      	subs	r3, r3, r1
 800992c:	42ab      	cmp	r3, r5
 800992e:	dcf2      	bgt.n	8009916 <_printf_i+0x212>
 8009930:	e7eb      	b.n	800990a <_printf_i+0x206>
 8009932:	2500      	movs	r5, #0
 8009934:	f104 0619 	add.w	r6, r4, #25
 8009938:	e7f5      	b.n	8009926 <_printf_i+0x222>
 800993a:	bf00      	nop
 800993c:	0801024b 	.word	0x0801024b
 8009940:	0801025c 	.word	0x0801025c

08009944 <_scanf_float>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	b087      	sub	sp, #28
 800994a:	4617      	mov	r7, r2
 800994c:	9303      	str	r3, [sp, #12]
 800994e:	688b      	ldr	r3, [r1, #8]
 8009950:	1e5a      	subs	r2, r3, #1
 8009952:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009956:	bf81      	itttt	hi
 8009958:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800995c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009960:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009964:	608b      	strhi	r3, [r1, #8]
 8009966:	680b      	ldr	r3, [r1, #0]
 8009968:	460a      	mov	r2, r1
 800996a:	f04f 0500 	mov.w	r5, #0
 800996e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009972:	f842 3b1c 	str.w	r3, [r2], #28
 8009976:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800997a:	4680      	mov	r8, r0
 800997c:	460c      	mov	r4, r1
 800997e:	bf98      	it	ls
 8009980:	f04f 0b00 	movls.w	fp, #0
 8009984:	9201      	str	r2, [sp, #4]
 8009986:	4616      	mov	r6, r2
 8009988:	46aa      	mov	sl, r5
 800998a:	46a9      	mov	r9, r5
 800998c:	9502      	str	r5, [sp, #8]
 800998e:	68a2      	ldr	r2, [r4, #8]
 8009990:	b152      	cbz	r2, 80099a8 <_scanf_float+0x64>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b4e      	cmp	r3, #78	@ 0x4e
 8009998:	d864      	bhi.n	8009a64 <_scanf_float+0x120>
 800999a:	2b40      	cmp	r3, #64	@ 0x40
 800999c:	d83c      	bhi.n	8009a18 <_scanf_float+0xd4>
 800999e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80099a2:	b2c8      	uxtb	r0, r1
 80099a4:	280e      	cmp	r0, #14
 80099a6:	d93a      	bls.n	8009a1e <_scanf_float+0xda>
 80099a8:	f1b9 0f00 	cmp.w	r9, #0
 80099ac:	d003      	beq.n	80099b6 <_scanf_float+0x72>
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099ba:	f1ba 0f01 	cmp.w	sl, #1
 80099be:	f200 8117 	bhi.w	8009bf0 <_scanf_float+0x2ac>
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	429e      	cmp	r6, r3
 80099c6:	f200 8108 	bhi.w	8009bda <_scanf_float+0x296>
 80099ca:	2001      	movs	r0, #1
 80099cc:	b007      	add	sp, #28
 80099ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80099d6:	2a0d      	cmp	r2, #13
 80099d8:	d8e6      	bhi.n	80099a8 <_scanf_float+0x64>
 80099da:	a101      	add	r1, pc, #4	@ (adr r1, 80099e0 <_scanf_float+0x9c>)
 80099dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099e0:	08009b27 	.word	0x08009b27
 80099e4:	080099a9 	.word	0x080099a9
 80099e8:	080099a9 	.word	0x080099a9
 80099ec:	080099a9 	.word	0x080099a9
 80099f0:	08009b87 	.word	0x08009b87
 80099f4:	08009b5f 	.word	0x08009b5f
 80099f8:	080099a9 	.word	0x080099a9
 80099fc:	080099a9 	.word	0x080099a9
 8009a00:	08009b35 	.word	0x08009b35
 8009a04:	080099a9 	.word	0x080099a9
 8009a08:	080099a9 	.word	0x080099a9
 8009a0c:	080099a9 	.word	0x080099a9
 8009a10:	080099a9 	.word	0x080099a9
 8009a14:	08009aed 	.word	0x08009aed
 8009a18:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009a1c:	e7db      	b.n	80099d6 <_scanf_float+0x92>
 8009a1e:	290e      	cmp	r1, #14
 8009a20:	d8c2      	bhi.n	80099a8 <_scanf_float+0x64>
 8009a22:	a001      	add	r0, pc, #4	@ (adr r0, 8009a28 <_scanf_float+0xe4>)
 8009a24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009a28:	08009add 	.word	0x08009add
 8009a2c:	080099a9 	.word	0x080099a9
 8009a30:	08009add 	.word	0x08009add
 8009a34:	08009b73 	.word	0x08009b73
 8009a38:	080099a9 	.word	0x080099a9
 8009a3c:	08009a85 	.word	0x08009a85
 8009a40:	08009ac3 	.word	0x08009ac3
 8009a44:	08009ac3 	.word	0x08009ac3
 8009a48:	08009ac3 	.word	0x08009ac3
 8009a4c:	08009ac3 	.word	0x08009ac3
 8009a50:	08009ac3 	.word	0x08009ac3
 8009a54:	08009ac3 	.word	0x08009ac3
 8009a58:	08009ac3 	.word	0x08009ac3
 8009a5c:	08009ac3 	.word	0x08009ac3
 8009a60:	08009ac3 	.word	0x08009ac3
 8009a64:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a66:	d809      	bhi.n	8009a7c <_scanf_float+0x138>
 8009a68:	2b60      	cmp	r3, #96	@ 0x60
 8009a6a:	d8b2      	bhi.n	80099d2 <_scanf_float+0x8e>
 8009a6c:	2b54      	cmp	r3, #84	@ 0x54
 8009a6e:	d07b      	beq.n	8009b68 <_scanf_float+0x224>
 8009a70:	2b59      	cmp	r3, #89	@ 0x59
 8009a72:	d199      	bne.n	80099a8 <_scanf_float+0x64>
 8009a74:	2d07      	cmp	r5, #7
 8009a76:	d197      	bne.n	80099a8 <_scanf_float+0x64>
 8009a78:	2508      	movs	r5, #8
 8009a7a:	e02c      	b.n	8009ad6 <_scanf_float+0x192>
 8009a7c:	2b74      	cmp	r3, #116	@ 0x74
 8009a7e:	d073      	beq.n	8009b68 <_scanf_float+0x224>
 8009a80:	2b79      	cmp	r3, #121	@ 0x79
 8009a82:	e7f6      	b.n	8009a72 <_scanf_float+0x12e>
 8009a84:	6821      	ldr	r1, [r4, #0]
 8009a86:	05c8      	lsls	r0, r1, #23
 8009a88:	d51b      	bpl.n	8009ac2 <_scanf_float+0x17e>
 8009a8a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009a8e:	6021      	str	r1, [r4, #0]
 8009a90:	f109 0901 	add.w	r9, r9, #1
 8009a94:	f1bb 0f00 	cmp.w	fp, #0
 8009a98:	d003      	beq.n	8009aa2 <_scanf_float+0x15e>
 8009a9a:	3201      	adds	r2, #1
 8009a9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009aa0:	60a2      	str	r2, [r4, #8]
 8009aa2:	68a3      	ldr	r3, [r4, #8]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	6923      	ldr	r3, [r4, #16]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	6123      	str	r3, [r4, #16]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	607b      	str	r3, [r7, #4]
 8009ab6:	f340 8087 	ble.w	8009bc8 <_scanf_float+0x284>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	3301      	adds	r3, #1
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	e765      	b.n	800998e <_scanf_float+0x4a>
 8009ac2:	eb1a 0105 	adds.w	r1, sl, r5
 8009ac6:	f47f af6f 	bne.w	80099a8 <_scanf_float+0x64>
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009ad0:	6022      	str	r2, [r4, #0]
 8009ad2:	460d      	mov	r5, r1
 8009ad4:	468a      	mov	sl, r1
 8009ad6:	f806 3b01 	strb.w	r3, [r6], #1
 8009ada:	e7e2      	b.n	8009aa2 <_scanf_float+0x15e>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	0610      	lsls	r0, r2, #24
 8009ae0:	f57f af62 	bpl.w	80099a8 <_scanf_float+0x64>
 8009ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ae8:	6022      	str	r2, [r4, #0]
 8009aea:	e7f4      	b.n	8009ad6 <_scanf_float+0x192>
 8009aec:	f1ba 0f00 	cmp.w	sl, #0
 8009af0:	d10e      	bne.n	8009b10 <_scanf_float+0x1cc>
 8009af2:	f1b9 0f00 	cmp.w	r9, #0
 8009af6:	d10e      	bne.n	8009b16 <_scanf_float+0x1d2>
 8009af8:	6822      	ldr	r2, [r4, #0]
 8009afa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009afe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009b02:	d108      	bne.n	8009b16 <_scanf_float+0x1d2>
 8009b04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	f04f 0a01 	mov.w	sl, #1
 8009b0e:	e7e2      	b.n	8009ad6 <_scanf_float+0x192>
 8009b10:	f1ba 0f02 	cmp.w	sl, #2
 8009b14:	d055      	beq.n	8009bc2 <_scanf_float+0x27e>
 8009b16:	2d01      	cmp	r5, #1
 8009b18:	d002      	beq.n	8009b20 <_scanf_float+0x1dc>
 8009b1a:	2d04      	cmp	r5, #4
 8009b1c:	f47f af44 	bne.w	80099a8 <_scanf_float+0x64>
 8009b20:	3501      	adds	r5, #1
 8009b22:	b2ed      	uxtb	r5, r5
 8009b24:	e7d7      	b.n	8009ad6 <_scanf_float+0x192>
 8009b26:	f1ba 0f01 	cmp.w	sl, #1
 8009b2a:	f47f af3d 	bne.w	80099a8 <_scanf_float+0x64>
 8009b2e:	f04f 0a02 	mov.w	sl, #2
 8009b32:	e7d0      	b.n	8009ad6 <_scanf_float+0x192>
 8009b34:	b97d      	cbnz	r5, 8009b56 <_scanf_float+0x212>
 8009b36:	f1b9 0f00 	cmp.w	r9, #0
 8009b3a:	f47f af38 	bne.w	80099ae <_scanf_float+0x6a>
 8009b3e:	6822      	ldr	r2, [r4, #0]
 8009b40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009b44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009b48:	f040 8108 	bne.w	8009d5c <_scanf_float+0x418>
 8009b4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b50:	6022      	str	r2, [r4, #0]
 8009b52:	2501      	movs	r5, #1
 8009b54:	e7bf      	b.n	8009ad6 <_scanf_float+0x192>
 8009b56:	2d03      	cmp	r5, #3
 8009b58:	d0e2      	beq.n	8009b20 <_scanf_float+0x1dc>
 8009b5a:	2d05      	cmp	r5, #5
 8009b5c:	e7de      	b.n	8009b1c <_scanf_float+0x1d8>
 8009b5e:	2d02      	cmp	r5, #2
 8009b60:	f47f af22 	bne.w	80099a8 <_scanf_float+0x64>
 8009b64:	2503      	movs	r5, #3
 8009b66:	e7b6      	b.n	8009ad6 <_scanf_float+0x192>
 8009b68:	2d06      	cmp	r5, #6
 8009b6a:	f47f af1d 	bne.w	80099a8 <_scanf_float+0x64>
 8009b6e:	2507      	movs	r5, #7
 8009b70:	e7b1      	b.n	8009ad6 <_scanf_float+0x192>
 8009b72:	6822      	ldr	r2, [r4, #0]
 8009b74:	0591      	lsls	r1, r2, #22
 8009b76:	f57f af17 	bpl.w	80099a8 <_scanf_float+0x64>
 8009b7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009b7e:	6022      	str	r2, [r4, #0]
 8009b80:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b84:	e7a7      	b.n	8009ad6 <_scanf_float+0x192>
 8009b86:	6822      	ldr	r2, [r4, #0]
 8009b88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009b8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009b90:	d006      	beq.n	8009ba0 <_scanf_float+0x25c>
 8009b92:	0550      	lsls	r0, r2, #21
 8009b94:	f57f af08 	bpl.w	80099a8 <_scanf_float+0x64>
 8009b98:	f1b9 0f00 	cmp.w	r9, #0
 8009b9c:	f000 80de 	beq.w	8009d5c <_scanf_float+0x418>
 8009ba0:	0591      	lsls	r1, r2, #22
 8009ba2:	bf58      	it	pl
 8009ba4:	9902      	ldrpl	r1, [sp, #8]
 8009ba6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009baa:	bf58      	it	pl
 8009bac:	eba9 0101 	subpl.w	r1, r9, r1
 8009bb0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009bb4:	bf58      	it	pl
 8009bb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009bba:	6022      	str	r2, [r4, #0]
 8009bbc:	f04f 0900 	mov.w	r9, #0
 8009bc0:	e789      	b.n	8009ad6 <_scanf_float+0x192>
 8009bc2:	f04f 0a03 	mov.w	sl, #3
 8009bc6:	e786      	b.n	8009ad6 <_scanf_float+0x192>
 8009bc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009bcc:	4639      	mov	r1, r7
 8009bce:	4640      	mov	r0, r8
 8009bd0:	4798      	blx	r3
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f43f aedb 	beq.w	800998e <_scanf_float+0x4a>
 8009bd8:	e6e6      	b.n	80099a8 <_scanf_float+0x64>
 8009bda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009be2:	463a      	mov	r2, r7
 8009be4:	4640      	mov	r0, r8
 8009be6:	4798      	blx	r3
 8009be8:	6923      	ldr	r3, [r4, #16]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	6123      	str	r3, [r4, #16]
 8009bee:	e6e8      	b.n	80099c2 <_scanf_float+0x7e>
 8009bf0:	1e6b      	subs	r3, r5, #1
 8009bf2:	2b06      	cmp	r3, #6
 8009bf4:	d824      	bhi.n	8009c40 <_scanf_float+0x2fc>
 8009bf6:	2d02      	cmp	r5, #2
 8009bf8:	d836      	bhi.n	8009c68 <_scanf_float+0x324>
 8009bfa:	9b01      	ldr	r3, [sp, #4]
 8009bfc:	429e      	cmp	r6, r3
 8009bfe:	f67f aee4 	bls.w	80099ca <_scanf_float+0x86>
 8009c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c0a:	463a      	mov	r2, r7
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	4798      	blx	r3
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	e7f0      	b.n	8009bfa <_scanf_float+0x2b6>
 8009c18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009c20:	463a      	mov	r2, r7
 8009c22:	4640      	mov	r0, r8
 8009c24:	4798      	blx	r3
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	6123      	str	r3, [r4, #16]
 8009c2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c30:	fa5f fa8a 	uxtb.w	sl, sl
 8009c34:	f1ba 0f02 	cmp.w	sl, #2
 8009c38:	d1ee      	bne.n	8009c18 <_scanf_float+0x2d4>
 8009c3a:	3d03      	subs	r5, #3
 8009c3c:	b2ed      	uxtb	r5, r5
 8009c3e:	1b76      	subs	r6, r6, r5
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	05da      	lsls	r2, r3, #23
 8009c44:	d530      	bpl.n	8009ca8 <_scanf_float+0x364>
 8009c46:	055b      	lsls	r3, r3, #21
 8009c48:	d511      	bpl.n	8009c6e <_scanf_float+0x32a>
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	429e      	cmp	r6, r3
 8009c4e:	f67f aebc 	bls.w	80099ca <_scanf_float+0x86>
 8009c52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c5a:	463a      	mov	r2, r7
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4798      	blx	r3
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	3b01      	subs	r3, #1
 8009c64:	6123      	str	r3, [r4, #16]
 8009c66:	e7f0      	b.n	8009c4a <_scanf_float+0x306>
 8009c68:	46aa      	mov	sl, r5
 8009c6a:	46b3      	mov	fp, r6
 8009c6c:	e7de      	b.n	8009c2c <_scanf_float+0x2e8>
 8009c6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	2965      	cmp	r1, #101	@ 0x65
 8009c76:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c7a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c7e:	6123      	str	r3, [r4, #16]
 8009c80:	d00c      	beq.n	8009c9c <_scanf_float+0x358>
 8009c82:	2945      	cmp	r1, #69	@ 0x45
 8009c84:	d00a      	beq.n	8009c9c <_scanf_float+0x358>
 8009c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c8a:	463a      	mov	r2, r7
 8009c8c:	4640      	mov	r0, r8
 8009c8e:	4798      	blx	r3
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	1eb5      	subs	r5, r6, #2
 8009c9a:	6123      	str	r3, [r4, #16]
 8009c9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ca0:	463a      	mov	r2, r7
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	4798      	blx	r3
 8009ca6:	462e      	mov	r6, r5
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	f012 0210 	ands.w	r2, r2, #16
 8009cae:	d001      	beq.n	8009cb4 <_scanf_float+0x370>
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	e68b      	b.n	80099cc <_scanf_float+0x88>
 8009cb4:	7032      	strb	r2, [r6, #0]
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc0:	d11c      	bne.n	8009cfc <_scanf_float+0x3b8>
 8009cc2:	9b02      	ldr	r3, [sp, #8]
 8009cc4:	454b      	cmp	r3, r9
 8009cc6:	eba3 0209 	sub.w	r2, r3, r9
 8009cca:	d123      	bne.n	8009d14 <_scanf_float+0x3d0>
 8009ccc:	9901      	ldr	r1, [sp, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	f002 fbf9 	bl	800c4c8 <_strtod_r>
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	6821      	ldr	r1, [r4, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f011 0f02 	tst.w	r1, #2
 8009ce0:	ec57 6b10 	vmov	r6, r7, d0
 8009ce4:	f103 0204 	add.w	r2, r3, #4
 8009ce8:	d01f      	beq.n	8009d2a <_scanf_float+0x3e6>
 8009cea:	9903      	ldr	r1, [sp, #12]
 8009cec:	600a      	str	r2, [r1, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	e9c3 6700 	strd	r6, r7, [r3]
 8009cf4:	68e3      	ldr	r3, [r4, #12]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	60e3      	str	r3, [r4, #12]
 8009cfa:	e7d9      	b.n	8009cb0 <_scanf_float+0x36c>
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0e4      	beq.n	8009ccc <_scanf_float+0x388>
 8009d02:	9905      	ldr	r1, [sp, #20]
 8009d04:	230a      	movs	r3, #10
 8009d06:	3101      	adds	r1, #1
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f002 fc5d 	bl	800c5c8 <_strtol_r>
 8009d0e:	9b04      	ldr	r3, [sp, #16]
 8009d10:	9e05      	ldr	r6, [sp, #20]
 8009d12:	1ac2      	subs	r2, r0, r3
 8009d14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009d18:	429e      	cmp	r6, r3
 8009d1a:	bf28      	it	cs
 8009d1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009d20:	4910      	ldr	r1, [pc, #64]	@ (8009d64 <_scanf_float+0x420>)
 8009d22:	4630      	mov	r0, r6
 8009d24:	f000 f8e4 	bl	8009ef0 <siprintf>
 8009d28:	e7d0      	b.n	8009ccc <_scanf_float+0x388>
 8009d2a:	f011 0f04 	tst.w	r1, #4
 8009d2e:	9903      	ldr	r1, [sp, #12]
 8009d30:	600a      	str	r2, [r1, #0]
 8009d32:	d1dc      	bne.n	8009cee <_scanf_float+0x3aa>
 8009d34:	681d      	ldr	r5, [r3, #0]
 8009d36:	4632      	mov	r2, r6
 8009d38:	463b      	mov	r3, r7
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	f7f6 fefd 	bl	8000b3c <__aeabi_dcmpun>
 8009d42:	b128      	cbz	r0, 8009d50 <_scanf_float+0x40c>
 8009d44:	4808      	ldr	r0, [pc, #32]	@ (8009d68 <_scanf_float+0x424>)
 8009d46:	f000 f9b7 	bl	800a0b8 <nanf>
 8009d4a:	ed85 0a00 	vstr	s0, [r5]
 8009d4e:	e7d1      	b.n	8009cf4 <_scanf_float+0x3b0>
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 ff50 	bl	8000bf8 <__aeabi_d2f>
 8009d58:	6028      	str	r0, [r5, #0]
 8009d5a:	e7cb      	b.n	8009cf4 <_scanf_float+0x3b0>
 8009d5c:	f04f 0900 	mov.w	r9, #0
 8009d60:	e629      	b.n	80099b6 <_scanf_float+0x72>
 8009d62:	bf00      	nop
 8009d64:	0801026d 	.word	0x0801026d
 8009d68:	08010504 	.word	0x08010504

08009d6c <std>:
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	b510      	push	{r4, lr}
 8009d70:	4604      	mov	r4, r0
 8009d72:	e9c0 3300 	strd	r3, r3, [r0]
 8009d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d7a:	6083      	str	r3, [r0, #8]
 8009d7c:	8181      	strh	r1, [r0, #12]
 8009d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d80:	81c2      	strh	r2, [r0, #14]
 8009d82:	6183      	str	r3, [r0, #24]
 8009d84:	4619      	mov	r1, r3
 8009d86:	2208      	movs	r2, #8
 8009d88:	305c      	adds	r0, #92	@ 0x5c
 8009d8a:	f000 f914 	bl	8009fb6 <memset>
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc4 <std+0x58>)
 8009d90:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d92:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc8 <std+0x5c>)
 8009d94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d96:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <std+0x60>)
 8009d98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd0 <std+0x64>)
 8009d9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dd4 <std+0x68>)
 8009da0:	6224      	str	r4, [r4, #32]
 8009da2:	429c      	cmp	r4, r3
 8009da4:	d006      	beq.n	8009db4 <std+0x48>
 8009da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009daa:	4294      	cmp	r4, r2
 8009dac:	d002      	beq.n	8009db4 <std+0x48>
 8009dae:	33d0      	adds	r3, #208	@ 0xd0
 8009db0:	429c      	cmp	r4, r3
 8009db2:	d105      	bne.n	8009dc0 <std+0x54>
 8009db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dbc:	f000 b978 	b.w	800a0b0 <__retarget_lock_init_recursive>
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	bf00      	nop
 8009dc4:	08009f31 	.word	0x08009f31
 8009dc8:	08009f53 	.word	0x08009f53
 8009dcc:	08009f8b 	.word	0x08009f8b
 8009dd0:	08009faf 	.word	0x08009faf
 8009dd4:	200017e0 	.word	0x200017e0

08009dd8 <stdio_exit_handler>:
 8009dd8:	4a02      	ldr	r2, [pc, #8]	@ (8009de4 <stdio_exit_handler+0xc>)
 8009dda:	4903      	ldr	r1, [pc, #12]	@ (8009de8 <stdio_exit_handler+0x10>)
 8009ddc:	4803      	ldr	r0, [pc, #12]	@ (8009dec <stdio_exit_handler+0x14>)
 8009dde:	f000 b869 	b.w	8009eb4 <_fwalk_sglue>
 8009de2:	bf00      	nop
 8009de4:	20000038 	.word	0x20000038
 8009de8:	0800c985 	.word	0x0800c985
 8009dec:	20000048 	.word	0x20000048

08009df0 <cleanup_stdio>:
 8009df0:	6841      	ldr	r1, [r0, #4]
 8009df2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e24 <cleanup_stdio+0x34>)
 8009df4:	4299      	cmp	r1, r3
 8009df6:	b510      	push	{r4, lr}
 8009df8:	4604      	mov	r4, r0
 8009dfa:	d001      	beq.n	8009e00 <cleanup_stdio+0x10>
 8009dfc:	f002 fdc2 	bl	800c984 <_fflush_r>
 8009e00:	68a1      	ldr	r1, [r4, #8]
 8009e02:	4b09      	ldr	r3, [pc, #36]	@ (8009e28 <cleanup_stdio+0x38>)
 8009e04:	4299      	cmp	r1, r3
 8009e06:	d002      	beq.n	8009e0e <cleanup_stdio+0x1e>
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f002 fdbb 	bl	800c984 <_fflush_r>
 8009e0e:	68e1      	ldr	r1, [r4, #12]
 8009e10:	4b06      	ldr	r3, [pc, #24]	@ (8009e2c <cleanup_stdio+0x3c>)
 8009e12:	4299      	cmp	r1, r3
 8009e14:	d004      	beq.n	8009e20 <cleanup_stdio+0x30>
 8009e16:	4620      	mov	r0, r4
 8009e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e1c:	f002 bdb2 	b.w	800c984 <_fflush_r>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	bf00      	nop
 8009e24:	200017e0 	.word	0x200017e0
 8009e28:	20001848 	.word	0x20001848
 8009e2c:	200018b0 	.word	0x200018b0

08009e30 <global_stdio_init.part.0>:
 8009e30:	b510      	push	{r4, lr}
 8009e32:	4b0b      	ldr	r3, [pc, #44]	@ (8009e60 <global_stdio_init.part.0+0x30>)
 8009e34:	4c0b      	ldr	r4, [pc, #44]	@ (8009e64 <global_stdio_init.part.0+0x34>)
 8009e36:	4a0c      	ldr	r2, [pc, #48]	@ (8009e68 <global_stdio_init.part.0+0x38>)
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2104      	movs	r1, #4
 8009e40:	f7ff ff94 	bl	8009d6c <std>
 8009e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e48:	2201      	movs	r2, #1
 8009e4a:	2109      	movs	r1, #9
 8009e4c:	f7ff ff8e 	bl	8009d6c <std>
 8009e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e54:	2202      	movs	r2, #2
 8009e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e5a:	2112      	movs	r1, #18
 8009e5c:	f7ff bf86 	b.w	8009d6c <std>
 8009e60:	20001918 	.word	0x20001918
 8009e64:	200017e0 	.word	0x200017e0
 8009e68:	08009dd9 	.word	0x08009dd9

08009e6c <__sfp_lock_acquire>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	@ (8009e74 <__sfp_lock_acquire+0x8>)
 8009e6e:	f000 b920 	b.w	800a0b2 <__retarget_lock_acquire_recursive>
 8009e72:	bf00      	nop
 8009e74:	20001921 	.word	0x20001921

08009e78 <__sfp_lock_release>:
 8009e78:	4801      	ldr	r0, [pc, #4]	@ (8009e80 <__sfp_lock_release+0x8>)
 8009e7a:	f000 b91b 	b.w	800a0b4 <__retarget_lock_release_recursive>
 8009e7e:	bf00      	nop
 8009e80:	20001921 	.word	0x20001921

08009e84 <__sinit>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	4604      	mov	r4, r0
 8009e88:	f7ff fff0 	bl	8009e6c <__sfp_lock_acquire>
 8009e8c:	6a23      	ldr	r3, [r4, #32]
 8009e8e:	b11b      	cbz	r3, 8009e98 <__sinit+0x14>
 8009e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e94:	f7ff bff0 	b.w	8009e78 <__sfp_lock_release>
 8009e98:	4b04      	ldr	r3, [pc, #16]	@ (8009eac <__sinit+0x28>)
 8009e9a:	6223      	str	r3, [r4, #32]
 8009e9c:	4b04      	ldr	r3, [pc, #16]	@ (8009eb0 <__sinit+0x2c>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1f5      	bne.n	8009e90 <__sinit+0xc>
 8009ea4:	f7ff ffc4 	bl	8009e30 <global_stdio_init.part.0>
 8009ea8:	e7f2      	b.n	8009e90 <__sinit+0xc>
 8009eaa:	bf00      	nop
 8009eac:	08009df1 	.word	0x08009df1
 8009eb0:	20001918 	.word	0x20001918

08009eb4 <_fwalk_sglue>:
 8009eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	4607      	mov	r7, r0
 8009eba:	4688      	mov	r8, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ec8:	d505      	bpl.n	8009ed6 <_fwalk_sglue+0x22>
 8009eca:	6824      	ldr	r4, [r4, #0]
 8009ecc:	2c00      	cmp	r4, #0
 8009ece:	d1f7      	bne.n	8009ec0 <_fwalk_sglue+0xc>
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d907      	bls.n	8009eec <_fwalk_sglue+0x38>
 8009edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	d003      	beq.n	8009eec <_fwalk_sglue+0x38>
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	47c0      	blx	r8
 8009eea:	4306      	orrs	r6, r0
 8009eec:	3568      	adds	r5, #104	@ 0x68
 8009eee:	e7e9      	b.n	8009ec4 <_fwalk_sglue+0x10>

08009ef0 <siprintf>:
 8009ef0:	b40e      	push	{r1, r2, r3}
 8009ef2:	b500      	push	{lr}
 8009ef4:	b09c      	sub	sp, #112	@ 0x70
 8009ef6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ef8:	9002      	str	r0, [sp, #8]
 8009efa:	9006      	str	r0, [sp, #24]
 8009efc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f00:	4809      	ldr	r0, [pc, #36]	@ (8009f28 <siprintf+0x38>)
 8009f02:	9107      	str	r1, [sp, #28]
 8009f04:	9104      	str	r1, [sp, #16]
 8009f06:	4909      	ldr	r1, [pc, #36]	@ (8009f2c <siprintf+0x3c>)
 8009f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0c:	9105      	str	r1, [sp, #20]
 8009f0e:	6800      	ldr	r0, [r0, #0]
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	a902      	add	r1, sp, #8
 8009f14:	f002 fbb6 	bl	800c684 <_svfiprintf_r>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	b01c      	add	sp, #112	@ 0x70
 8009f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f24:	b003      	add	sp, #12
 8009f26:	4770      	bx	lr
 8009f28:	20000044 	.word	0x20000044
 8009f2c:	ffff0208 	.word	0xffff0208

08009f30 <__sread>:
 8009f30:	b510      	push	{r4, lr}
 8009f32:	460c      	mov	r4, r1
 8009f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f38:	f000 f86c 	bl	800a014 <_read_r>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	bfab      	itete	ge
 8009f40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f42:	89a3      	ldrhlt	r3, [r4, #12]
 8009f44:	181b      	addge	r3, r3, r0
 8009f46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f4a:	bfac      	ite	ge
 8009f4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f4e:	81a3      	strhlt	r3, [r4, #12]
 8009f50:	bd10      	pop	{r4, pc}

08009f52 <__swrite>:
 8009f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f56:	461f      	mov	r7, r3
 8009f58:	898b      	ldrh	r3, [r1, #12]
 8009f5a:	05db      	lsls	r3, r3, #23
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	460c      	mov	r4, r1
 8009f60:	4616      	mov	r6, r2
 8009f62:	d505      	bpl.n	8009f70 <__swrite+0x1e>
 8009f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f68:	2302      	movs	r3, #2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f000 f840 	bl	8009ff0 <_lseek_r>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	463b      	mov	r3, r7
 8009f80:	4628      	mov	r0, r5
 8009f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f86:	f000 b857 	b.w	800a038 <_write_r>

08009f8a <__sseek>:
 8009f8a:	b510      	push	{r4, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f92:	f000 f82d 	bl	8009ff0 <_lseek_r>
 8009f96:	1c43      	adds	r3, r0, #1
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	bf15      	itete	ne
 8009f9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009fa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009fa6:	81a3      	strheq	r3, [r4, #12]
 8009fa8:	bf18      	it	ne
 8009faa:	81a3      	strhne	r3, [r4, #12]
 8009fac:	bd10      	pop	{r4, pc}

08009fae <__sclose>:
 8009fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb2:	f000 b80d 	b.w	8009fd0 <_close_r>

08009fb6 <memset>:
 8009fb6:	4402      	add	r2, r0
 8009fb8:	4603      	mov	r3, r0
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d100      	bne.n	8009fc0 <memset+0xa>
 8009fbe:	4770      	bx	lr
 8009fc0:	f803 1b01 	strb.w	r1, [r3], #1
 8009fc4:	e7f9      	b.n	8009fba <memset+0x4>
	...

08009fc8 <_localeconv_r>:
 8009fc8:	4800      	ldr	r0, [pc, #0]	@ (8009fcc <_localeconv_r+0x4>)
 8009fca:	4770      	bx	lr
 8009fcc:	20000184 	.word	0x20000184

08009fd0 <_close_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d06      	ldr	r5, [pc, #24]	@ (8009fec <_close_r+0x1c>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	f7f9 fd14 	bl	8003a08 <_close>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d102      	bne.n	8009fea <_close_r+0x1a>
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	b103      	cbz	r3, 8009fea <_close_r+0x1a>
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	bd38      	pop	{r3, r4, r5, pc}
 8009fec:	2000191c 	.word	0x2000191c

08009ff0 <_lseek_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	@ (800a010 <_lseek_r+0x20>)
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	602a      	str	r2, [r5, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f7f9 fd29 	bl	8003a56 <_lseek>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_lseek_r+0x1e>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_lseek_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	2000191c 	.word	0x2000191c

0800a014 <_read_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4d07      	ldr	r5, [pc, #28]	@ (800a034 <_read_r+0x20>)
 800a018:	4604      	mov	r4, r0
 800a01a:	4608      	mov	r0, r1
 800a01c:	4611      	mov	r1, r2
 800a01e:	2200      	movs	r2, #0
 800a020:	602a      	str	r2, [r5, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	f7f9 fcb7 	bl	8003996 <_read>
 800a028:	1c43      	adds	r3, r0, #1
 800a02a:	d102      	bne.n	800a032 <_read_r+0x1e>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	b103      	cbz	r3, 800a032 <_read_r+0x1e>
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	2000191c 	.word	0x2000191c

0800a038 <_write_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d07      	ldr	r5, [pc, #28]	@ (800a058 <_write_r+0x20>)
 800a03c:	4604      	mov	r4, r0
 800a03e:	4608      	mov	r0, r1
 800a040:	4611      	mov	r1, r2
 800a042:	2200      	movs	r2, #0
 800a044:	602a      	str	r2, [r5, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	f7f9 fcc2 	bl	80039d0 <_write>
 800a04c:	1c43      	adds	r3, r0, #1
 800a04e:	d102      	bne.n	800a056 <_write_r+0x1e>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	b103      	cbz	r3, 800a056 <_write_r+0x1e>
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	2000191c 	.word	0x2000191c

0800a05c <__errno>:
 800a05c:	4b01      	ldr	r3, [pc, #4]	@ (800a064 <__errno+0x8>)
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	20000044 	.word	0x20000044

0800a068 <__libc_init_array>:
 800a068:	b570      	push	{r4, r5, r6, lr}
 800a06a:	4d0d      	ldr	r5, [pc, #52]	@ (800a0a0 <__libc_init_array+0x38>)
 800a06c:	4c0d      	ldr	r4, [pc, #52]	@ (800a0a4 <__libc_init_array+0x3c>)
 800a06e:	1b64      	subs	r4, r4, r5
 800a070:	10a4      	asrs	r4, r4, #2
 800a072:	2600      	movs	r6, #0
 800a074:	42a6      	cmp	r6, r4
 800a076:	d109      	bne.n	800a08c <__libc_init_array+0x24>
 800a078:	4d0b      	ldr	r5, [pc, #44]	@ (800a0a8 <__libc_init_array+0x40>)
 800a07a:	4c0c      	ldr	r4, [pc, #48]	@ (800a0ac <__libc_init_array+0x44>)
 800a07c:	f003 fb72 	bl	800d764 <_init>
 800a080:	1b64      	subs	r4, r4, r5
 800a082:	10a4      	asrs	r4, r4, #2
 800a084:	2600      	movs	r6, #0
 800a086:	42a6      	cmp	r6, r4
 800a088:	d105      	bne.n	800a096 <__libc_init_array+0x2e>
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a090:	4798      	blx	r3
 800a092:	3601      	adds	r6, #1
 800a094:	e7ee      	b.n	800a074 <__libc_init_array+0xc>
 800a096:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09a:	4798      	blx	r3
 800a09c:	3601      	adds	r6, #1
 800a09e:	e7f2      	b.n	800a086 <__libc_init_array+0x1e>
 800a0a0:	08010570 	.word	0x08010570
 800a0a4:	08010570 	.word	0x08010570
 800a0a8:	08010570 	.word	0x08010570
 800a0ac:	08010574 	.word	0x08010574

0800a0b0 <__retarget_lock_init_recursive>:
 800a0b0:	4770      	bx	lr

0800a0b2 <__retarget_lock_acquire_recursive>:
 800a0b2:	4770      	bx	lr

0800a0b4 <__retarget_lock_release_recursive>:
 800a0b4:	4770      	bx	lr
	...

0800a0b8 <nanf>:
 800a0b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a0c0 <nanf+0x8>
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	7fc00000 	.word	0x7fc00000

0800a0c4 <quorem>:
 800a0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	6903      	ldr	r3, [r0, #16]
 800a0ca:	690c      	ldr	r4, [r1, #16]
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	db7e      	blt.n	800a1d0 <quorem+0x10c>
 800a0d2:	3c01      	subs	r4, #1
 800a0d4:	f101 0814 	add.w	r8, r1, #20
 800a0d8:	00a3      	lsls	r3, r4, #2
 800a0da:	f100 0514 	add.w	r5, r0, #20
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0f6:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0fa:	d32e      	bcc.n	800a15a <quorem+0x96>
 800a0fc:	f04f 0a00 	mov.w	sl, #0
 800a100:	46c4      	mov	ip, r8
 800a102:	46ae      	mov	lr, r5
 800a104:	46d3      	mov	fp, sl
 800a106:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a10a:	b298      	uxth	r0, r3
 800a10c:	fb06 a000 	mla	r0, r6, r0, sl
 800a110:	0c02      	lsrs	r2, r0, #16
 800a112:	0c1b      	lsrs	r3, r3, #16
 800a114:	fb06 2303 	mla	r3, r6, r3, r2
 800a118:	f8de 2000 	ldr.w	r2, [lr]
 800a11c:	b280      	uxth	r0, r0
 800a11e:	b292      	uxth	r2, r2
 800a120:	1a12      	subs	r2, r2, r0
 800a122:	445a      	add	r2, fp
 800a124:	f8de 0000 	ldr.w	r0, [lr]
 800a128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a132:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a136:	b292      	uxth	r2, r2
 800a138:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a13c:	45e1      	cmp	r9, ip
 800a13e:	f84e 2b04 	str.w	r2, [lr], #4
 800a142:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a146:	d2de      	bcs.n	800a106 <quorem+0x42>
 800a148:	9b00      	ldr	r3, [sp, #0]
 800a14a:	58eb      	ldr	r3, [r5, r3]
 800a14c:	b92b      	cbnz	r3, 800a15a <quorem+0x96>
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	3b04      	subs	r3, #4
 800a152:	429d      	cmp	r5, r3
 800a154:	461a      	mov	r2, r3
 800a156:	d32f      	bcc.n	800a1b8 <quorem+0xf4>
 800a158:	613c      	str	r4, [r7, #16]
 800a15a:	4638      	mov	r0, r7
 800a15c:	f001 f9c4 	bl	800b4e8 <__mcmp>
 800a160:	2800      	cmp	r0, #0
 800a162:	db25      	blt.n	800a1b0 <quorem+0xec>
 800a164:	4629      	mov	r1, r5
 800a166:	2000      	movs	r0, #0
 800a168:	f858 2b04 	ldr.w	r2, [r8], #4
 800a16c:	f8d1 c000 	ldr.w	ip, [r1]
 800a170:	fa1f fe82 	uxth.w	lr, r2
 800a174:	fa1f f38c 	uxth.w	r3, ip
 800a178:	eba3 030e 	sub.w	r3, r3, lr
 800a17c:	4403      	add	r3, r0
 800a17e:	0c12      	lsrs	r2, r2, #16
 800a180:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a184:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a188:	b29b      	uxth	r3, r3
 800a18a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a18e:	45c1      	cmp	r9, r8
 800a190:	f841 3b04 	str.w	r3, [r1], #4
 800a194:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a198:	d2e6      	bcs.n	800a168 <quorem+0xa4>
 800a19a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a19e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1a2:	b922      	cbnz	r2, 800a1ae <quorem+0xea>
 800a1a4:	3b04      	subs	r3, #4
 800a1a6:	429d      	cmp	r5, r3
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	d30b      	bcc.n	800a1c4 <quorem+0x100>
 800a1ac:	613c      	str	r4, [r7, #16]
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	b003      	add	sp, #12
 800a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	3b04      	subs	r3, #4
 800a1bc:	2a00      	cmp	r2, #0
 800a1be:	d1cb      	bne.n	800a158 <quorem+0x94>
 800a1c0:	3c01      	subs	r4, #1
 800a1c2:	e7c6      	b.n	800a152 <quorem+0x8e>
 800a1c4:	6812      	ldr	r2, [r2, #0]
 800a1c6:	3b04      	subs	r3, #4
 800a1c8:	2a00      	cmp	r2, #0
 800a1ca:	d1ef      	bne.n	800a1ac <quorem+0xe8>
 800a1cc:	3c01      	subs	r4, #1
 800a1ce:	e7ea      	b.n	800a1a6 <quorem+0xe2>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e7ee      	b.n	800a1b2 <quorem+0xee>
 800a1d4:	0000      	movs	r0, r0
	...

0800a1d8 <_dtoa_r>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	69c7      	ldr	r7, [r0, #28]
 800a1de:	b099      	sub	sp, #100	@ 0x64
 800a1e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1e4:	ec55 4b10 	vmov	r4, r5, d0
 800a1e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1ec:	4683      	mov	fp, r0
 800a1ee:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1f2:	b97f      	cbnz	r7, 800a214 <_dtoa_r+0x3c>
 800a1f4:	2010      	movs	r0, #16
 800a1f6:	f000 fdfd 	bl	800adf4 <malloc>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a200:	b920      	cbnz	r0, 800a20c <_dtoa_r+0x34>
 800a202:	4ba7      	ldr	r3, [pc, #668]	@ (800a4a0 <_dtoa_r+0x2c8>)
 800a204:	21ef      	movs	r1, #239	@ 0xef
 800a206:	48a7      	ldr	r0, [pc, #668]	@ (800a4a4 <_dtoa_r+0x2cc>)
 800a208:	f002 fc36 	bl	800ca78 <__assert_func>
 800a20c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a210:	6007      	str	r7, [r0, #0]
 800a212:	60c7      	str	r7, [r0, #12]
 800a214:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a218:	6819      	ldr	r1, [r3, #0]
 800a21a:	b159      	cbz	r1, 800a234 <_dtoa_r+0x5c>
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	604a      	str	r2, [r1, #4]
 800a220:	2301      	movs	r3, #1
 800a222:	4093      	lsls	r3, r2
 800a224:	608b      	str	r3, [r1, #8]
 800a226:	4658      	mov	r0, fp
 800a228:	f000 feda 	bl	800afe0 <_Bfree>
 800a22c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a230:	2200      	movs	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	1e2b      	subs	r3, r5, #0
 800a236:	bfb9      	ittee	lt
 800a238:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a23c:	9303      	strlt	r3, [sp, #12]
 800a23e:	2300      	movge	r3, #0
 800a240:	6033      	strge	r3, [r6, #0]
 800a242:	9f03      	ldr	r7, [sp, #12]
 800a244:	4b98      	ldr	r3, [pc, #608]	@ (800a4a8 <_dtoa_r+0x2d0>)
 800a246:	bfbc      	itt	lt
 800a248:	2201      	movlt	r2, #1
 800a24a:	6032      	strlt	r2, [r6, #0]
 800a24c:	43bb      	bics	r3, r7
 800a24e:	d112      	bne.n	800a276 <_dtoa_r+0x9e>
 800a250:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a252:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a25c:	4323      	orrs	r3, r4
 800a25e:	f000 854d 	beq.w	800acfc <_dtoa_r+0xb24>
 800a262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a264:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a4bc <_dtoa_r+0x2e4>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 854f 	beq.w	800ad0c <_dtoa_r+0xb34>
 800a26e:	f10a 0303 	add.w	r3, sl, #3
 800a272:	f000 bd49 	b.w	800ad08 <_dtoa_r+0xb30>
 800a276:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a27a:	2200      	movs	r2, #0
 800a27c:	ec51 0b17 	vmov	r0, r1, d7
 800a280:	2300      	movs	r3, #0
 800a282:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a286:	f7f6 fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 800a28a:	4680      	mov	r8, r0
 800a28c:	b158      	cbz	r0, 800a2a6 <_dtoa_r+0xce>
 800a28e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a290:	2301      	movs	r3, #1
 800a292:	6013      	str	r3, [r2, #0]
 800a294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a296:	b113      	cbz	r3, 800a29e <_dtoa_r+0xc6>
 800a298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a29a:	4b84      	ldr	r3, [pc, #528]	@ (800a4ac <_dtoa_r+0x2d4>)
 800a29c:	6013      	str	r3, [r2, #0]
 800a29e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a4c0 <_dtoa_r+0x2e8>
 800a2a2:	f000 bd33 	b.w	800ad0c <_dtoa_r+0xb34>
 800a2a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a2aa:	aa16      	add	r2, sp, #88	@ 0x58
 800a2ac:	a917      	add	r1, sp, #92	@ 0x5c
 800a2ae:	4658      	mov	r0, fp
 800a2b0:	f001 fa3a 	bl	800b728 <__d2b>
 800a2b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a2b8:	4681      	mov	r9, r0
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	d077      	beq.n	800a3ae <_dtoa_r+0x1d6>
 800a2be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a2d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a2d8:	4619      	mov	r1, r3
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4b74      	ldr	r3, [pc, #464]	@ (800a4b0 <_dtoa_r+0x2d8>)
 800a2de:	f7f5 ffdb 	bl	8000298 <__aeabi_dsub>
 800a2e2:	a369      	add	r3, pc, #420	@ (adr r3, 800a488 <_dtoa_r+0x2b0>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	f7f6 f98e 	bl	8000608 <__aeabi_dmul>
 800a2ec:	a368      	add	r3, pc, #416	@ (adr r3, 800a490 <_dtoa_r+0x2b8>)
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	f7f5 ffd3 	bl	800029c <__adddf3>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	460d      	mov	r5, r1
 800a2fc:	f7f6 f91a 	bl	8000534 <__aeabi_i2d>
 800a300:	a365      	add	r3, pc, #404	@ (adr r3, 800a498 <_dtoa_r+0x2c0>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	f7f6 f97f 	bl	8000608 <__aeabi_dmul>
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f5 ffc3 	bl	800029c <__adddf3>
 800a316:	4604      	mov	r4, r0
 800a318:	460d      	mov	r5, r1
 800a31a:	f7f6 fc25 	bl	8000b68 <__aeabi_d2iz>
 800a31e:	2200      	movs	r2, #0
 800a320:	4607      	mov	r7, r0
 800a322:	2300      	movs	r3, #0
 800a324:	4620      	mov	r0, r4
 800a326:	4629      	mov	r1, r5
 800a328:	f7f6 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800a32c:	b140      	cbz	r0, 800a340 <_dtoa_r+0x168>
 800a32e:	4638      	mov	r0, r7
 800a330:	f7f6 f900 	bl	8000534 <__aeabi_i2d>
 800a334:	4622      	mov	r2, r4
 800a336:	462b      	mov	r3, r5
 800a338:	f7f6 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800a33c:	b900      	cbnz	r0, 800a340 <_dtoa_r+0x168>
 800a33e:	3f01      	subs	r7, #1
 800a340:	2f16      	cmp	r7, #22
 800a342:	d851      	bhi.n	800a3e8 <_dtoa_r+0x210>
 800a344:	4b5b      	ldr	r3, [pc, #364]	@ (800a4b4 <_dtoa_r+0x2dc>)
 800a346:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a352:	f7f6 fbcb 	bl	8000aec <__aeabi_dcmplt>
 800a356:	2800      	cmp	r0, #0
 800a358:	d048      	beq.n	800a3ec <_dtoa_r+0x214>
 800a35a:	3f01      	subs	r7, #1
 800a35c:	2300      	movs	r3, #0
 800a35e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a360:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a362:	1b9b      	subs	r3, r3, r6
 800a364:	1e5a      	subs	r2, r3, #1
 800a366:	bf44      	itt	mi
 800a368:	f1c3 0801 	rsbmi	r8, r3, #1
 800a36c:	2300      	movmi	r3, #0
 800a36e:	9208      	str	r2, [sp, #32]
 800a370:	bf54      	ite	pl
 800a372:	f04f 0800 	movpl.w	r8, #0
 800a376:	9308      	strmi	r3, [sp, #32]
 800a378:	2f00      	cmp	r7, #0
 800a37a:	db39      	blt.n	800a3f0 <_dtoa_r+0x218>
 800a37c:	9b08      	ldr	r3, [sp, #32]
 800a37e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a380:	443b      	add	r3, r7
 800a382:	9308      	str	r3, [sp, #32]
 800a384:	2300      	movs	r3, #0
 800a386:	930a      	str	r3, [sp, #40]	@ 0x28
 800a388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a38a:	2b09      	cmp	r3, #9
 800a38c:	d864      	bhi.n	800a458 <_dtoa_r+0x280>
 800a38e:	2b05      	cmp	r3, #5
 800a390:	bfc4      	itt	gt
 800a392:	3b04      	subgt	r3, #4
 800a394:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a398:	f1a3 0302 	sub.w	r3, r3, #2
 800a39c:	bfcc      	ite	gt
 800a39e:	2400      	movgt	r4, #0
 800a3a0:	2401      	movle	r4, #1
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d863      	bhi.n	800a46e <_dtoa_r+0x296>
 800a3a6:	e8df f003 	tbb	[pc, r3]
 800a3aa:	372a      	.short	0x372a
 800a3ac:	5535      	.short	0x5535
 800a3ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a3b2:	441e      	add	r6, r3
 800a3b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a3b8:	2b20      	cmp	r3, #32
 800a3ba:	bfc1      	itttt	gt
 800a3bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a3c0:	409f      	lslgt	r7, r3
 800a3c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a3c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3ca:	bfd6      	itet	le
 800a3cc:	f1c3 0320 	rsble	r3, r3, #32
 800a3d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a3d4:	fa04 f003 	lslle.w	r0, r4, r3
 800a3d8:	f7f6 f89c 	bl	8000514 <__aeabi_ui2d>
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3e2:	3e01      	subs	r6, #1
 800a3e4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a3e6:	e777      	b.n	800a2d8 <_dtoa_r+0x100>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e7b8      	b.n	800a35e <_dtoa_r+0x186>
 800a3ec:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3ee:	e7b7      	b.n	800a360 <_dtoa_r+0x188>
 800a3f0:	427b      	negs	r3, r7
 800a3f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	eba8 0807 	sub.w	r8, r8, r7
 800a3fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3fc:	e7c4      	b.n	800a388 <_dtoa_r+0x1b0>
 800a3fe:	2300      	movs	r3, #0
 800a400:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc35      	bgt.n	800a474 <_dtoa_r+0x29c>
 800a408:	2301      	movs	r3, #1
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	9307      	str	r3, [sp, #28]
 800a40e:	461a      	mov	r2, r3
 800a410:	920e      	str	r2, [sp, #56]	@ 0x38
 800a412:	e00b      	b.n	800a42c <_dtoa_r+0x254>
 800a414:	2301      	movs	r3, #1
 800a416:	e7f3      	b.n	800a400 <_dtoa_r+0x228>
 800a418:	2300      	movs	r3, #0
 800a41a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a41c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a41e:	18fb      	adds	r3, r7, r3
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	3301      	adds	r3, #1
 800a424:	2b01      	cmp	r3, #1
 800a426:	9307      	str	r3, [sp, #28]
 800a428:	bfb8      	it	lt
 800a42a:	2301      	movlt	r3, #1
 800a42c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a430:	2100      	movs	r1, #0
 800a432:	2204      	movs	r2, #4
 800a434:	f102 0514 	add.w	r5, r2, #20
 800a438:	429d      	cmp	r5, r3
 800a43a:	d91f      	bls.n	800a47c <_dtoa_r+0x2a4>
 800a43c:	6041      	str	r1, [r0, #4]
 800a43e:	4658      	mov	r0, fp
 800a440:	f000 fd8e 	bl	800af60 <_Balloc>
 800a444:	4682      	mov	sl, r0
 800a446:	2800      	cmp	r0, #0
 800a448:	d13c      	bne.n	800a4c4 <_dtoa_r+0x2ec>
 800a44a:	4b1b      	ldr	r3, [pc, #108]	@ (800a4b8 <_dtoa_r+0x2e0>)
 800a44c:	4602      	mov	r2, r0
 800a44e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a452:	e6d8      	b.n	800a206 <_dtoa_r+0x2e>
 800a454:	2301      	movs	r3, #1
 800a456:	e7e0      	b.n	800a41a <_dtoa_r+0x242>
 800a458:	2401      	movs	r4, #1
 800a45a:	2300      	movs	r3, #0
 800a45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a45e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a460:	f04f 33ff 	mov.w	r3, #4294967295
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	9307      	str	r3, [sp, #28]
 800a468:	2200      	movs	r2, #0
 800a46a:	2312      	movs	r3, #18
 800a46c:	e7d0      	b.n	800a410 <_dtoa_r+0x238>
 800a46e:	2301      	movs	r3, #1
 800a470:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a472:	e7f5      	b.n	800a460 <_dtoa_r+0x288>
 800a474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	9307      	str	r3, [sp, #28]
 800a47a:	e7d7      	b.n	800a42c <_dtoa_r+0x254>
 800a47c:	3101      	adds	r1, #1
 800a47e:	0052      	lsls	r2, r2, #1
 800a480:	e7d8      	b.n	800a434 <_dtoa_r+0x25c>
 800a482:	bf00      	nop
 800a484:	f3af 8000 	nop.w
 800a488:	636f4361 	.word	0x636f4361
 800a48c:	3fd287a7 	.word	0x3fd287a7
 800a490:	8b60c8b3 	.word	0x8b60c8b3
 800a494:	3fc68a28 	.word	0x3fc68a28
 800a498:	509f79fb 	.word	0x509f79fb
 800a49c:	3fd34413 	.word	0x3fd34413
 800a4a0:	0801027f 	.word	0x0801027f
 800a4a4:	08010296 	.word	0x08010296
 800a4a8:	7ff00000 	.word	0x7ff00000
 800a4ac:	0801024a 	.word	0x0801024a
 800a4b0:	3ff80000 	.word	0x3ff80000
 800a4b4:	08010390 	.word	0x08010390
 800a4b8:	080102ee 	.word	0x080102ee
 800a4bc:	0801027b 	.word	0x0801027b
 800a4c0:	08010249 	.word	0x08010249
 800a4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4c8:	6018      	str	r0, [r3, #0]
 800a4ca:	9b07      	ldr	r3, [sp, #28]
 800a4cc:	2b0e      	cmp	r3, #14
 800a4ce:	f200 80a4 	bhi.w	800a61a <_dtoa_r+0x442>
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	f000 80a1 	beq.w	800a61a <_dtoa_r+0x442>
 800a4d8:	2f00      	cmp	r7, #0
 800a4da:	dd33      	ble.n	800a544 <_dtoa_r+0x36c>
 800a4dc:	4bad      	ldr	r3, [pc, #692]	@ (800a794 <_dtoa_r+0x5bc>)
 800a4de:	f007 020f 	and.w	r2, r7, #15
 800a4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4e6:	ed93 7b00 	vldr	d7, [r3]
 800a4ea:	05f8      	lsls	r0, r7, #23
 800a4ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4f4:	d516      	bpl.n	800a524 <_dtoa_r+0x34c>
 800a4f6:	4ba8      	ldr	r3, [pc, #672]	@ (800a798 <_dtoa_r+0x5c0>)
 800a4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a500:	f7f6 f9ac 	bl	800085c <__aeabi_ddiv>
 800a504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a508:	f004 040f 	and.w	r4, r4, #15
 800a50c:	2603      	movs	r6, #3
 800a50e:	4da2      	ldr	r5, [pc, #648]	@ (800a798 <_dtoa_r+0x5c0>)
 800a510:	b954      	cbnz	r4, 800a528 <_dtoa_r+0x350>
 800a512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a51a:	f7f6 f99f 	bl	800085c <__aeabi_ddiv>
 800a51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a522:	e028      	b.n	800a576 <_dtoa_r+0x39e>
 800a524:	2602      	movs	r6, #2
 800a526:	e7f2      	b.n	800a50e <_dtoa_r+0x336>
 800a528:	07e1      	lsls	r1, r4, #31
 800a52a:	d508      	bpl.n	800a53e <_dtoa_r+0x366>
 800a52c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a530:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a534:	f7f6 f868 	bl	8000608 <__aeabi_dmul>
 800a538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a53c:	3601      	adds	r6, #1
 800a53e:	1064      	asrs	r4, r4, #1
 800a540:	3508      	adds	r5, #8
 800a542:	e7e5      	b.n	800a510 <_dtoa_r+0x338>
 800a544:	f000 80d2 	beq.w	800a6ec <_dtoa_r+0x514>
 800a548:	427c      	negs	r4, r7
 800a54a:	4b92      	ldr	r3, [pc, #584]	@ (800a794 <_dtoa_r+0x5bc>)
 800a54c:	4d92      	ldr	r5, [pc, #584]	@ (800a798 <_dtoa_r+0x5c0>)
 800a54e:	f004 020f 	and.w	r2, r4, #15
 800a552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a55e:	f7f6 f853 	bl	8000608 <__aeabi_dmul>
 800a562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a566:	1124      	asrs	r4, r4, #4
 800a568:	2300      	movs	r3, #0
 800a56a:	2602      	movs	r6, #2
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	f040 80b2 	bne.w	800a6d6 <_dtoa_r+0x4fe>
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1d3      	bne.n	800a51e <_dtoa_r+0x346>
 800a576:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a578:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 80b7 	beq.w	800a6f0 <_dtoa_r+0x518>
 800a582:	4b86      	ldr	r3, [pc, #536]	@ (800a79c <_dtoa_r+0x5c4>)
 800a584:	2200      	movs	r2, #0
 800a586:	4620      	mov	r0, r4
 800a588:	4629      	mov	r1, r5
 800a58a:	f7f6 faaf 	bl	8000aec <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f000 80ae 	beq.w	800a6f0 <_dtoa_r+0x518>
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 80aa 	beq.w	800a6f0 <_dtoa_r+0x518>
 800a59c:	9b00      	ldr	r3, [sp, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	dd37      	ble.n	800a612 <_dtoa_r+0x43a>
 800a5a2:	1e7b      	subs	r3, r7, #1
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4b7d      	ldr	r3, [pc, #500]	@ (800a7a0 <_dtoa_r+0x5c8>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	f7f6 f82b 	bl	8000608 <__aeabi_dmul>
 800a5b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5b6:	9c00      	ldr	r4, [sp, #0]
 800a5b8:	3601      	adds	r6, #1
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7f5 ffba 	bl	8000534 <__aeabi_i2d>
 800a5c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5c4:	f7f6 f820 	bl	8000608 <__aeabi_dmul>
 800a5c8:	4b76      	ldr	r3, [pc, #472]	@ (800a7a4 <_dtoa_r+0x5cc>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f7f5 fe66 	bl	800029c <__adddf3>
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a5d6:	2c00      	cmp	r4, #0
 800a5d8:	f040 808d 	bne.w	800a6f6 <_dtoa_r+0x51e>
 800a5dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e0:	4b71      	ldr	r3, [pc, #452]	@ (800a7a8 <_dtoa_r+0x5d0>)
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5f0:	462a      	mov	r2, r5
 800a5f2:	4633      	mov	r3, r6
 800a5f4:	f7f6 fa98 	bl	8000b28 <__aeabi_dcmpgt>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f040 828b 	bne.w	800ab14 <_dtoa_r+0x93c>
 800a5fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a602:	462a      	mov	r2, r5
 800a604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a608:	f7f6 fa70 	bl	8000aec <__aeabi_dcmplt>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	f040 8128 	bne.w	800a862 <_dtoa_r+0x68a>
 800a612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a61a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f2c0 815a 	blt.w	800a8d6 <_dtoa_r+0x6fe>
 800a622:	2f0e      	cmp	r7, #14
 800a624:	f300 8157 	bgt.w	800a8d6 <_dtoa_r+0x6fe>
 800a628:	4b5a      	ldr	r3, [pc, #360]	@ (800a794 <_dtoa_r+0x5bc>)
 800a62a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a62e:	ed93 7b00 	vldr	d7, [r3]
 800a632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a634:	2b00      	cmp	r3, #0
 800a636:	ed8d 7b00 	vstr	d7, [sp]
 800a63a:	da03      	bge.n	800a644 <_dtoa_r+0x46c>
 800a63c:	9b07      	ldr	r3, [sp, #28]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f340 8101 	ble.w	800a846 <_dtoa_r+0x66e>
 800a644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a648:	4656      	mov	r6, sl
 800a64a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a64e:	4620      	mov	r0, r4
 800a650:	4629      	mov	r1, r5
 800a652:	f7f6 f903 	bl	800085c <__aeabi_ddiv>
 800a656:	f7f6 fa87 	bl	8000b68 <__aeabi_d2iz>
 800a65a:	4680      	mov	r8, r0
 800a65c:	f7f5 ff6a 	bl	8000534 <__aeabi_i2d>
 800a660:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a664:	f7f5 ffd0 	bl	8000608 <__aeabi_dmul>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a674:	f7f5 fe10 	bl	8000298 <__aeabi_dsub>
 800a678:	f806 4b01 	strb.w	r4, [r6], #1
 800a67c:	9d07      	ldr	r5, [sp, #28]
 800a67e:	eba6 040a 	sub.w	r4, r6, sl
 800a682:	42a5      	cmp	r5, r4
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	f040 8117 	bne.w	800a8ba <_dtoa_r+0x6e2>
 800a68c:	f7f5 fe06 	bl	800029c <__adddf3>
 800a690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a694:	4604      	mov	r4, r0
 800a696:	460d      	mov	r5, r1
 800a698:	f7f6 fa46 	bl	8000b28 <__aeabi_dcmpgt>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f040 80f9 	bne.w	800a894 <_dtoa_r+0x6bc>
 800a6a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	f7f6 fa15 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6ae:	b118      	cbz	r0, 800a6b8 <_dtoa_r+0x4e0>
 800a6b0:	f018 0f01 	tst.w	r8, #1
 800a6b4:	f040 80ee 	bne.w	800a894 <_dtoa_r+0x6bc>
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4658      	mov	r0, fp
 800a6bc:	f000 fc90 	bl	800afe0 <_Bfree>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	7033      	strb	r3, [r6, #0]
 800a6c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6c6:	3701      	adds	r7, #1
 800a6c8:	601f      	str	r7, [r3, #0]
 800a6ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 831d 	beq.w	800ad0c <_dtoa_r+0xb34>
 800a6d2:	601e      	str	r6, [r3, #0]
 800a6d4:	e31a      	b.n	800ad0c <_dtoa_r+0xb34>
 800a6d6:	07e2      	lsls	r2, r4, #31
 800a6d8:	d505      	bpl.n	800a6e6 <_dtoa_r+0x50e>
 800a6da:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6de:	f7f5 ff93 	bl	8000608 <__aeabi_dmul>
 800a6e2:	3601      	adds	r6, #1
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	1064      	asrs	r4, r4, #1
 800a6e8:	3508      	adds	r5, #8
 800a6ea:	e73f      	b.n	800a56c <_dtoa_r+0x394>
 800a6ec:	2602      	movs	r6, #2
 800a6ee:	e742      	b.n	800a576 <_dtoa_r+0x39e>
 800a6f0:	9c07      	ldr	r4, [sp, #28]
 800a6f2:	9704      	str	r7, [sp, #16]
 800a6f4:	e761      	b.n	800a5ba <_dtoa_r+0x3e2>
 800a6f6:	4b27      	ldr	r3, [pc, #156]	@ (800a794 <_dtoa_r+0x5bc>)
 800a6f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a702:	4454      	add	r4, sl
 800a704:	2900      	cmp	r1, #0
 800a706:	d053      	beq.n	800a7b0 <_dtoa_r+0x5d8>
 800a708:	4928      	ldr	r1, [pc, #160]	@ (800a7ac <_dtoa_r+0x5d4>)
 800a70a:	2000      	movs	r0, #0
 800a70c:	f7f6 f8a6 	bl	800085c <__aeabi_ddiv>
 800a710:	4633      	mov	r3, r6
 800a712:	462a      	mov	r2, r5
 800a714:	f7f5 fdc0 	bl	8000298 <__aeabi_dsub>
 800a718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a71c:	4656      	mov	r6, sl
 800a71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a722:	f7f6 fa21 	bl	8000b68 <__aeabi_d2iz>
 800a726:	4605      	mov	r5, r0
 800a728:	f7f5 ff04 	bl	8000534 <__aeabi_i2d>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a734:	f7f5 fdb0 	bl	8000298 <__aeabi_dsub>
 800a738:	3530      	adds	r5, #48	@ 0x30
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a742:	f806 5b01 	strb.w	r5, [r6], #1
 800a746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a74a:	f7f6 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d171      	bne.n	800a836 <_dtoa_r+0x65e>
 800a752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a756:	4911      	ldr	r1, [pc, #68]	@ (800a79c <_dtoa_r+0x5c4>)
 800a758:	2000      	movs	r0, #0
 800a75a:	f7f5 fd9d 	bl	8000298 <__aeabi_dsub>
 800a75e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a762:	f7f6 f9c3 	bl	8000aec <__aeabi_dcmplt>
 800a766:	2800      	cmp	r0, #0
 800a768:	f040 8095 	bne.w	800a896 <_dtoa_r+0x6be>
 800a76c:	42a6      	cmp	r6, r4
 800a76e:	f43f af50 	beq.w	800a612 <_dtoa_r+0x43a>
 800a772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a776:	4b0a      	ldr	r3, [pc, #40]	@ (800a7a0 <_dtoa_r+0x5c8>)
 800a778:	2200      	movs	r2, #0
 800a77a:	f7f5 ff45 	bl	8000608 <__aeabi_dmul>
 800a77e:	4b08      	ldr	r3, [pc, #32]	@ (800a7a0 <_dtoa_r+0x5c8>)
 800a780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a784:	2200      	movs	r2, #0
 800a786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78a:	f7f5 ff3d 	bl	8000608 <__aeabi_dmul>
 800a78e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a792:	e7c4      	b.n	800a71e <_dtoa_r+0x546>
 800a794:	08010390 	.word	0x08010390
 800a798:	08010368 	.word	0x08010368
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	40240000 	.word	0x40240000
 800a7a4:	401c0000 	.word	0x401c0000
 800a7a8:	40140000 	.word	0x40140000
 800a7ac:	3fe00000 	.word	0x3fe00000
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f7f5 ff28 	bl	8000608 <__aeabi_dmul>
 800a7b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a7bc:	9415      	str	r4, [sp, #84]	@ 0x54
 800a7be:	4656      	mov	r6, sl
 800a7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7c4:	f7f6 f9d0 	bl	8000b68 <__aeabi_d2iz>
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	f7f5 feb3 	bl	8000534 <__aeabi_i2d>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7d6:	f7f5 fd5f 	bl	8000298 <__aeabi_dsub>
 800a7da:	3530      	adds	r5, #48	@ 0x30
 800a7dc:	f806 5b01 	strb.w	r5, [r6], #1
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	42a6      	cmp	r6, r4
 800a7e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7ea:	f04f 0200 	mov.w	r2, #0
 800a7ee:	d124      	bne.n	800a83a <_dtoa_r+0x662>
 800a7f0:	4bac      	ldr	r3, [pc, #688]	@ (800aaa4 <_dtoa_r+0x8cc>)
 800a7f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7f6:	f7f5 fd51 	bl	800029c <__adddf3>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a802:	f7f6 f991 	bl	8000b28 <__aeabi_dcmpgt>
 800a806:	2800      	cmp	r0, #0
 800a808:	d145      	bne.n	800a896 <_dtoa_r+0x6be>
 800a80a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a80e:	49a5      	ldr	r1, [pc, #660]	@ (800aaa4 <_dtoa_r+0x8cc>)
 800a810:	2000      	movs	r0, #0
 800a812:	f7f5 fd41 	bl	8000298 <__aeabi_dsub>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a81e:	f7f6 f965 	bl	8000aec <__aeabi_dcmplt>
 800a822:	2800      	cmp	r0, #0
 800a824:	f43f aef5 	beq.w	800a612 <_dtoa_r+0x43a>
 800a828:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a82a:	1e73      	subs	r3, r6, #1
 800a82c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a82e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a832:	2b30      	cmp	r3, #48	@ 0x30
 800a834:	d0f8      	beq.n	800a828 <_dtoa_r+0x650>
 800a836:	9f04      	ldr	r7, [sp, #16]
 800a838:	e73e      	b.n	800a6b8 <_dtoa_r+0x4e0>
 800a83a:	4b9b      	ldr	r3, [pc, #620]	@ (800aaa8 <_dtoa_r+0x8d0>)
 800a83c:	f7f5 fee4 	bl	8000608 <__aeabi_dmul>
 800a840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a844:	e7bc      	b.n	800a7c0 <_dtoa_r+0x5e8>
 800a846:	d10c      	bne.n	800a862 <_dtoa_r+0x68a>
 800a848:	4b98      	ldr	r3, [pc, #608]	@ (800aaac <_dtoa_r+0x8d4>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a850:	f7f5 feda 	bl	8000608 <__aeabi_dmul>
 800a854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a858:	f7f6 f95c 	bl	8000b14 <__aeabi_dcmpge>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	f000 8157 	beq.w	800ab10 <_dtoa_r+0x938>
 800a862:	2400      	movs	r4, #0
 800a864:	4625      	mov	r5, r4
 800a866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a868:	43db      	mvns	r3, r3
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	4656      	mov	r6, sl
 800a86e:	2700      	movs	r7, #0
 800a870:	4621      	mov	r1, r4
 800a872:	4658      	mov	r0, fp
 800a874:	f000 fbb4 	bl	800afe0 <_Bfree>
 800a878:	2d00      	cmp	r5, #0
 800a87a:	d0dc      	beq.n	800a836 <_dtoa_r+0x65e>
 800a87c:	b12f      	cbz	r7, 800a88a <_dtoa_r+0x6b2>
 800a87e:	42af      	cmp	r7, r5
 800a880:	d003      	beq.n	800a88a <_dtoa_r+0x6b2>
 800a882:	4639      	mov	r1, r7
 800a884:	4658      	mov	r0, fp
 800a886:	f000 fbab 	bl	800afe0 <_Bfree>
 800a88a:	4629      	mov	r1, r5
 800a88c:	4658      	mov	r0, fp
 800a88e:	f000 fba7 	bl	800afe0 <_Bfree>
 800a892:	e7d0      	b.n	800a836 <_dtoa_r+0x65e>
 800a894:	9704      	str	r7, [sp, #16]
 800a896:	4633      	mov	r3, r6
 800a898:	461e      	mov	r6, r3
 800a89a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a89e:	2a39      	cmp	r2, #57	@ 0x39
 800a8a0:	d107      	bne.n	800a8b2 <_dtoa_r+0x6da>
 800a8a2:	459a      	cmp	sl, r3
 800a8a4:	d1f8      	bne.n	800a898 <_dtoa_r+0x6c0>
 800a8a6:	9a04      	ldr	r2, [sp, #16]
 800a8a8:	3201      	adds	r2, #1
 800a8aa:	9204      	str	r2, [sp, #16]
 800a8ac:	2230      	movs	r2, #48	@ 0x30
 800a8ae:	f88a 2000 	strb.w	r2, [sl]
 800a8b2:	781a      	ldrb	r2, [r3, #0]
 800a8b4:	3201      	adds	r2, #1
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e7bd      	b.n	800a836 <_dtoa_r+0x65e>
 800a8ba:	4b7b      	ldr	r3, [pc, #492]	@ (800aaa8 <_dtoa_r+0x8d0>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f7f5 fea3 	bl	8000608 <__aeabi_dmul>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	f7f6 f905 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f43f aebb 	beq.w	800a64a <_dtoa_r+0x472>
 800a8d4:	e6f0      	b.n	800a6b8 <_dtoa_r+0x4e0>
 800a8d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	f000 80db 	beq.w	800aa94 <_dtoa_r+0x8bc>
 800a8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8e0:	2a01      	cmp	r2, #1
 800a8e2:	f300 80bf 	bgt.w	800aa64 <_dtoa_r+0x88c>
 800a8e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8e8:	2a00      	cmp	r2, #0
 800a8ea:	f000 80b7 	beq.w	800aa5c <_dtoa_r+0x884>
 800a8ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8f4:	4646      	mov	r6, r8
 800a8f6:	9a08      	ldr	r2, [sp, #32]
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	441a      	add	r2, r3
 800a8fc:	4658      	mov	r0, fp
 800a8fe:	4498      	add	r8, r3
 800a900:	9208      	str	r2, [sp, #32]
 800a902:	f000 fc6b 	bl	800b1dc <__i2b>
 800a906:	4605      	mov	r5, r0
 800a908:	b15e      	cbz	r6, 800a922 <_dtoa_r+0x74a>
 800a90a:	9b08      	ldr	r3, [sp, #32]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	dd08      	ble.n	800a922 <_dtoa_r+0x74a>
 800a910:	42b3      	cmp	r3, r6
 800a912:	9a08      	ldr	r2, [sp, #32]
 800a914:	bfa8      	it	ge
 800a916:	4633      	movge	r3, r6
 800a918:	eba8 0803 	sub.w	r8, r8, r3
 800a91c:	1af6      	subs	r6, r6, r3
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a924:	b1f3      	cbz	r3, 800a964 <_dtoa_r+0x78c>
 800a926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80b7 	beq.w	800aa9c <_dtoa_r+0x8c4>
 800a92e:	b18c      	cbz	r4, 800a954 <_dtoa_r+0x77c>
 800a930:	4629      	mov	r1, r5
 800a932:	4622      	mov	r2, r4
 800a934:	4658      	mov	r0, fp
 800a936:	f000 fd11 	bl	800b35c <__pow5mult>
 800a93a:	464a      	mov	r2, r9
 800a93c:	4601      	mov	r1, r0
 800a93e:	4605      	mov	r5, r0
 800a940:	4658      	mov	r0, fp
 800a942:	f000 fc61 	bl	800b208 <__multiply>
 800a946:	4649      	mov	r1, r9
 800a948:	9004      	str	r0, [sp, #16]
 800a94a:	4658      	mov	r0, fp
 800a94c:	f000 fb48 	bl	800afe0 <_Bfree>
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	4699      	mov	r9, r3
 800a954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a956:	1b1a      	subs	r2, r3, r4
 800a958:	d004      	beq.n	800a964 <_dtoa_r+0x78c>
 800a95a:	4649      	mov	r1, r9
 800a95c:	4658      	mov	r0, fp
 800a95e:	f000 fcfd 	bl	800b35c <__pow5mult>
 800a962:	4681      	mov	r9, r0
 800a964:	2101      	movs	r1, #1
 800a966:	4658      	mov	r0, fp
 800a968:	f000 fc38 	bl	800b1dc <__i2b>
 800a96c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a96e:	4604      	mov	r4, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 81cf 	beq.w	800ad14 <_dtoa_r+0xb3c>
 800a976:	461a      	mov	r2, r3
 800a978:	4601      	mov	r1, r0
 800a97a:	4658      	mov	r0, fp
 800a97c:	f000 fcee 	bl	800b35c <__pow5mult>
 800a980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a982:	2b01      	cmp	r3, #1
 800a984:	4604      	mov	r4, r0
 800a986:	f300 8095 	bgt.w	800aab4 <_dtoa_r+0x8dc>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f040 8087 	bne.w	800aaa0 <_dtoa_r+0x8c8>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f040 8089 	bne.w	800aab0 <_dtoa_r+0x8d8>
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9a4:	0d1b      	lsrs	r3, r3, #20
 800a9a6:	051b      	lsls	r3, r3, #20
 800a9a8:	b12b      	cbz	r3, 800a9b6 <_dtoa_r+0x7de>
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	9308      	str	r3, [sp, #32]
 800a9b0:	f108 0801 	add.w	r8, r8, #1
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 81b0 	beq.w	800ad20 <_dtoa_r+0xb48>
 800a9c0:	6923      	ldr	r3, [r4, #16]
 800a9c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9c6:	6918      	ldr	r0, [r3, #16]
 800a9c8:	f000 fbbc 	bl	800b144 <__hi0bits>
 800a9cc:	f1c0 0020 	rsb	r0, r0, #32
 800a9d0:	9b08      	ldr	r3, [sp, #32]
 800a9d2:	4418      	add	r0, r3
 800a9d4:	f010 001f 	ands.w	r0, r0, #31
 800a9d8:	d077      	beq.n	800aaca <_dtoa_r+0x8f2>
 800a9da:	f1c0 0320 	rsb	r3, r0, #32
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	dd6b      	ble.n	800aaba <_dtoa_r+0x8e2>
 800a9e2:	9b08      	ldr	r3, [sp, #32]
 800a9e4:	f1c0 001c 	rsb	r0, r0, #28
 800a9e8:	4403      	add	r3, r0
 800a9ea:	4480      	add	r8, r0
 800a9ec:	4406      	add	r6, r0
 800a9ee:	9308      	str	r3, [sp, #32]
 800a9f0:	f1b8 0f00 	cmp.w	r8, #0
 800a9f4:	dd05      	ble.n	800aa02 <_dtoa_r+0x82a>
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fd08 	bl	800b410 <__lshift>
 800aa00:	4681      	mov	r9, r0
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dd05      	ble.n	800aa14 <_dtoa_r+0x83c>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	4658      	mov	r0, fp
 800aa0e:	f000 fcff 	bl	800b410 <__lshift>
 800aa12:	4604      	mov	r4, r0
 800aa14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d059      	beq.n	800aace <_dtoa_r+0x8f6>
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4648      	mov	r0, r9
 800aa1e:	f000 fd63 	bl	800b4e8 <__mcmp>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	da53      	bge.n	800aace <_dtoa_r+0x8f6>
 800aa26:	1e7b      	subs	r3, r7, #1
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	4649      	mov	r1, r9
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	220a      	movs	r2, #10
 800aa30:	4658      	mov	r0, fp
 800aa32:	f000 faf7 	bl	800b024 <__multadd>
 800aa36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa38:	4681      	mov	r9, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 8172 	beq.w	800ad24 <_dtoa_r+0xb4c>
 800aa40:	2300      	movs	r3, #0
 800aa42:	4629      	mov	r1, r5
 800aa44:	220a      	movs	r2, #10
 800aa46:	4658      	mov	r0, fp
 800aa48:	f000 faec 	bl	800b024 <__multadd>
 800aa4c:	9b00      	ldr	r3, [sp, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	4605      	mov	r5, r0
 800aa52:	dc67      	bgt.n	800ab24 <_dtoa_r+0x94c>
 800aa54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	dc41      	bgt.n	800aade <_dtoa_r+0x906>
 800aa5a:	e063      	b.n	800ab24 <_dtoa_r+0x94c>
 800aa5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa62:	e746      	b.n	800a8f2 <_dtoa_r+0x71a>
 800aa64:	9b07      	ldr	r3, [sp, #28]
 800aa66:	1e5c      	subs	r4, r3, #1
 800aa68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa6a:	42a3      	cmp	r3, r4
 800aa6c:	bfbf      	itttt	lt
 800aa6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa74:	1ae3      	sublt	r3, r4, r3
 800aa76:	bfb4      	ite	lt
 800aa78:	18d2      	addlt	r2, r2, r3
 800aa7a:	1b1c      	subge	r4, r3, r4
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	bfbc      	itt	lt
 800aa80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa82:	2400      	movlt	r4, #0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfb5      	itete	lt
 800aa88:	eba8 0603 	sublt.w	r6, r8, r3
 800aa8c:	9b07      	ldrge	r3, [sp, #28]
 800aa8e:	2300      	movlt	r3, #0
 800aa90:	4646      	movge	r6, r8
 800aa92:	e730      	b.n	800a8f6 <_dtoa_r+0x71e>
 800aa94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa98:	4646      	mov	r6, r8
 800aa9a:	e735      	b.n	800a908 <_dtoa_r+0x730>
 800aa9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa9e:	e75c      	b.n	800a95a <_dtoa_r+0x782>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e788      	b.n	800a9b6 <_dtoa_r+0x7de>
 800aaa4:	3fe00000 	.word	0x3fe00000
 800aaa8:	40240000 	.word	0x40240000
 800aaac:	40140000 	.word	0x40140000
 800aab0:	9b02      	ldr	r3, [sp, #8]
 800aab2:	e780      	b.n	800a9b6 <_dtoa_r+0x7de>
 800aab4:	2300      	movs	r3, #0
 800aab6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aab8:	e782      	b.n	800a9c0 <_dtoa_r+0x7e8>
 800aaba:	d099      	beq.n	800a9f0 <_dtoa_r+0x818>
 800aabc:	9a08      	ldr	r2, [sp, #32]
 800aabe:	331c      	adds	r3, #28
 800aac0:	441a      	add	r2, r3
 800aac2:	4498      	add	r8, r3
 800aac4:	441e      	add	r6, r3
 800aac6:	9208      	str	r2, [sp, #32]
 800aac8:	e792      	b.n	800a9f0 <_dtoa_r+0x818>
 800aaca:	4603      	mov	r3, r0
 800aacc:	e7f6      	b.n	800aabc <_dtoa_r+0x8e4>
 800aace:	9b07      	ldr	r3, [sp, #28]
 800aad0:	9704      	str	r7, [sp, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	dc20      	bgt.n	800ab18 <_dtoa_r+0x940>
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aada:	2b02      	cmp	r3, #2
 800aadc:	dd1e      	ble.n	800ab1c <_dtoa_r+0x944>
 800aade:	9b00      	ldr	r3, [sp, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f47f aec0 	bne.w	800a866 <_dtoa_r+0x68e>
 800aae6:	4621      	mov	r1, r4
 800aae8:	2205      	movs	r2, #5
 800aaea:	4658      	mov	r0, fp
 800aaec:	f000 fa9a 	bl	800b024 <__multadd>
 800aaf0:	4601      	mov	r1, r0
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4648      	mov	r0, r9
 800aaf6:	f000 fcf7 	bl	800b4e8 <__mcmp>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	f77f aeb3 	ble.w	800a866 <_dtoa_r+0x68e>
 800ab00:	4656      	mov	r6, sl
 800ab02:	2331      	movs	r3, #49	@ 0x31
 800ab04:	f806 3b01 	strb.w	r3, [r6], #1
 800ab08:	9b04      	ldr	r3, [sp, #16]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	e6ae      	b.n	800a86e <_dtoa_r+0x696>
 800ab10:	9c07      	ldr	r4, [sp, #28]
 800ab12:	9704      	str	r7, [sp, #16]
 800ab14:	4625      	mov	r5, r4
 800ab16:	e7f3      	b.n	800ab00 <_dtoa_r+0x928>
 800ab18:	9b07      	ldr	r3, [sp, #28]
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 8104 	beq.w	800ad2c <_dtoa_r+0xb54>
 800ab24:	2e00      	cmp	r6, #0
 800ab26:	dd05      	ble.n	800ab34 <_dtoa_r+0x95c>
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4632      	mov	r2, r6
 800ab2c:	4658      	mov	r0, fp
 800ab2e:	f000 fc6f 	bl	800b410 <__lshift>
 800ab32:	4605      	mov	r5, r0
 800ab34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d05a      	beq.n	800abf0 <_dtoa_r+0xa18>
 800ab3a:	6869      	ldr	r1, [r5, #4]
 800ab3c:	4658      	mov	r0, fp
 800ab3e:	f000 fa0f 	bl	800af60 <_Balloc>
 800ab42:	4606      	mov	r6, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <_dtoa_r+0x97a>
 800ab46:	4b84      	ldr	r3, [pc, #528]	@ (800ad58 <_dtoa_r+0xb80>)
 800ab48:	4602      	mov	r2, r0
 800ab4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab4e:	f7ff bb5a 	b.w	800a206 <_dtoa_r+0x2e>
 800ab52:	692a      	ldr	r2, [r5, #16]
 800ab54:	3202      	adds	r2, #2
 800ab56:	0092      	lsls	r2, r2, #2
 800ab58:	f105 010c 	add.w	r1, r5, #12
 800ab5c:	300c      	adds	r0, #12
 800ab5e:	f001 ff75 	bl	800ca4c <memcpy>
 800ab62:	2201      	movs	r2, #1
 800ab64:	4631      	mov	r1, r6
 800ab66:	4658      	mov	r0, fp
 800ab68:	f000 fc52 	bl	800b410 <__lshift>
 800ab6c:	f10a 0301 	add.w	r3, sl, #1
 800ab70:	9307      	str	r3, [sp, #28]
 800ab72:	9b00      	ldr	r3, [sp, #0]
 800ab74:	4453      	add	r3, sl
 800ab76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	462f      	mov	r7, r5
 800ab80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab82:	4605      	mov	r5, r0
 800ab84:	9b07      	ldr	r3, [sp, #28]
 800ab86:	4621      	mov	r1, r4
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	4648      	mov	r0, r9
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	f7ff fa99 	bl	800a0c4 <quorem>
 800ab92:	4639      	mov	r1, r7
 800ab94:	9002      	str	r0, [sp, #8]
 800ab96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab9a:	4648      	mov	r0, r9
 800ab9c:	f000 fca4 	bl	800b4e8 <__mcmp>
 800aba0:	462a      	mov	r2, r5
 800aba2:	9008      	str	r0, [sp, #32]
 800aba4:	4621      	mov	r1, r4
 800aba6:	4658      	mov	r0, fp
 800aba8:	f000 fcba 	bl	800b520 <__mdiff>
 800abac:	68c2      	ldr	r2, [r0, #12]
 800abae:	4606      	mov	r6, r0
 800abb0:	bb02      	cbnz	r2, 800abf4 <_dtoa_r+0xa1c>
 800abb2:	4601      	mov	r1, r0
 800abb4:	4648      	mov	r0, r9
 800abb6:	f000 fc97 	bl	800b4e8 <__mcmp>
 800abba:	4602      	mov	r2, r0
 800abbc:	4631      	mov	r1, r6
 800abbe:	4658      	mov	r0, fp
 800abc0:	920e      	str	r2, [sp, #56]	@ 0x38
 800abc2:	f000 fa0d 	bl	800afe0 <_Bfree>
 800abc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abca:	9e07      	ldr	r6, [sp, #28]
 800abcc:	ea43 0102 	orr.w	r1, r3, r2
 800abd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abd2:	4319      	orrs	r1, r3
 800abd4:	d110      	bne.n	800abf8 <_dtoa_r+0xa20>
 800abd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abda:	d029      	beq.n	800ac30 <_dtoa_r+0xa58>
 800abdc:	9b08      	ldr	r3, [sp, #32]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dd02      	ble.n	800abe8 <_dtoa_r+0xa10>
 800abe2:	9b02      	ldr	r3, [sp, #8]
 800abe4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800abe8:	9b00      	ldr	r3, [sp, #0]
 800abea:	f883 8000 	strb.w	r8, [r3]
 800abee:	e63f      	b.n	800a870 <_dtoa_r+0x698>
 800abf0:	4628      	mov	r0, r5
 800abf2:	e7bb      	b.n	800ab6c <_dtoa_r+0x994>
 800abf4:	2201      	movs	r2, #1
 800abf6:	e7e1      	b.n	800abbc <_dtoa_r+0x9e4>
 800abf8:	9b08      	ldr	r3, [sp, #32]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	db04      	blt.n	800ac08 <_dtoa_r+0xa30>
 800abfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac00:	430b      	orrs	r3, r1
 800ac02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac04:	430b      	orrs	r3, r1
 800ac06:	d120      	bne.n	800ac4a <_dtoa_r+0xa72>
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	dded      	ble.n	800abe8 <_dtoa_r+0xa10>
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4658      	mov	r0, fp
 800ac12:	f000 fbfd 	bl	800b410 <__lshift>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4681      	mov	r9, r0
 800ac1a:	f000 fc65 	bl	800b4e8 <__mcmp>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	dc03      	bgt.n	800ac2a <_dtoa_r+0xa52>
 800ac22:	d1e1      	bne.n	800abe8 <_dtoa_r+0xa10>
 800ac24:	f018 0f01 	tst.w	r8, #1
 800ac28:	d0de      	beq.n	800abe8 <_dtoa_r+0xa10>
 800ac2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac2e:	d1d8      	bne.n	800abe2 <_dtoa_r+0xa0a>
 800ac30:	9a00      	ldr	r2, [sp, #0]
 800ac32:	2339      	movs	r3, #57	@ 0x39
 800ac34:	7013      	strb	r3, [r2, #0]
 800ac36:	4633      	mov	r3, r6
 800ac38:	461e      	mov	r6, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac40:	2a39      	cmp	r2, #57	@ 0x39
 800ac42:	d052      	beq.n	800acea <_dtoa_r+0xb12>
 800ac44:	3201      	adds	r2, #1
 800ac46:	701a      	strb	r2, [r3, #0]
 800ac48:	e612      	b.n	800a870 <_dtoa_r+0x698>
 800ac4a:	2a00      	cmp	r2, #0
 800ac4c:	dd07      	ble.n	800ac5e <_dtoa_r+0xa86>
 800ac4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac52:	d0ed      	beq.n	800ac30 <_dtoa_r+0xa58>
 800ac54:	9a00      	ldr	r2, [sp, #0]
 800ac56:	f108 0301 	add.w	r3, r8, #1
 800ac5a:	7013      	strb	r3, [r2, #0]
 800ac5c:	e608      	b.n	800a870 <_dtoa_r+0x698>
 800ac5e:	9b07      	ldr	r3, [sp, #28]
 800ac60:	9a07      	ldr	r2, [sp, #28]
 800ac62:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d028      	beq.n	800acbe <_dtoa_r+0xae6>
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	2300      	movs	r3, #0
 800ac70:	220a      	movs	r2, #10
 800ac72:	4658      	mov	r0, fp
 800ac74:	f000 f9d6 	bl	800b024 <__multadd>
 800ac78:	42af      	cmp	r7, r5
 800ac7a:	4681      	mov	r9, r0
 800ac7c:	f04f 0300 	mov.w	r3, #0
 800ac80:	f04f 020a 	mov.w	r2, #10
 800ac84:	4639      	mov	r1, r7
 800ac86:	4658      	mov	r0, fp
 800ac88:	d107      	bne.n	800ac9a <_dtoa_r+0xac2>
 800ac8a:	f000 f9cb 	bl	800b024 <__multadd>
 800ac8e:	4607      	mov	r7, r0
 800ac90:	4605      	mov	r5, r0
 800ac92:	9b07      	ldr	r3, [sp, #28]
 800ac94:	3301      	adds	r3, #1
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	e774      	b.n	800ab84 <_dtoa_r+0x9ac>
 800ac9a:	f000 f9c3 	bl	800b024 <__multadd>
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4607      	mov	r7, r0
 800aca2:	2300      	movs	r3, #0
 800aca4:	220a      	movs	r2, #10
 800aca6:	4658      	mov	r0, fp
 800aca8:	f000 f9bc 	bl	800b024 <__multadd>
 800acac:	4605      	mov	r5, r0
 800acae:	e7f0      	b.n	800ac92 <_dtoa_r+0xaba>
 800acb0:	9b00      	ldr	r3, [sp, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bfcc      	ite	gt
 800acb6:	461e      	movgt	r6, r3
 800acb8:	2601      	movle	r6, #1
 800acba:	4456      	add	r6, sl
 800acbc:	2700      	movs	r7, #0
 800acbe:	4649      	mov	r1, r9
 800acc0:	2201      	movs	r2, #1
 800acc2:	4658      	mov	r0, fp
 800acc4:	f000 fba4 	bl	800b410 <__lshift>
 800acc8:	4621      	mov	r1, r4
 800acca:	4681      	mov	r9, r0
 800accc:	f000 fc0c 	bl	800b4e8 <__mcmp>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	dcb0      	bgt.n	800ac36 <_dtoa_r+0xa5e>
 800acd4:	d102      	bne.n	800acdc <_dtoa_r+0xb04>
 800acd6:	f018 0f01 	tst.w	r8, #1
 800acda:	d1ac      	bne.n	800ac36 <_dtoa_r+0xa5e>
 800acdc:	4633      	mov	r3, r6
 800acde:	461e      	mov	r6, r3
 800ace0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ace4:	2a30      	cmp	r2, #48	@ 0x30
 800ace6:	d0fa      	beq.n	800acde <_dtoa_r+0xb06>
 800ace8:	e5c2      	b.n	800a870 <_dtoa_r+0x698>
 800acea:	459a      	cmp	sl, r3
 800acec:	d1a4      	bne.n	800ac38 <_dtoa_r+0xa60>
 800acee:	9b04      	ldr	r3, [sp, #16]
 800acf0:	3301      	adds	r3, #1
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	2331      	movs	r3, #49	@ 0x31
 800acf6:	f88a 3000 	strb.w	r3, [sl]
 800acfa:	e5b9      	b.n	800a870 <_dtoa_r+0x698>
 800acfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad5c <_dtoa_r+0xb84>
 800ad02:	b11b      	cbz	r3, 800ad0c <_dtoa_r+0xb34>
 800ad04:	f10a 0308 	add.w	r3, sl, #8
 800ad08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	b019      	add	sp, #100	@ 0x64
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	f77f ae37 	ble.w	800a98a <_dtoa_r+0x7b2>
 800ad1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad20:	2001      	movs	r0, #1
 800ad22:	e655      	b.n	800a9d0 <_dtoa_r+0x7f8>
 800ad24:	9b00      	ldr	r3, [sp, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	f77f aed6 	ble.w	800aad8 <_dtoa_r+0x900>
 800ad2c:	4656      	mov	r6, sl
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4648      	mov	r0, r9
 800ad32:	f7ff f9c7 	bl	800a0c4 <quorem>
 800ad36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad3a:	f806 8b01 	strb.w	r8, [r6], #1
 800ad3e:	9b00      	ldr	r3, [sp, #0]
 800ad40:	eba6 020a 	sub.w	r2, r6, sl
 800ad44:	4293      	cmp	r3, r2
 800ad46:	ddb3      	ble.n	800acb0 <_dtoa_r+0xad8>
 800ad48:	4649      	mov	r1, r9
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	4658      	mov	r0, fp
 800ad50:	f000 f968 	bl	800b024 <__multadd>
 800ad54:	4681      	mov	r9, r0
 800ad56:	e7ea      	b.n	800ad2e <_dtoa_r+0xb56>
 800ad58:	080102ee 	.word	0x080102ee
 800ad5c:	08010272 	.word	0x08010272

0800ad60 <_free_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4605      	mov	r5, r0
 800ad64:	2900      	cmp	r1, #0
 800ad66:	d041      	beq.n	800adec <_free_r+0x8c>
 800ad68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6c:	1f0c      	subs	r4, r1, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfb8      	it	lt
 800ad72:	18e4      	addlt	r4, r4, r3
 800ad74:	f000 f8e8 	bl	800af48 <__malloc_lock>
 800ad78:	4a1d      	ldr	r2, [pc, #116]	@ (800adf0 <_free_r+0x90>)
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	b933      	cbnz	r3, 800ad8c <_free_r+0x2c>
 800ad7e:	6063      	str	r3, [r4, #4]
 800ad80:	6014      	str	r4, [r2, #0]
 800ad82:	4628      	mov	r0, r5
 800ad84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad88:	f000 b8e4 	b.w	800af54 <__malloc_unlock>
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	d908      	bls.n	800ada2 <_free_r+0x42>
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	1821      	adds	r1, r4, r0
 800ad94:	428b      	cmp	r3, r1
 800ad96:	bf01      	itttt	eq
 800ad98:	6819      	ldreq	r1, [r3, #0]
 800ad9a:	685b      	ldreq	r3, [r3, #4]
 800ad9c:	1809      	addeq	r1, r1, r0
 800ad9e:	6021      	streq	r1, [r4, #0]
 800ada0:	e7ed      	b.n	800ad7e <_free_r+0x1e>
 800ada2:	461a      	mov	r2, r3
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	b10b      	cbz	r3, 800adac <_free_r+0x4c>
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	d9fa      	bls.n	800ada2 <_free_r+0x42>
 800adac:	6811      	ldr	r1, [r2, #0]
 800adae:	1850      	adds	r0, r2, r1
 800adb0:	42a0      	cmp	r0, r4
 800adb2:	d10b      	bne.n	800adcc <_free_r+0x6c>
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	4401      	add	r1, r0
 800adb8:	1850      	adds	r0, r2, r1
 800adba:	4283      	cmp	r3, r0
 800adbc:	6011      	str	r1, [r2, #0]
 800adbe:	d1e0      	bne.n	800ad82 <_free_r+0x22>
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	6053      	str	r3, [r2, #4]
 800adc6:	4408      	add	r0, r1
 800adc8:	6010      	str	r0, [r2, #0]
 800adca:	e7da      	b.n	800ad82 <_free_r+0x22>
 800adcc:	d902      	bls.n	800add4 <_free_r+0x74>
 800adce:	230c      	movs	r3, #12
 800add0:	602b      	str	r3, [r5, #0]
 800add2:	e7d6      	b.n	800ad82 <_free_r+0x22>
 800add4:	6820      	ldr	r0, [r4, #0]
 800add6:	1821      	adds	r1, r4, r0
 800add8:	428b      	cmp	r3, r1
 800adda:	bf04      	itt	eq
 800addc:	6819      	ldreq	r1, [r3, #0]
 800adde:	685b      	ldreq	r3, [r3, #4]
 800ade0:	6063      	str	r3, [r4, #4]
 800ade2:	bf04      	itt	eq
 800ade4:	1809      	addeq	r1, r1, r0
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	6054      	str	r4, [r2, #4]
 800adea:	e7ca      	b.n	800ad82 <_free_r+0x22>
 800adec:	bd38      	pop	{r3, r4, r5, pc}
 800adee:	bf00      	nop
 800adf0:	20001928 	.word	0x20001928

0800adf4 <malloc>:
 800adf4:	4b02      	ldr	r3, [pc, #8]	@ (800ae00 <malloc+0xc>)
 800adf6:	4601      	mov	r1, r0
 800adf8:	6818      	ldr	r0, [r3, #0]
 800adfa:	f000 b825 	b.w	800ae48 <_malloc_r>
 800adfe:	bf00      	nop
 800ae00:	20000044 	.word	0x20000044

0800ae04 <sbrk_aligned>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4e0f      	ldr	r6, [pc, #60]	@ (800ae44 <sbrk_aligned+0x40>)
 800ae08:	460c      	mov	r4, r1
 800ae0a:	6831      	ldr	r1, [r6, #0]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	b911      	cbnz	r1, 800ae16 <sbrk_aligned+0x12>
 800ae10:	f001 fe0c 	bl	800ca2c <_sbrk_r>
 800ae14:	6030      	str	r0, [r6, #0]
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f001 fe07 	bl	800ca2c <_sbrk_r>
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d103      	bne.n	800ae2a <sbrk_aligned+0x26>
 800ae22:	f04f 34ff 	mov.w	r4, #4294967295
 800ae26:	4620      	mov	r0, r4
 800ae28:	bd70      	pop	{r4, r5, r6, pc}
 800ae2a:	1cc4      	adds	r4, r0, #3
 800ae2c:	f024 0403 	bic.w	r4, r4, #3
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d0f8      	beq.n	800ae26 <sbrk_aligned+0x22>
 800ae34:	1a21      	subs	r1, r4, r0
 800ae36:	4628      	mov	r0, r5
 800ae38:	f001 fdf8 	bl	800ca2c <_sbrk_r>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d1f2      	bne.n	800ae26 <sbrk_aligned+0x22>
 800ae40:	e7ef      	b.n	800ae22 <sbrk_aligned+0x1e>
 800ae42:	bf00      	nop
 800ae44:	20001924 	.word	0x20001924

0800ae48 <_malloc_r>:
 800ae48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	1ccd      	adds	r5, r1, #3
 800ae4e:	f025 0503 	bic.w	r5, r5, #3
 800ae52:	3508      	adds	r5, #8
 800ae54:	2d0c      	cmp	r5, #12
 800ae56:	bf38      	it	cc
 800ae58:	250c      	movcc	r5, #12
 800ae5a:	2d00      	cmp	r5, #0
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	db01      	blt.n	800ae64 <_malloc_r+0x1c>
 800ae60:	42a9      	cmp	r1, r5
 800ae62:	d904      	bls.n	800ae6e <_malloc_r+0x26>
 800ae64:	230c      	movs	r3, #12
 800ae66:	6033      	str	r3, [r6, #0]
 800ae68:	2000      	movs	r0, #0
 800ae6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af44 <_malloc_r+0xfc>
 800ae72:	f000 f869 	bl	800af48 <__malloc_lock>
 800ae76:	f8d8 3000 	ldr.w	r3, [r8]
 800ae7a:	461c      	mov	r4, r3
 800ae7c:	bb44      	cbnz	r4, 800aed0 <_malloc_r+0x88>
 800ae7e:	4629      	mov	r1, r5
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7ff ffbf 	bl	800ae04 <sbrk_aligned>
 800ae86:	1c43      	adds	r3, r0, #1
 800ae88:	4604      	mov	r4, r0
 800ae8a:	d158      	bne.n	800af3e <_malloc_r+0xf6>
 800ae8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae90:	4627      	mov	r7, r4
 800ae92:	2f00      	cmp	r7, #0
 800ae94:	d143      	bne.n	800af1e <_malloc_r+0xd6>
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d04b      	beq.n	800af32 <_malloc_r+0xea>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	4630      	mov	r0, r6
 800aea0:	eb04 0903 	add.w	r9, r4, r3
 800aea4:	f001 fdc2 	bl	800ca2c <_sbrk_r>
 800aea8:	4581      	cmp	r9, r0
 800aeaa:	d142      	bne.n	800af32 <_malloc_r+0xea>
 800aeac:	6821      	ldr	r1, [r4, #0]
 800aeae:	1a6d      	subs	r5, r5, r1
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ffa6 	bl	800ae04 <sbrk_aligned>
 800aeb8:	3001      	adds	r0, #1
 800aeba:	d03a      	beq.n	800af32 <_malloc_r+0xea>
 800aebc:	6823      	ldr	r3, [r4, #0]
 800aebe:	442b      	add	r3, r5
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	f8d8 3000 	ldr.w	r3, [r8]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	bb62      	cbnz	r2, 800af24 <_malloc_r+0xdc>
 800aeca:	f8c8 7000 	str.w	r7, [r8]
 800aece:	e00f      	b.n	800aef0 <_malloc_r+0xa8>
 800aed0:	6822      	ldr	r2, [r4, #0]
 800aed2:	1b52      	subs	r2, r2, r5
 800aed4:	d420      	bmi.n	800af18 <_malloc_r+0xd0>
 800aed6:	2a0b      	cmp	r2, #11
 800aed8:	d917      	bls.n	800af0a <_malloc_r+0xc2>
 800aeda:	1961      	adds	r1, r4, r5
 800aedc:	42a3      	cmp	r3, r4
 800aede:	6025      	str	r5, [r4, #0]
 800aee0:	bf18      	it	ne
 800aee2:	6059      	strne	r1, [r3, #4]
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	bf08      	it	eq
 800aee8:	f8c8 1000 	streq.w	r1, [r8]
 800aeec:	5162      	str	r2, [r4, r5]
 800aeee:	604b      	str	r3, [r1, #4]
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 f82f 	bl	800af54 <__malloc_unlock>
 800aef6:	f104 000b 	add.w	r0, r4, #11
 800aefa:	1d23      	adds	r3, r4, #4
 800aefc:	f020 0007 	bic.w	r0, r0, #7
 800af00:	1ac2      	subs	r2, r0, r3
 800af02:	bf1c      	itt	ne
 800af04:	1a1b      	subne	r3, r3, r0
 800af06:	50a3      	strne	r3, [r4, r2]
 800af08:	e7af      	b.n	800ae6a <_malloc_r+0x22>
 800af0a:	6862      	ldr	r2, [r4, #4]
 800af0c:	42a3      	cmp	r3, r4
 800af0e:	bf0c      	ite	eq
 800af10:	f8c8 2000 	streq.w	r2, [r8]
 800af14:	605a      	strne	r2, [r3, #4]
 800af16:	e7eb      	b.n	800aef0 <_malloc_r+0xa8>
 800af18:	4623      	mov	r3, r4
 800af1a:	6864      	ldr	r4, [r4, #4]
 800af1c:	e7ae      	b.n	800ae7c <_malloc_r+0x34>
 800af1e:	463c      	mov	r4, r7
 800af20:	687f      	ldr	r7, [r7, #4]
 800af22:	e7b6      	b.n	800ae92 <_malloc_r+0x4a>
 800af24:	461a      	mov	r2, r3
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d1fb      	bne.n	800af24 <_malloc_r+0xdc>
 800af2c:	2300      	movs	r3, #0
 800af2e:	6053      	str	r3, [r2, #4]
 800af30:	e7de      	b.n	800aef0 <_malloc_r+0xa8>
 800af32:	230c      	movs	r3, #12
 800af34:	6033      	str	r3, [r6, #0]
 800af36:	4630      	mov	r0, r6
 800af38:	f000 f80c 	bl	800af54 <__malloc_unlock>
 800af3c:	e794      	b.n	800ae68 <_malloc_r+0x20>
 800af3e:	6005      	str	r5, [r0, #0]
 800af40:	e7d6      	b.n	800aef0 <_malloc_r+0xa8>
 800af42:	bf00      	nop
 800af44:	20001928 	.word	0x20001928

0800af48 <__malloc_lock>:
 800af48:	4801      	ldr	r0, [pc, #4]	@ (800af50 <__malloc_lock+0x8>)
 800af4a:	f7ff b8b2 	b.w	800a0b2 <__retarget_lock_acquire_recursive>
 800af4e:	bf00      	nop
 800af50:	20001920 	.word	0x20001920

0800af54 <__malloc_unlock>:
 800af54:	4801      	ldr	r0, [pc, #4]	@ (800af5c <__malloc_unlock+0x8>)
 800af56:	f7ff b8ad 	b.w	800a0b4 <__retarget_lock_release_recursive>
 800af5a:	bf00      	nop
 800af5c:	20001920 	.word	0x20001920

0800af60 <_Balloc>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	69c6      	ldr	r6, [r0, #28]
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	b976      	cbnz	r6, 800af88 <_Balloc+0x28>
 800af6a:	2010      	movs	r0, #16
 800af6c:	f7ff ff42 	bl	800adf4 <malloc>
 800af70:	4602      	mov	r2, r0
 800af72:	61e0      	str	r0, [r4, #28]
 800af74:	b920      	cbnz	r0, 800af80 <_Balloc+0x20>
 800af76:	4b18      	ldr	r3, [pc, #96]	@ (800afd8 <_Balloc+0x78>)
 800af78:	4818      	ldr	r0, [pc, #96]	@ (800afdc <_Balloc+0x7c>)
 800af7a:	216b      	movs	r1, #107	@ 0x6b
 800af7c:	f001 fd7c 	bl	800ca78 <__assert_func>
 800af80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af84:	6006      	str	r6, [r0, #0]
 800af86:	60c6      	str	r6, [r0, #12]
 800af88:	69e6      	ldr	r6, [r4, #28]
 800af8a:	68f3      	ldr	r3, [r6, #12]
 800af8c:	b183      	cbz	r3, 800afb0 <_Balloc+0x50>
 800af8e:	69e3      	ldr	r3, [r4, #28]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af96:	b9b8      	cbnz	r0, 800afc8 <_Balloc+0x68>
 800af98:	2101      	movs	r1, #1
 800af9a:	fa01 f605 	lsl.w	r6, r1, r5
 800af9e:	1d72      	adds	r2, r6, #5
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	4620      	mov	r0, r4
 800afa4:	f001 fd86 	bl	800cab4 <_calloc_r>
 800afa8:	b160      	cbz	r0, 800afc4 <_Balloc+0x64>
 800afaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afae:	e00e      	b.n	800afce <_Balloc+0x6e>
 800afb0:	2221      	movs	r2, #33	@ 0x21
 800afb2:	2104      	movs	r1, #4
 800afb4:	4620      	mov	r0, r4
 800afb6:	f001 fd7d 	bl	800cab4 <_calloc_r>
 800afba:	69e3      	ldr	r3, [r4, #28]
 800afbc:	60f0      	str	r0, [r6, #12]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e4      	bne.n	800af8e <_Balloc+0x2e>
 800afc4:	2000      	movs	r0, #0
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	6802      	ldr	r2, [r0, #0]
 800afca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afce:	2300      	movs	r3, #0
 800afd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afd4:	e7f7      	b.n	800afc6 <_Balloc+0x66>
 800afd6:	bf00      	nop
 800afd8:	0801027f 	.word	0x0801027f
 800afdc:	080102ff 	.word	0x080102ff

0800afe0 <_Bfree>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	69c6      	ldr	r6, [r0, #28]
 800afe4:	4605      	mov	r5, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	b976      	cbnz	r6, 800b008 <_Bfree+0x28>
 800afea:	2010      	movs	r0, #16
 800afec:	f7ff ff02 	bl	800adf4 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	61e8      	str	r0, [r5, #28]
 800aff4:	b920      	cbnz	r0, 800b000 <_Bfree+0x20>
 800aff6:	4b09      	ldr	r3, [pc, #36]	@ (800b01c <_Bfree+0x3c>)
 800aff8:	4809      	ldr	r0, [pc, #36]	@ (800b020 <_Bfree+0x40>)
 800affa:	218f      	movs	r1, #143	@ 0x8f
 800affc:	f001 fd3c 	bl	800ca78 <__assert_func>
 800b000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b004:	6006      	str	r6, [r0, #0]
 800b006:	60c6      	str	r6, [r0, #12]
 800b008:	b13c      	cbz	r4, 800b01a <_Bfree+0x3a>
 800b00a:	69eb      	ldr	r3, [r5, #28]
 800b00c:	6862      	ldr	r2, [r4, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b014:	6021      	str	r1, [r4, #0]
 800b016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
 800b01c:	0801027f 	.word	0x0801027f
 800b020:	080102ff 	.word	0x080102ff

0800b024 <__multadd>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	690d      	ldr	r5, [r1, #16]
 800b02a:	4607      	mov	r7, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	461e      	mov	r6, r3
 800b030:	f101 0c14 	add.w	ip, r1, #20
 800b034:	2000      	movs	r0, #0
 800b036:	f8dc 3000 	ldr.w	r3, [ip]
 800b03a:	b299      	uxth	r1, r3
 800b03c:	fb02 6101 	mla	r1, r2, r1, r6
 800b040:	0c1e      	lsrs	r6, r3, #16
 800b042:	0c0b      	lsrs	r3, r1, #16
 800b044:	fb02 3306 	mla	r3, r2, r6, r3
 800b048:	b289      	uxth	r1, r1
 800b04a:	3001      	adds	r0, #1
 800b04c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b050:	4285      	cmp	r5, r0
 800b052:	f84c 1b04 	str.w	r1, [ip], #4
 800b056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b05a:	dcec      	bgt.n	800b036 <__multadd+0x12>
 800b05c:	b30e      	cbz	r6, 800b0a2 <__multadd+0x7e>
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	42ab      	cmp	r3, r5
 800b062:	dc19      	bgt.n	800b098 <__multadd+0x74>
 800b064:	6861      	ldr	r1, [r4, #4]
 800b066:	4638      	mov	r0, r7
 800b068:	3101      	adds	r1, #1
 800b06a:	f7ff ff79 	bl	800af60 <_Balloc>
 800b06e:	4680      	mov	r8, r0
 800b070:	b928      	cbnz	r0, 800b07e <__multadd+0x5a>
 800b072:	4602      	mov	r2, r0
 800b074:	4b0c      	ldr	r3, [pc, #48]	@ (800b0a8 <__multadd+0x84>)
 800b076:	480d      	ldr	r0, [pc, #52]	@ (800b0ac <__multadd+0x88>)
 800b078:	21ba      	movs	r1, #186	@ 0xba
 800b07a:	f001 fcfd 	bl	800ca78 <__assert_func>
 800b07e:	6922      	ldr	r2, [r4, #16]
 800b080:	3202      	adds	r2, #2
 800b082:	f104 010c 	add.w	r1, r4, #12
 800b086:	0092      	lsls	r2, r2, #2
 800b088:	300c      	adds	r0, #12
 800b08a:	f001 fcdf 	bl	800ca4c <memcpy>
 800b08e:	4621      	mov	r1, r4
 800b090:	4638      	mov	r0, r7
 800b092:	f7ff ffa5 	bl	800afe0 <_Bfree>
 800b096:	4644      	mov	r4, r8
 800b098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b09c:	3501      	adds	r5, #1
 800b09e:	615e      	str	r6, [r3, #20]
 800b0a0:	6125      	str	r5, [r4, #16]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	080102ee 	.word	0x080102ee
 800b0ac:	080102ff 	.word	0x080102ff

0800b0b0 <__s2b>:
 800b0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	4615      	mov	r5, r2
 800b0b8:	461f      	mov	r7, r3
 800b0ba:	2209      	movs	r2, #9
 800b0bc:	3308      	adds	r3, #8
 800b0be:	4606      	mov	r6, r0
 800b0c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	db09      	blt.n	800b0e0 <__s2b+0x30>
 800b0cc:	4630      	mov	r0, r6
 800b0ce:	f7ff ff47 	bl	800af60 <_Balloc>
 800b0d2:	b940      	cbnz	r0, 800b0e6 <__s2b+0x36>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	4b19      	ldr	r3, [pc, #100]	@ (800b13c <__s2b+0x8c>)
 800b0d8:	4819      	ldr	r0, [pc, #100]	@ (800b140 <__s2b+0x90>)
 800b0da:	21d3      	movs	r1, #211	@ 0xd3
 800b0dc:	f001 fccc 	bl	800ca78 <__assert_func>
 800b0e0:	0052      	lsls	r2, r2, #1
 800b0e2:	3101      	adds	r1, #1
 800b0e4:	e7f0      	b.n	800b0c8 <__s2b+0x18>
 800b0e6:	9b08      	ldr	r3, [sp, #32]
 800b0e8:	6143      	str	r3, [r0, #20]
 800b0ea:	2d09      	cmp	r5, #9
 800b0ec:	f04f 0301 	mov.w	r3, #1
 800b0f0:	6103      	str	r3, [r0, #16]
 800b0f2:	dd16      	ble.n	800b122 <__s2b+0x72>
 800b0f4:	f104 0909 	add.w	r9, r4, #9
 800b0f8:	46c8      	mov	r8, r9
 800b0fa:	442c      	add	r4, r5
 800b0fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b100:	4601      	mov	r1, r0
 800b102:	3b30      	subs	r3, #48	@ 0x30
 800b104:	220a      	movs	r2, #10
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff8c 	bl	800b024 <__multadd>
 800b10c:	45a0      	cmp	r8, r4
 800b10e:	d1f5      	bne.n	800b0fc <__s2b+0x4c>
 800b110:	f1a5 0408 	sub.w	r4, r5, #8
 800b114:	444c      	add	r4, r9
 800b116:	1b2d      	subs	r5, r5, r4
 800b118:	1963      	adds	r3, r4, r5
 800b11a:	42bb      	cmp	r3, r7
 800b11c:	db04      	blt.n	800b128 <__s2b+0x78>
 800b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b122:	340a      	adds	r4, #10
 800b124:	2509      	movs	r5, #9
 800b126:	e7f6      	b.n	800b116 <__s2b+0x66>
 800b128:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b12c:	4601      	mov	r1, r0
 800b12e:	3b30      	subs	r3, #48	@ 0x30
 800b130:	220a      	movs	r2, #10
 800b132:	4630      	mov	r0, r6
 800b134:	f7ff ff76 	bl	800b024 <__multadd>
 800b138:	e7ee      	b.n	800b118 <__s2b+0x68>
 800b13a:	bf00      	nop
 800b13c:	080102ee 	.word	0x080102ee
 800b140:	080102ff 	.word	0x080102ff

0800b144 <__hi0bits>:
 800b144:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b148:	4603      	mov	r3, r0
 800b14a:	bf36      	itet	cc
 800b14c:	0403      	lslcc	r3, r0, #16
 800b14e:	2000      	movcs	r0, #0
 800b150:	2010      	movcc	r0, #16
 800b152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b156:	bf3c      	itt	cc
 800b158:	021b      	lslcc	r3, r3, #8
 800b15a:	3008      	addcc	r0, #8
 800b15c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b160:	bf3c      	itt	cc
 800b162:	011b      	lslcc	r3, r3, #4
 800b164:	3004      	addcc	r0, #4
 800b166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b16a:	bf3c      	itt	cc
 800b16c:	009b      	lslcc	r3, r3, #2
 800b16e:	3002      	addcc	r0, #2
 800b170:	2b00      	cmp	r3, #0
 800b172:	db05      	blt.n	800b180 <__hi0bits+0x3c>
 800b174:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b178:	f100 0001 	add.w	r0, r0, #1
 800b17c:	bf08      	it	eq
 800b17e:	2020      	moveq	r0, #32
 800b180:	4770      	bx	lr

0800b182 <__lo0bits>:
 800b182:	6803      	ldr	r3, [r0, #0]
 800b184:	4602      	mov	r2, r0
 800b186:	f013 0007 	ands.w	r0, r3, #7
 800b18a:	d00b      	beq.n	800b1a4 <__lo0bits+0x22>
 800b18c:	07d9      	lsls	r1, r3, #31
 800b18e:	d421      	bmi.n	800b1d4 <__lo0bits+0x52>
 800b190:	0798      	lsls	r0, r3, #30
 800b192:	bf49      	itett	mi
 800b194:	085b      	lsrmi	r3, r3, #1
 800b196:	089b      	lsrpl	r3, r3, #2
 800b198:	2001      	movmi	r0, #1
 800b19a:	6013      	strmi	r3, [r2, #0]
 800b19c:	bf5c      	itt	pl
 800b19e:	6013      	strpl	r3, [r2, #0]
 800b1a0:	2002      	movpl	r0, #2
 800b1a2:	4770      	bx	lr
 800b1a4:	b299      	uxth	r1, r3
 800b1a6:	b909      	cbnz	r1, 800b1ac <__lo0bits+0x2a>
 800b1a8:	0c1b      	lsrs	r3, r3, #16
 800b1aa:	2010      	movs	r0, #16
 800b1ac:	b2d9      	uxtb	r1, r3
 800b1ae:	b909      	cbnz	r1, 800b1b4 <__lo0bits+0x32>
 800b1b0:	3008      	adds	r0, #8
 800b1b2:	0a1b      	lsrs	r3, r3, #8
 800b1b4:	0719      	lsls	r1, r3, #28
 800b1b6:	bf04      	itt	eq
 800b1b8:	091b      	lsreq	r3, r3, #4
 800b1ba:	3004      	addeq	r0, #4
 800b1bc:	0799      	lsls	r1, r3, #30
 800b1be:	bf04      	itt	eq
 800b1c0:	089b      	lsreq	r3, r3, #2
 800b1c2:	3002      	addeq	r0, #2
 800b1c4:	07d9      	lsls	r1, r3, #31
 800b1c6:	d403      	bmi.n	800b1d0 <__lo0bits+0x4e>
 800b1c8:	085b      	lsrs	r3, r3, #1
 800b1ca:	f100 0001 	add.w	r0, r0, #1
 800b1ce:	d003      	beq.n	800b1d8 <__lo0bits+0x56>
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	4770      	bx	lr
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	4770      	bx	lr
 800b1d8:	2020      	movs	r0, #32
 800b1da:	4770      	bx	lr

0800b1dc <__i2b>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	f7ff febd 	bl	800af60 <_Balloc>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	b928      	cbnz	r0, 800b1f6 <__i2b+0x1a>
 800b1ea:	4b05      	ldr	r3, [pc, #20]	@ (800b200 <__i2b+0x24>)
 800b1ec:	4805      	ldr	r0, [pc, #20]	@ (800b204 <__i2b+0x28>)
 800b1ee:	f240 1145 	movw	r1, #325	@ 0x145
 800b1f2:	f001 fc41 	bl	800ca78 <__assert_func>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	6144      	str	r4, [r0, #20]
 800b1fa:	6103      	str	r3, [r0, #16]
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	bf00      	nop
 800b200:	080102ee 	.word	0x080102ee
 800b204:	080102ff 	.word	0x080102ff

0800b208 <__multiply>:
 800b208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20c:	4614      	mov	r4, r2
 800b20e:	690a      	ldr	r2, [r1, #16]
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	429a      	cmp	r2, r3
 800b214:	bfa8      	it	ge
 800b216:	4623      	movge	r3, r4
 800b218:	460f      	mov	r7, r1
 800b21a:	bfa4      	itt	ge
 800b21c:	460c      	movge	r4, r1
 800b21e:	461f      	movge	r7, r3
 800b220:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b224:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	6861      	ldr	r1, [r4, #4]
 800b22c:	eb0a 0609 	add.w	r6, sl, r9
 800b230:	42b3      	cmp	r3, r6
 800b232:	b085      	sub	sp, #20
 800b234:	bfb8      	it	lt
 800b236:	3101      	addlt	r1, #1
 800b238:	f7ff fe92 	bl	800af60 <_Balloc>
 800b23c:	b930      	cbnz	r0, 800b24c <__multiply+0x44>
 800b23e:	4602      	mov	r2, r0
 800b240:	4b44      	ldr	r3, [pc, #272]	@ (800b354 <__multiply+0x14c>)
 800b242:	4845      	ldr	r0, [pc, #276]	@ (800b358 <__multiply+0x150>)
 800b244:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b248:	f001 fc16 	bl	800ca78 <__assert_func>
 800b24c:	f100 0514 	add.w	r5, r0, #20
 800b250:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b254:	462b      	mov	r3, r5
 800b256:	2200      	movs	r2, #0
 800b258:	4543      	cmp	r3, r8
 800b25a:	d321      	bcc.n	800b2a0 <__multiply+0x98>
 800b25c:	f107 0114 	add.w	r1, r7, #20
 800b260:	f104 0214 	add.w	r2, r4, #20
 800b264:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b268:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b26c:	9302      	str	r3, [sp, #8]
 800b26e:	1b13      	subs	r3, r2, r4
 800b270:	3b15      	subs	r3, #21
 800b272:	f023 0303 	bic.w	r3, r3, #3
 800b276:	3304      	adds	r3, #4
 800b278:	f104 0715 	add.w	r7, r4, #21
 800b27c:	42ba      	cmp	r2, r7
 800b27e:	bf38      	it	cc
 800b280:	2304      	movcc	r3, #4
 800b282:	9301      	str	r3, [sp, #4]
 800b284:	9b02      	ldr	r3, [sp, #8]
 800b286:	9103      	str	r1, [sp, #12]
 800b288:	428b      	cmp	r3, r1
 800b28a:	d80c      	bhi.n	800b2a6 <__multiply+0x9e>
 800b28c:	2e00      	cmp	r6, #0
 800b28e:	dd03      	ble.n	800b298 <__multiply+0x90>
 800b290:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b294:	2b00      	cmp	r3, #0
 800b296:	d05b      	beq.n	800b350 <__multiply+0x148>
 800b298:	6106      	str	r6, [r0, #16]
 800b29a:	b005      	add	sp, #20
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	f843 2b04 	str.w	r2, [r3], #4
 800b2a4:	e7d8      	b.n	800b258 <__multiply+0x50>
 800b2a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2aa:	f1ba 0f00 	cmp.w	sl, #0
 800b2ae:	d024      	beq.n	800b2fa <__multiply+0xf2>
 800b2b0:	f104 0e14 	add.w	lr, r4, #20
 800b2b4:	46a9      	mov	r9, r5
 800b2b6:	f04f 0c00 	mov.w	ip, #0
 800b2ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2be:	f8d9 3000 	ldr.w	r3, [r9]
 800b2c2:	fa1f fb87 	uxth.w	fp, r7
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2d0:	f8d9 7000 	ldr.w	r7, [r9]
 800b2d4:	4463      	add	r3, ip
 800b2d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2da:	fb0a c70b 	mla	r7, sl, fp, ip
 800b2de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2e8:	4572      	cmp	r2, lr
 800b2ea:	f849 3b04 	str.w	r3, [r9], #4
 800b2ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2f2:	d8e2      	bhi.n	800b2ba <__multiply+0xb2>
 800b2f4:	9b01      	ldr	r3, [sp, #4]
 800b2f6:	f845 c003 	str.w	ip, [r5, r3]
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b300:	3104      	adds	r1, #4
 800b302:	f1b9 0f00 	cmp.w	r9, #0
 800b306:	d021      	beq.n	800b34c <__multiply+0x144>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	f104 0c14 	add.w	ip, r4, #20
 800b30e:	46ae      	mov	lr, r5
 800b310:	f04f 0a00 	mov.w	sl, #0
 800b314:	f8bc b000 	ldrh.w	fp, [ip]
 800b318:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b31c:	fb09 770b 	mla	r7, r9, fp, r7
 800b320:	4457      	add	r7, sl
 800b322:	b29b      	uxth	r3, r3
 800b324:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b328:	f84e 3b04 	str.w	r3, [lr], #4
 800b32c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b334:	f8be 3000 	ldrh.w	r3, [lr]
 800b338:	fb09 330a 	mla	r3, r9, sl, r3
 800b33c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b340:	4562      	cmp	r2, ip
 800b342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b346:	d8e5      	bhi.n	800b314 <__multiply+0x10c>
 800b348:	9f01      	ldr	r7, [sp, #4]
 800b34a:	51eb      	str	r3, [r5, r7]
 800b34c:	3504      	adds	r5, #4
 800b34e:	e799      	b.n	800b284 <__multiply+0x7c>
 800b350:	3e01      	subs	r6, #1
 800b352:	e79b      	b.n	800b28c <__multiply+0x84>
 800b354:	080102ee 	.word	0x080102ee
 800b358:	080102ff 	.word	0x080102ff

0800b35c <__pow5mult>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	4615      	mov	r5, r2
 800b362:	f012 0203 	ands.w	r2, r2, #3
 800b366:	4607      	mov	r7, r0
 800b368:	460e      	mov	r6, r1
 800b36a:	d007      	beq.n	800b37c <__pow5mult+0x20>
 800b36c:	4c25      	ldr	r4, [pc, #148]	@ (800b404 <__pow5mult+0xa8>)
 800b36e:	3a01      	subs	r2, #1
 800b370:	2300      	movs	r3, #0
 800b372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b376:	f7ff fe55 	bl	800b024 <__multadd>
 800b37a:	4606      	mov	r6, r0
 800b37c:	10ad      	asrs	r5, r5, #2
 800b37e:	d03d      	beq.n	800b3fc <__pow5mult+0xa0>
 800b380:	69fc      	ldr	r4, [r7, #28]
 800b382:	b97c      	cbnz	r4, 800b3a4 <__pow5mult+0x48>
 800b384:	2010      	movs	r0, #16
 800b386:	f7ff fd35 	bl	800adf4 <malloc>
 800b38a:	4602      	mov	r2, r0
 800b38c:	61f8      	str	r0, [r7, #28]
 800b38e:	b928      	cbnz	r0, 800b39c <__pow5mult+0x40>
 800b390:	4b1d      	ldr	r3, [pc, #116]	@ (800b408 <__pow5mult+0xac>)
 800b392:	481e      	ldr	r0, [pc, #120]	@ (800b40c <__pow5mult+0xb0>)
 800b394:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b398:	f001 fb6e 	bl	800ca78 <__assert_func>
 800b39c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3a0:	6004      	str	r4, [r0, #0]
 800b3a2:	60c4      	str	r4, [r0, #12]
 800b3a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3ac:	b94c      	cbnz	r4, 800b3c2 <__pow5mult+0x66>
 800b3ae:	f240 2171 	movw	r1, #625	@ 0x271
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	f7ff ff12 	bl	800b1dc <__i2b>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3be:	4604      	mov	r4, r0
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	f04f 0900 	mov.w	r9, #0
 800b3c6:	07eb      	lsls	r3, r5, #31
 800b3c8:	d50a      	bpl.n	800b3e0 <__pow5mult+0x84>
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4638      	mov	r0, r7
 800b3d0:	f7ff ff1a 	bl	800b208 <__multiply>
 800b3d4:	4631      	mov	r1, r6
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f7ff fe01 	bl	800afe0 <_Bfree>
 800b3de:	4646      	mov	r6, r8
 800b3e0:	106d      	asrs	r5, r5, #1
 800b3e2:	d00b      	beq.n	800b3fc <__pow5mult+0xa0>
 800b3e4:	6820      	ldr	r0, [r4, #0]
 800b3e6:	b938      	cbnz	r0, 800b3f8 <__pow5mult+0x9c>
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff ff0b 	bl	800b208 <__multiply>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	f8c0 9000 	str.w	r9, [r0]
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	e7e4      	b.n	800b3c6 <__pow5mult+0x6a>
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b402:	bf00      	nop
 800b404:	08010358 	.word	0x08010358
 800b408:	0801027f 	.word	0x0801027f
 800b40c:	080102ff 	.word	0x080102ff

0800b410 <__lshift>:
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	6849      	ldr	r1, [r1, #4]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	4607      	mov	r7, r0
 800b422:	4691      	mov	r9, r2
 800b424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b428:	f108 0601 	add.w	r6, r8, #1
 800b42c:	42b3      	cmp	r3, r6
 800b42e:	db0b      	blt.n	800b448 <__lshift+0x38>
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff fd95 	bl	800af60 <_Balloc>
 800b436:	4605      	mov	r5, r0
 800b438:	b948      	cbnz	r0, 800b44e <__lshift+0x3e>
 800b43a:	4602      	mov	r2, r0
 800b43c:	4b28      	ldr	r3, [pc, #160]	@ (800b4e0 <__lshift+0xd0>)
 800b43e:	4829      	ldr	r0, [pc, #164]	@ (800b4e4 <__lshift+0xd4>)
 800b440:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b444:	f001 fb18 	bl	800ca78 <__assert_func>
 800b448:	3101      	adds	r1, #1
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	e7ee      	b.n	800b42c <__lshift+0x1c>
 800b44e:	2300      	movs	r3, #0
 800b450:	f100 0114 	add.w	r1, r0, #20
 800b454:	f100 0210 	add.w	r2, r0, #16
 800b458:	4618      	mov	r0, r3
 800b45a:	4553      	cmp	r3, sl
 800b45c:	db33      	blt.n	800b4c6 <__lshift+0xb6>
 800b45e:	6920      	ldr	r0, [r4, #16]
 800b460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b464:	f104 0314 	add.w	r3, r4, #20
 800b468:	f019 091f 	ands.w	r9, r9, #31
 800b46c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b474:	d02b      	beq.n	800b4ce <__lshift+0xbe>
 800b476:	f1c9 0e20 	rsb	lr, r9, #32
 800b47a:	468a      	mov	sl, r1
 800b47c:	2200      	movs	r2, #0
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	fa00 f009 	lsl.w	r0, r0, r9
 800b484:	4310      	orrs	r0, r2
 800b486:	f84a 0b04 	str.w	r0, [sl], #4
 800b48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b48e:	459c      	cmp	ip, r3
 800b490:	fa22 f20e 	lsr.w	r2, r2, lr
 800b494:	d8f3      	bhi.n	800b47e <__lshift+0x6e>
 800b496:	ebac 0304 	sub.w	r3, ip, r4
 800b49a:	3b15      	subs	r3, #21
 800b49c:	f023 0303 	bic.w	r3, r3, #3
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	f104 0015 	add.w	r0, r4, #21
 800b4a6:	4584      	cmp	ip, r0
 800b4a8:	bf38      	it	cc
 800b4aa:	2304      	movcc	r3, #4
 800b4ac:	50ca      	str	r2, [r1, r3]
 800b4ae:	b10a      	cbz	r2, 800b4b4 <__lshift+0xa4>
 800b4b0:	f108 0602 	add.w	r6, r8, #2
 800b4b4:	3e01      	subs	r6, #1
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	612e      	str	r6, [r5, #16]
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	f7ff fd90 	bl	800afe0 <_Bfree>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	e7c5      	b.n	800b45a <__lshift+0x4a>
 800b4ce:	3904      	subs	r1, #4
 800b4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4d8:	459c      	cmp	ip, r3
 800b4da:	d8f9      	bhi.n	800b4d0 <__lshift+0xc0>
 800b4dc:	e7ea      	b.n	800b4b4 <__lshift+0xa4>
 800b4de:	bf00      	nop
 800b4e0:	080102ee 	.word	0x080102ee
 800b4e4:	080102ff 	.word	0x080102ff

0800b4e8 <__mcmp>:
 800b4e8:	690a      	ldr	r2, [r1, #16]
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	6900      	ldr	r0, [r0, #16]
 800b4ee:	1a80      	subs	r0, r0, r2
 800b4f0:	b530      	push	{r4, r5, lr}
 800b4f2:	d10e      	bne.n	800b512 <__mcmp+0x2a>
 800b4f4:	3314      	adds	r3, #20
 800b4f6:	3114      	adds	r1, #20
 800b4f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b500:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b508:	4295      	cmp	r5, r2
 800b50a:	d003      	beq.n	800b514 <__mcmp+0x2c>
 800b50c:	d205      	bcs.n	800b51a <__mcmp+0x32>
 800b50e:	f04f 30ff 	mov.w	r0, #4294967295
 800b512:	bd30      	pop	{r4, r5, pc}
 800b514:	42a3      	cmp	r3, r4
 800b516:	d3f3      	bcc.n	800b500 <__mcmp+0x18>
 800b518:	e7fb      	b.n	800b512 <__mcmp+0x2a>
 800b51a:	2001      	movs	r0, #1
 800b51c:	e7f9      	b.n	800b512 <__mcmp+0x2a>
	...

0800b520 <__mdiff>:
 800b520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	4689      	mov	r9, r1
 800b526:	4606      	mov	r6, r0
 800b528:	4611      	mov	r1, r2
 800b52a:	4648      	mov	r0, r9
 800b52c:	4614      	mov	r4, r2
 800b52e:	f7ff ffdb 	bl	800b4e8 <__mcmp>
 800b532:	1e05      	subs	r5, r0, #0
 800b534:	d112      	bne.n	800b55c <__mdiff+0x3c>
 800b536:	4629      	mov	r1, r5
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff fd11 	bl	800af60 <_Balloc>
 800b53e:	4602      	mov	r2, r0
 800b540:	b928      	cbnz	r0, 800b54e <__mdiff+0x2e>
 800b542:	4b3f      	ldr	r3, [pc, #252]	@ (800b640 <__mdiff+0x120>)
 800b544:	f240 2137 	movw	r1, #567	@ 0x237
 800b548:	483e      	ldr	r0, [pc, #248]	@ (800b644 <__mdiff+0x124>)
 800b54a:	f001 fa95 	bl	800ca78 <__assert_func>
 800b54e:	2301      	movs	r3, #1
 800b550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b554:	4610      	mov	r0, r2
 800b556:	b003      	add	sp, #12
 800b558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55c:	bfbc      	itt	lt
 800b55e:	464b      	movlt	r3, r9
 800b560:	46a1      	movlt	r9, r4
 800b562:	4630      	mov	r0, r6
 800b564:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b568:	bfba      	itte	lt
 800b56a:	461c      	movlt	r4, r3
 800b56c:	2501      	movlt	r5, #1
 800b56e:	2500      	movge	r5, #0
 800b570:	f7ff fcf6 	bl	800af60 <_Balloc>
 800b574:	4602      	mov	r2, r0
 800b576:	b918      	cbnz	r0, 800b580 <__mdiff+0x60>
 800b578:	4b31      	ldr	r3, [pc, #196]	@ (800b640 <__mdiff+0x120>)
 800b57a:	f240 2145 	movw	r1, #581	@ 0x245
 800b57e:	e7e3      	b.n	800b548 <__mdiff+0x28>
 800b580:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b584:	6926      	ldr	r6, [r4, #16]
 800b586:	60c5      	str	r5, [r0, #12]
 800b588:	f109 0310 	add.w	r3, r9, #16
 800b58c:	f109 0514 	add.w	r5, r9, #20
 800b590:	f104 0e14 	add.w	lr, r4, #20
 800b594:	f100 0b14 	add.w	fp, r0, #20
 800b598:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b59c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	46d9      	mov	r9, fp
 800b5a4:	f04f 0c00 	mov.w	ip, #0
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	fa1f f38a 	uxth.w	r3, sl
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	b283      	uxth	r3, r0
 800b5bc:	1acb      	subs	r3, r1, r3
 800b5be:	0c00      	lsrs	r0, r0, #16
 800b5c0:	4463      	add	r3, ip
 800b5c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5d0:	4576      	cmp	r6, lr
 800b5d2:	f849 3b04 	str.w	r3, [r9], #4
 800b5d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5da:	d8e5      	bhi.n	800b5a8 <__mdiff+0x88>
 800b5dc:	1b33      	subs	r3, r6, r4
 800b5de:	3b15      	subs	r3, #21
 800b5e0:	f023 0303 	bic.w	r3, r3, #3
 800b5e4:	3415      	adds	r4, #21
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	42a6      	cmp	r6, r4
 800b5ea:	bf38      	it	cc
 800b5ec:	2304      	movcc	r3, #4
 800b5ee:	441d      	add	r5, r3
 800b5f0:	445b      	add	r3, fp
 800b5f2:	461e      	mov	r6, r3
 800b5f4:	462c      	mov	r4, r5
 800b5f6:	4544      	cmp	r4, r8
 800b5f8:	d30e      	bcc.n	800b618 <__mdiff+0xf8>
 800b5fa:	f108 0103 	add.w	r1, r8, #3
 800b5fe:	1b49      	subs	r1, r1, r5
 800b600:	f021 0103 	bic.w	r1, r1, #3
 800b604:	3d03      	subs	r5, #3
 800b606:	45a8      	cmp	r8, r5
 800b608:	bf38      	it	cc
 800b60a:	2100      	movcc	r1, #0
 800b60c:	440b      	add	r3, r1
 800b60e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b612:	b191      	cbz	r1, 800b63a <__mdiff+0x11a>
 800b614:	6117      	str	r7, [r2, #16]
 800b616:	e79d      	b.n	800b554 <__mdiff+0x34>
 800b618:	f854 1b04 	ldr.w	r1, [r4], #4
 800b61c:	46e6      	mov	lr, ip
 800b61e:	0c08      	lsrs	r0, r1, #16
 800b620:	fa1c fc81 	uxtah	ip, ip, r1
 800b624:	4471      	add	r1, lr
 800b626:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b62a:	b289      	uxth	r1, r1
 800b62c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b630:	f846 1b04 	str.w	r1, [r6], #4
 800b634:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b638:	e7dd      	b.n	800b5f6 <__mdiff+0xd6>
 800b63a:	3f01      	subs	r7, #1
 800b63c:	e7e7      	b.n	800b60e <__mdiff+0xee>
 800b63e:	bf00      	nop
 800b640:	080102ee 	.word	0x080102ee
 800b644:	080102ff 	.word	0x080102ff

0800b648 <__ulp>:
 800b648:	b082      	sub	sp, #8
 800b64a:	ed8d 0b00 	vstr	d0, [sp]
 800b64e:	9a01      	ldr	r2, [sp, #4]
 800b650:	4b0f      	ldr	r3, [pc, #60]	@ (800b690 <__ulp+0x48>)
 800b652:	4013      	ands	r3, r2
 800b654:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dc08      	bgt.n	800b66e <__ulp+0x26>
 800b65c:	425b      	negs	r3, r3
 800b65e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b662:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b666:	da04      	bge.n	800b672 <__ulp+0x2a>
 800b668:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b66c:	4113      	asrs	r3, r2
 800b66e:	2200      	movs	r2, #0
 800b670:	e008      	b.n	800b684 <__ulp+0x3c>
 800b672:	f1a2 0314 	sub.w	r3, r2, #20
 800b676:	2b1e      	cmp	r3, #30
 800b678:	bfda      	itte	le
 800b67a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b67e:	40da      	lsrle	r2, r3
 800b680:	2201      	movgt	r2, #1
 800b682:	2300      	movs	r3, #0
 800b684:	4619      	mov	r1, r3
 800b686:	4610      	mov	r0, r2
 800b688:	ec41 0b10 	vmov	d0, r0, r1
 800b68c:	b002      	add	sp, #8
 800b68e:	4770      	bx	lr
 800b690:	7ff00000 	.word	0x7ff00000

0800b694 <__b2d>:
 800b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	6906      	ldr	r6, [r0, #16]
 800b69a:	f100 0814 	add.w	r8, r0, #20
 800b69e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b6a2:	1f37      	subs	r7, r6, #4
 800b6a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7ff fd4b 	bl	800b144 <__hi0bits>
 800b6ae:	f1c0 0320 	rsb	r3, r0, #32
 800b6b2:	280a      	cmp	r0, #10
 800b6b4:	600b      	str	r3, [r1, #0]
 800b6b6:	491b      	ldr	r1, [pc, #108]	@ (800b724 <__b2d+0x90>)
 800b6b8:	dc15      	bgt.n	800b6e6 <__b2d+0x52>
 800b6ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800b6be:	fa22 f30c 	lsr.w	r3, r2, ip
 800b6c2:	45b8      	cmp	r8, r7
 800b6c4:	ea43 0501 	orr.w	r5, r3, r1
 800b6c8:	bf34      	ite	cc
 800b6ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6ce:	2300      	movcs	r3, #0
 800b6d0:	3015      	adds	r0, #21
 800b6d2:	fa02 f000 	lsl.w	r0, r2, r0
 800b6d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800b6da:	4303      	orrs	r3, r0
 800b6dc:	461c      	mov	r4, r3
 800b6de:	ec45 4b10 	vmov	d0, r4, r5
 800b6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e6:	45b8      	cmp	r8, r7
 800b6e8:	bf3a      	itte	cc
 800b6ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b6ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800b6f2:	2300      	movcs	r3, #0
 800b6f4:	380b      	subs	r0, #11
 800b6f6:	d012      	beq.n	800b71e <__b2d+0x8a>
 800b6f8:	f1c0 0120 	rsb	r1, r0, #32
 800b6fc:	fa23 f401 	lsr.w	r4, r3, r1
 800b700:	4082      	lsls	r2, r0
 800b702:	4322      	orrs	r2, r4
 800b704:	4547      	cmp	r7, r8
 800b706:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b70a:	bf8c      	ite	hi
 800b70c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b710:	2200      	movls	r2, #0
 800b712:	4083      	lsls	r3, r0
 800b714:	40ca      	lsrs	r2, r1
 800b716:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b71a:	4313      	orrs	r3, r2
 800b71c:	e7de      	b.n	800b6dc <__b2d+0x48>
 800b71e:	ea42 0501 	orr.w	r5, r2, r1
 800b722:	e7db      	b.n	800b6dc <__b2d+0x48>
 800b724:	3ff00000 	.word	0x3ff00000

0800b728 <__d2b>:
 800b728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b72c:	460f      	mov	r7, r1
 800b72e:	2101      	movs	r1, #1
 800b730:	ec59 8b10 	vmov	r8, r9, d0
 800b734:	4616      	mov	r6, r2
 800b736:	f7ff fc13 	bl	800af60 <_Balloc>
 800b73a:	4604      	mov	r4, r0
 800b73c:	b930      	cbnz	r0, 800b74c <__d2b+0x24>
 800b73e:	4602      	mov	r2, r0
 800b740:	4b23      	ldr	r3, [pc, #140]	@ (800b7d0 <__d2b+0xa8>)
 800b742:	4824      	ldr	r0, [pc, #144]	@ (800b7d4 <__d2b+0xac>)
 800b744:	f240 310f 	movw	r1, #783	@ 0x30f
 800b748:	f001 f996 	bl	800ca78 <__assert_func>
 800b74c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b754:	b10d      	cbz	r5, 800b75a <__d2b+0x32>
 800b756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	f1b8 0300 	subs.w	r3, r8, #0
 800b760:	d023      	beq.n	800b7aa <__d2b+0x82>
 800b762:	4668      	mov	r0, sp
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	f7ff fd0c 	bl	800b182 <__lo0bits>
 800b76a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b76e:	b1d0      	cbz	r0, 800b7a6 <__d2b+0x7e>
 800b770:	f1c0 0320 	rsb	r3, r0, #32
 800b774:	fa02 f303 	lsl.w	r3, r2, r3
 800b778:	430b      	orrs	r3, r1
 800b77a:	40c2      	lsrs	r2, r0
 800b77c:	6163      	str	r3, [r4, #20]
 800b77e:	9201      	str	r2, [sp, #4]
 800b780:	9b01      	ldr	r3, [sp, #4]
 800b782:	61a3      	str	r3, [r4, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	bf0c      	ite	eq
 800b788:	2201      	moveq	r2, #1
 800b78a:	2202      	movne	r2, #2
 800b78c:	6122      	str	r2, [r4, #16]
 800b78e:	b1a5      	cbz	r5, 800b7ba <__d2b+0x92>
 800b790:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b794:	4405      	add	r5, r0
 800b796:	603d      	str	r5, [r7, #0]
 800b798:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b79c:	6030      	str	r0, [r6, #0]
 800b79e:	4620      	mov	r0, r4
 800b7a0:	b003      	add	sp, #12
 800b7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7a6:	6161      	str	r1, [r4, #20]
 800b7a8:	e7ea      	b.n	800b780 <__d2b+0x58>
 800b7aa:	a801      	add	r0, sp, #4
 800b7ac:	f7ff fce9 	bl	800b182 <__lo0bits>
 800b7b0:	9b01      	ldr	r3, [sp, #4]
 800b7b2:	6163      	str	r3, [r4, #20]
 800b7b4:	3020      	adds	r0, #32
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	e7e8      	b.n	800b78c <__d2b+0x64>
 800b7ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b7c2:	6038      	str	r0, [r7, #0]
 800b7c4:	6918      	ldr	r0, [r3, #16]
 800b7c6:	f7ff fcbd 	bl	800b144 <__hi0bits>
 800b7ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7ce:	e7e5      	b.n	800b79c <__d2b+0x74>
 800b7d0:	080102ee 	.word	0x080102ee
 800b7d4:	080102ff 	.word	0x080102ff

0800b7d8 <__ratio>:
 800b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7dc:	b085      	sub	sp, #20
 800b7de:	e9cd 1000 	strd	r1, r0, [sp]
 800b7e2:	a902      	add	r1, sp, #8
 800b7e4:	f7ff ff56 	bl	800b694 <__b2d>
 800b7e8:	9800      	ldr	r0, [sp, #0]
 800b7ea:	a903      	add	r1, sp, #12
 800b7ec:	ec55 4b10 	vmov	r4, r5, d0
 800b7f0:	f7ff ff50 	bl	800b694 <__b2d>
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	6919      	ldr	r1, [r3, #16]
 800b7f8:	9b00      	ldr	r3, [sp, #0]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	1ac9      	subs	r1, r1, r3
 800b7fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	ec5b ab10 	vmov	sl, fp, d0
 800b808:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	bfce      	itee	gt
 800b810:	462a      	movgt	r2, r5
 800b812:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b816:	465a      	movle	r2, fp
 800b818:	462f      	mov	r7, r5
 800b81a:	46d9      	mov	r9, fp
 800b81c:	bfcc      	ite	gt
 800b81e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b822:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b826:	464b      	mov	r3, r9
 800b828:	4652      	mov	r2, sl
 800b82a:	4620      	mov	r0, r4
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f5 f815 	bl	800085c <__aeabi_ddiv>
 800b832:	ec41 0b10 	vmov	d0, r0, r1
 800b836:	b005      	add	sp, #20
 800b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b83c <__copybits>:
 800b83c:	3901      	subs	r1, #1
 800b83e:	b570      	push	{r4, r5, r6, lr}
 800b840:	1149      	asrs	r1, r1, #5
 800b842:	6914      	ldr	r4, [r2, #16]
 800b844:	3101      	adds	r1, #1
 800b846:	f102 0314 	add.w	r3, r2, #20
 800b84a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b84e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b852:	1f05      	subs	r5, r0, #4
 800b854:	42a3      	cmp	r3, r4
 800b856:	d30c      	bcc.n	800b872 <__copybits+0x36>
 800b858:	1aa3      	subs	r3, r4, r2
 800b85a:	3b11      	subs	r3, #17
 800b85c:	f023 0303 	bic.w	r3, r3, #3
 800b860:	3211      	adds	r2, #17
 800b862:	42a2      	cmp	r2, r4
 800b864:	bf88      	it	hi
 800b866:	2300      	movhi	r3, #0
 800b868:	4418      	add	r0, r3
 800b86a:	2300      	movs	r3, #0
 800b86c:	4288      	cmp	r0, r1
 800b86e:	d305      	bcc.n	800b87c <__copybits+0x40>
 800b870:	bd70      	pop	{r4, r5, r6, pc}
 800b872:	f853 6b04 	ldr.w	r6, [r3], #4
 800b876:	f845 6f04 	str.w	r6, [r5, #4]!
 800b87a:	e7eb      	b.n	800b854 <__copybits+0x18>
 800b87c:	f840 3b04 	str.w	r3, [r0], #4
 800b880:	e7f4      	b.n	800b86c <__copybits+0x30>

0800b882 <__any_on>:
 800b882:	f100 0214 	add.w	r2, r0, #20
 800b886:	6900      	ldr	r0, [r0, #16]
 800b888:	114b      	asrs	r3, r1, #5
 800b88a:	4298      	cmp	r0, r3
 800b88c:	b510      	push	{r4, lr}
 800b88e:	db11      	blt.n	800b8b4 <__any_on+0x32>
 800b890:	dd0a      	ble.n	800b8a8 <__any_on+0x26>
 800b892:	f011 011f 	ands.w	r1, r1, #31
 800b896:	d007      	beq.n	800b8a8 <__any_on+0x26>
 800b898:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b89c:	fa24 f001 	lsr.w	r0, r4, r1
 800b8a0:	fa00 f101 	lsl.w	r1, r0, r1
 800b8a4:	428c      	cmp	r4, r1
 800b8a6:	d10b      	bne.n	800b8c0 <__any_on+0x3e>
 800b8a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d803      	bhi.n	800b8b8 <__any_on+0x36>
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	bd10      	pop	{r4, pc}
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	e7f7      	b.n	800b8a8 <__any_on+0x26>
 800b8b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	d0f5      	beq.n	800b8ac <__any_on+0x2a>
 800b8c0:	2001      	movs	r0, #1
 800b8c2:	e7f6      	b.n	800b8b2 <__any_on+0x30>

0800b8c4 <sulp>:
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	ec45 4b10 	vmov	d0, r4, r5
 800b8ce:	4616      	mov	r6, r2
 800b8d0:	f7ff feba 	bl	800b648 <__ulp>
 800b8d4:	ec51 0b10 	vmov	r0, r1, d0
 800b8d8:	b17e      	cbz	r6, 800b8fa <sulp+0x36>
 800b8da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b8de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	dd09      	ble.n	800b8fa <sulp+0x36>
 800b8e6:	051b      	lsls	r3, r3, #20
 800b8e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b8ec:	2400      	movs	r4, #0
 800b8ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	f7f4 fe87 	bl	8000608 <__aeabi_dmul>
 800b8fa:	ec41 0b10 	vmov	d0, r0, r1
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}

0800b900 <_strtod_l>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	b09f      	sub	sp, #124	@ 0x7c
 800b906:	460c      	mov	r4, r1
 800b908:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b90a:	2200      	movs	r2, #0
 800b90c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b90e:	9005      	str	r0, [sp, #20]
 800b910:	f04f 0a00 	mov.w	sl, #0
 800b914:	f04f 0b00 	mov.w	fp, #0
 800b918:	460a      	mov	r2, r1
 800b91a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b91c:	7811      	ldrb	r1, [r2, #0]
 800b91e:	292b      	cmp	r1, #43	@ 0x2b
 800b920:	d04a      	beq.n	800b9b8 <_strtod_l+0xb8>
 800b922:	d838      	bhi.n	800b996 <_strtod_l+0x96>
 800b924:	290d      	cmp	r1, #13
 800b926:	d832      	bhi.n	800b98e <_strtod_l+0x8e>
 800b928:	2908      	cmp	r1, #8
 800b92a:	d832      	bhi.n	800b992 <_strtod_l+0x92>
 800b92c:	2900      	cmp	r1, #0
 800b92e:	d03b      	beq.n	800b9a8 <_strtod_l+0xa8>
 800b930:	2200      	movs	r2, #0
 800b932:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b936:	782a      	ldrb	r2, [r5, #0]
 800b938:	2a30      	cmp	r2, #48	@ 0x30
 800b93a:	f040 80b3 	bne.w	800baa4 <_strtod_l+0x1a4>
 800b93e:	786a      	ldrb	r2, [r5, #1]
 800b940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b944:	2a58      	cmp	r2, #88	@ 0x58
 800b946:	d16e      	bne.n	800ba26 <_strtod_l+0x126>
 800b948:	9302      	str	r3, [sp, #8]
 800b94a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	4a8e      	ldr	r2, [pc, #568]	@ (800bb8c <_strtod_l+0x28c>)
 800b954:	9805      	ldr	r0, [sp, #20]
 800b956:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b958:	a919      	add	r1, sp, #100	@ 0x64
 800b95a:	f001 f927 	bl	800cbac <__gethex>
 800b95e:	f010 060f 	ands.w	r6, r0, #15
 800b962:	4604      	mov	r4, r0
 800b964:	d005      	beq.n	800b972 <_strtod_l+0x72>
 800b966:	2e06      	cmp	r6, #6
 800b968:	d128      	bne.n	800b9bc <_strtod_l+0xbc>
 800b96a:	3501      	adds	r5, #1
 800b96c:	2300      	movs	r3, #0
 800b96e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b970:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b974:	2b00      	cmp	r3, #0
 800b976:	f040 858e 	bne.w	800c496 <_strtod_l+0xb96>
 800b97a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b97c:	b1cb      	cbz	r3, 800b9b2 <_strtod_l+0xb2>
 800b97e:	4652      	mov	r2, sl
 800b980:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b984:	ec43 2b10 	vmov	d0, r2, r3
 800b988:	b01f      	add	sp, #124	@ 0x7c
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	2920      	cmp	r1, #32
 800b990:	d1ce      	bne.n	800b930 <_strtod_l+0x30>
 800b992:	3201      	adds	r2, #1
 800b994:	e7c1      	b.n	800b91a <_strtod_l+0x1a>
 800b996:	292d      	cmp	r1, #45	@ 0x2d
 800b998:	d1ca      	bne.n	800b930 <_strtod_l+0x30>
 800b99a:	2101      	movs	r1, #1
 800b99c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b99e:	1c51      	adds	r1, r2, #1
 800b9a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b9a2:	7852      	ldrb	r2, [r2, #1]
 800b9a4:	2a00      	cmp	r2, #0
 800b9a6:	d1c5      	bne.n	800b934 <_strtod_l+0x34>
 800b9a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b9aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f040 8570 	bne.w	800c492 <_strtod_l+0xb92>
 800b9b2:	4652      	mov	r2, sl
 800b9b4:	465b      	mov	r3, fp
 800b9b6:	e7e5      	b.n	800b984 <_strtod_l+0x84>
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	e7ef      	b.n	800b99c <_strtod_l+0x9c>
 800b9bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9be:	b13a      	cbz	r2, 800b9d0 <_strtod_l+0xd0>
 800b9c0:	2135      	movs	r1, #53	@ 0x35
 800b9c2:	a81c      	add	r0, sp, #112	@ 0x70
 800b9c4:	f7ff ff3a 	bl	800b83c <__copybits>
 800b9c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9ca:	9805      	ldr	r0, [sp, #20]
 800b9cc:	f7ff fb08 	bl	800afe0 <_Bfree>
 800b9d0:	3e01      	subs	r6, #1
 800b9d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b9d4:	2e04      	cmp	r6, #4
 800b9d6:	d806      	bhi.n	800b9e6 <_strtod_l+0xe6>
 800b9d8:	e8df f006 	tbb	[pc, r6]
 800b9dc:	201d0314 	.word	0x201d0314
 800b9e0:	14          	.byte	0x14
 800b9e1:	00          	.byte	0x00
 800b9e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b9e6:	05e1      	lsls	r1, r4, #23
 800b9e8:	bf48      	it	mi
 800b9ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b9ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9f2:	0d1b      	lsrs	r3, r3, #20
 800b9f4:	051b      	lsls	r3, r3, #20
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1bb      	bne.n	800b972 <_strtod_l+0x72>
 800b9fa:	f7fe fb2f 	bl	800a05c <__errno>
 800b9fe:	2322      	movs	r3, #34	@ 0x22
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	e7b6      	b.n	800b972 <_strtod_l+0x72>
 800ba04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ba08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ba0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ba10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba14:	e7e7      	b.n	800b9e6 <_strtod_l+0xe6>
 800ba16:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800bb94 <_strtod_l+0x294>
 800ba1a:	e7e4      	b.n	800b9e6 <_strtod_l+0xe6>
 800ba1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ba20:	f04f 3aff 	mov.w	sl, #4294967295
 800ba24:	e7df      	b.n	800b9e6 <_strtod_l+0xe6>
 800ba26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba28:	1c5a      	adds	r2, r3, #1
 800ba2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba2c:	785b      	ldrb	r3, [r3, #1]
 800ba2e:	2b30      	cmp	r3, #48	@ 0x30
 800ba30:	d0f9      	beq.n	800ba26 <_strtod_l+0x126>
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d09d      	beq.n	800b972 <_strtod_l+0x72>
 800ba36:	2301      	movs	r3, #1
 800ba38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba3c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ba3e:	2300      	movs	r3, #0
 800ba40:	9308      	str	r3, [sp, #32]
 800ba42:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba44:	461f      	mov	r7, r3
 800ba46:	220a      	movs	r2, #10
 800ba48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ba4a:	7805      	ldrb	r5, [r0, #0]
 800ba4c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ba50:	b2d9      	uxtb	r1, r3
 800ba52:	2909      	cmp	r1, #9
 800ba54:	d928      	bls.n	800baa8 <_strtod_l+0x1a8>
 800ba56:	494e      	ldr	r1, [pc, #312]	@ (800bb90 <_strtod_l+0x290>)
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f000 ffd5 	bl	800ca08 <strncmp>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	d032      	beq.n	800bac8 <_strtod_l+0x1c8>
 800ba62:	2000      	movs	r0, #0
 800ba64:	462a      	mov	r2, r5
 800ba66:	4681      	mov	r9, r0
 800ba68:	463d      	mov	r5, r7
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2a65      	cmp	r2, #101	@ 0x65
 800ba6e:	d001      	beq.n	800ba74 <_strtod_l+0x174>
 800ba70:	2a45      	cmp	r2, #69	@ 0x45
 800ba72:	d114      	bne.n	800ba9e <_strtod_l+0x19e>
 800ba74:	b91d      	cbnz	r5, 800ba7e <_strtod_l+0x17e>
 800ba76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba78:	4302      	orrs	r2, r0
 800ba7a:	d095      	beq.n	800b9a8 <_strtod_l+0xa8>
 800ba7c:	2500      	movs	r5, #0
 800ba7e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ba80:	1c62      	adds	r2, r4, #1
 800ba82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ba84:	7862      	ldrb	r2, [r4, #1]
 800ba86:	2a2b      	cmp	r2, #43	@ 0x2b
 800ba88:	d077      	beq.n	800bb7a <_strtod_l+0x27a>
 800ba8a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ba8c:	d07b      	beq.n	800bb86 <_strtod_l+0x286>
 800ba8e:	f04f 0c00 	mov.w	ip, #0
 800ba92:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ba96:	2909      	cmp	r1, #9
 800ba98:	f240 8082 	bls.w	800bba0 <_strtod_l+0x2a0>
 800ba9c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ba9e:	f04f 0800 	mov.w	r8, #0
 800baa2:	e0a2      	b.n	800bbea <_strtod_l+0x2ea>
 800baa4:	2300      	movs	r3, #0
 800baa6:	e7c7      	b.n	800ba38 <_strtod_l+0x138>
 800baa8:	2f08      	cmp	r7, #8
 800baaa:	bfd5      	itete	le
 800baac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800baae:	9908      	ldrgt	r1, [sp, #32]
 800bab0:	fb02 3301 	mlale	r3, r2, r1, r3
 800bab4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bab8:	f100 0001 	add.w	r0, r0, #1
 800babc:	bfd4      	ite	le
 800babe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bac0:	9308      	strgt	r3, [sp, #32]
 800bac2:	3701      	adds	r7, #1
 800bac4:	9019      	str	r0, [sp, #100]	@ 0x64
 800bac6:	e7bf      	b.n	800ba48 <_strtod_l+0x148>
 800bac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800baca:	1c5a      	adds	r2, r3, #1
 800bacc:	9219      	str	r2, [sp, #100]	@ 0x64
 800bace:	785a      	ldrb	r2, [r3, #1]
 800bad0:	b37f      	cbz	r7, 800bb32 <_strtod_l+0x232>
 800bad2:	4681      	mov	r9, r0
 800bad4:	463d      	mov	r5, r7
 800bad6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bada:	2b09      	cmp	r3, #9
 800badc:	d912      	bls.n	800bb04 <_strtod_l+0x204>
 800bade:	2301      	movs	r3, #1
 800bae0:	e7c4      	b.n	800ba6c <_strtod_l+0x16c>
 800bae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	9219      	str	r2, [sp, #100]	@ 0x64
 800bae8:	785a      	ldrb	r2, [r3, #1]
 800baea:	3001      	adds	r0, #1
 800baec:	2a30      	cmp	r2, #48	@ 0x30
 800baee:	d0f8      	beq.n	800bae2 <_strtod_l+0x1e2>
 800baf0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800baf4:	2b08      	cmp	r3, #8
 800baf6:	f200 84d3 	bhi.w	800c4a0 <_strtod_l+0xba0>
 800bafa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bafc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bafe:	4681      	mov	r9, r0
 800bb00:	2000      	movs	r0, #0
 800bb02:	4605      	mov	r5, r0
 800bb04:	3a30      	subs	r2, #48	@ 0x30
 800bb06:	f100 0301 	add.w	r3, r0, #1
 800bb0a:	d02a      	beq.n	800bb62 <_strtod_l+0x262>
 800bb0c:	4499      	add	r9, r3
 800bb0e:	eb00 0c05 	add.w	ip, r0, r5
 800bb12:	462b      	mov	r3, r5
 800bb14:	210a      	movs	r1, #10
 800bb16:	4563      	cmp	r3, ip
 800bb18:	d10d      	bne.n	800bb36 <_strtod_l+0x236>
 800bb1a:	1c69      	adds	r1, r5, #1
 800bb1c:	4401      	add	r1, r0
 800bb1e:	4428      	add	r0, r5
 800bb20:	2808      	cmp	r0, #8
 800bb22:	dc16      	bgt.n	800bb52 <_strtod_l+0x252>
 800bb24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bb26:	230a      	movs	r3, #10
 800bb28:	fb03 2300 	mla	r3, r3, r0, r2
 800bb2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e018      	b.n	800bb64 <_strtod_l+0x264>
 800bb32:	4638      	mov	r0, r7
 800bb34:	e7da      	b.n	800baec <_strtod_l+0x1ec>
 800bb36:	2b08      	cmp	r3, #8
 800bb38:	f103 0301 	add.w	r3, r3, #1
 800bb3c:	dc03      	bgt.n	800bb46 <_strtod_l+0x246>
 800bb3e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bb40:	434e      	muls	r6, r1
 800bb42:	960a      	str	r6, [sp, #40]	@ 0x28
 800bb44:	e7e7      	b.n	800bb16 <_strtod_l+0x216>
 800bb46:	2b10      	cmp	r3, #16
 800bb48:	bfde      	ittt	le
 800bb4a:	9e08      	ldrle	r6, [sp, #32]
 800bb4c:	434e      	mulle	r6, r1
 800bb4e:	9608      	strle	r6, [sp, #32]
 800bb50:	e7e1      	b.n	800bb16 <_strtod_l+0x216>
 800bb52:	280f      	cmp	r0, #15
 800bb54:	dceb      	bgt.n	800bb2e <_strtod_l+0x22e>
 800bb56:	9808      	ldr	r0, [sp, #32]
 800bb58:	230a      	movs	r3, #10
 800bb5a:	fb03 2300 	mla	r3, r3, r0, r2
 800bb5e:	9308      	str	r3, [sp, #32]
 800bb60:	e7e5      	b.n	800bb2e <_strtod_l+0x22e>
 800bb62:	4629      	mov	r1, r5
 800bb64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb66:	1c50      	adds	r0, r2, #1
 800bb68:	9019      	str	r0, [sp, #100]	@ 0x64
 800bb6a:	7852      	ldrb	r2, [r2, #1]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	460d      	mov	r5, r1
 800bb70:	e7b1      	b.n	800bad6 <_strtod_l+0x1d6>
 800bb72:	f04f 0900 	mov.w	r9, #0
 800bb76:	2301      	movs	r3, #1
 800bb78:	e77d      	b.n	800ba76 <_strtod_l+0x176>
 800bb7a:	f04f 0c00 	mov.w	ip, #0
 800bb7e:	1ca2      	adds	r2, r4, #2
 800bb80:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb82:	78a2      	ldrb	r2, [r4, #2]
 800bb84:	e785      	b.n	800ba92 <_strtod_l+0x192>
 800bb86:	f04f 0c01 	mov.w	ip, #1
 800bb8a:	e7f8      	b.n	800bb7e <_strtod_l+0x27e>
 800bb8c:	08010470 	.word	0x08010470
 800bb90:	08010458 	.word	0x08010458
 800bb94:	7ff00000 	.word	0x7ff00000
 800bb98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bb9a:	1c51      	adds	r1, r2, #1
 800bb9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800bb9e:	7852      	ldrb	r2, [r2, #1]
 800bba0:	2a30      	cmp	r2, #48	@ 0x30
 800bba2:	d0f9      	beq.n	800bb98 <_strtod_l+0x298>
 800bba4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bba8:	2908      	cmp	r1, #8
 800bbaa:	f63f af78 	bhi.w	800ba9e <_strtod_l+0x19e>
 800bbae:	3a30      	subs	r2, #48	@ 0x30
 800bbb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbb2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbb4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bbb6:	f04f 080a 	mov.w	r8, #10
 800bbba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bbbc:	1c56      	adds	r6, r2, #1
 800bbbe:	9619      	str	r6, [sp, #100]	@ 0x64
 800bbc0:	7852      	ldrb	r2, [r2, #1]
 800bbc2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bbc6:	f1be 0f09 	cmp.w	lr, #9
 800bbca:	d939      	bls.n	800bc40 <_strtod_l+0x340>
 800bbcc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bbce:	1a76      	subs	r6, r6, r1
 800bbd0:	2e08      	cmp	r6, #8
 800bbd2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bbd6:	dc03      	bgt.n	800bbe0 <_strtod_l+0x2e0>
 800bbd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bbda:	4588      	cmp	r8, r1
 800bbdc:	bfa8      	it	ge
 800bbde:	4688      	movge	r8, r1
 800bbe0:	f1bc 0f00 	cmp.w	ip, #0
 800bbe4:	d001      	beq.n	800bbea <_strtod_l+0x2ea>
 800bbe6:	f1c8 0800 	rsb	r8, r8, #0
 800bbea:	2d00      	cmp	r5, #0
 800bbec:	d14e      	bne.n	800bc8c <_strtod_l+0x38c>
 800bbee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbf0:	4308      	orrs	r0, r1
 800bbf2:	f47f aebe 	bne.w	800b972 <_strtod_l+0x72>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f47f aed6 	bne.w	800b9a8 <_strtod_l+0xa8>
 800bbfc:	2a69      	cmp	r2, #105	@ 0x69
 800bbfe:	d028      	beq.n	800bc52 <_strtod_l+0x352>
 800bc00:	dc25      	bgt.n	800bc4e <_strtod_l+0x34e>
 800bc02:	2a49      	cmp	r2, #73	@ 0x49
 800bc04:	d025      	beq.n	800bc52 <_strtod_l+0x352>
 800bc06:	2a4e      	cmp	r2, #78	@ 0x4e
 800bc08:	f47f aece 	bne.w	800b9a8 <_strtod_l+0xa8>
 800bc0c:	499b      	ldr	r1, [pc, #620]	@ (800be7c <_strtod_l+0x57c>)
 800bc0e:	a819      	add	r0, sp, #100	@ 0x64
 800bc10:	f001 f9ee 	bl	800cff0 <__match>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f43f aec7 	beq.w	800b9a8 <_strtod_l+0xa8>
 800bc1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2b28      	cmp	r3, #40	@ 0x28
 800bc20:	d12e      	bne.n	800bc80 <_strtod_l+0x380>
 800bc22:	4997      	ldr	r1, [pc, #604]	@ (800be80 <_strtod_l+0x580>)
 800bc24:	aa1c      	add	r2, sp, #112	@ 0x70
 800bc26:	a819      	add	r0, sp, #100	@ 0x64
 800bc28:	f001 f9f6 	bl	800d018 <__hexnan>
 800bc2c:	2805      	cmp	r0, #5
 800bc2e:	d127      	bne.n	800bc80 <_strtod_l+0x380>
 800bc30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc32:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800bc36:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bc3a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bc3e:	e698      	b.n	800b972 <_strtod_l+0x72>
 800bc40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bc42:	fb08 2101 	mla	r1, r8, r1, r2
 800bc46:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800bc4a:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc4c:	e7b5      	b.n	800bbba <_strtod_l+0x2ba>
 800bc4e:	2a6e      	cmp	r2, #110	@ 0x6e
 800bc50:	e7da      	b.n	800bc08 <_strtod_l+0x308>
 800bc52:	498c      	ldr	r1, [pc, #560]	@ (800be84 <_strtod_l+0x584>)
 800bc54:	a819      	add	r0, sp, #100	@ 0x64
 800bc56:	f001 f9cb 	bl	800cff0 <__match>
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	f43f aea4 	beq.w	800b9a8 <_strtod_l+0xa8>
 800bc60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc62:	4989      	ldr	r1, [pc, #548]	@ (800be88 <_strtod_l+0x588>)
 800bc64:	3b01      	subs	r3, #1
 800bc66:	a819      	add	r0, sp, #100	@ 0x64
 800bc68:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc6a:	f001 f9c1 	bl	800cff0 <__match>
 800bc6e:	b910      	cbnz	r0, 800bc76 <_strtod_l+0x376>
 800bc70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc72:	3301      	adds	r3, #1
 800bc74:	9319      	str	r3, [sp, #100]	@ 0x64
 800bc76:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800be98 <_strtod_l+0x598>
 800bc7a:	f04f 0a00 	mov.w	sl, #0
 800bc7e:	e678      	b.n	800b972 <_strtod_l+0x72>
 800bc80:	4882      	ldr	r0, [pc, #520]	@ (800be8c <_strtod_l+0x58c>)
 800bc82:	f000 fef1 	bl	800ca68 <nan>
 800bc86:	ec5b ab10 	vmov	sl, fp, d0
 800bc8a:	e672      	b.n	800b972 <_strtod_l+0x72>
 800bc8c:	eba8 0309 	sub.w	r3, r8, r9
 800bc90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bc92:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc94:	2f00      	cmp	r7, #0
 800bc96:	bf08      	it	eq
 800bc98:	462f      	moveq	r7, r5
 800bc9a:	2d10      	cmp	r5, #16
 800bc9c:	462c      	mov	r4, r5
 800bc9e:	bfa8      	it	ge
 800bca0:	2410      	movge	r4, #16
 800bca2:	f7f4 fc37 	bl	8000514 <__aeabi_ui2d>
 800bca6:	2d09      	cmp	r5, #9
 800bca8:	4682      	mov	sl, r0
 800bcaa:	468b      	mov	fp, r1
 800bcac:	dc13      	bgt.n	800bcd6 <_strtod_l+0x3d6>
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f43f ae5e 	beq.w	800b972 <_strtod_l+0x72>
 800bcb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb8:	dd78      	ble.n	800bdac <_strtod_l+0x4ac>
 800bcba:	2b16      	cmp	r3, #22
 800bcbc:	dc5f      	bgt.n	800bd7e <_strtod_l+0x47e>
 800bcbe:	4974      	ldr	r1, [pc, #464]	@ (800be90 <_strtod_l+0x590>)
 800bcc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc8:	4652      	mov	r2, sl
 800bcca:	465b      	mov	r3, fp
 800bccc:	f7f4 fc9c 	bl	8000608 <__aeabi_dmul>
 800bcd0:	4682      	mov	sl, r0
 800bcd2:	468b      	mov	fp, r1
 800bcd4:	e64d      	b.n	800b972 <_strtod_l+0x72>
 800bcd6:	4b6e      	ldr	r3, [pc, #440]	@ (800be90 <_strtod_l+0x590>)
 800bcd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcdc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bce0:	f7f4 fc92 	bl	8000608 <__aeabi_dmul>
 800bce4:	4682      	mov	sl, r0
 800bce6:	9808      	ldr	r0, [sp, #32]
 800bce8:	468b      	mov	fp, r1
 800bcea:	f7f4 fc13 	bl	8000514 <__aeabi_ui2d>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	f7f4 fad1 	bl	800029c <__adddf3>
 800bcfa:	2d0f      	cmp	r5, #15
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	468b      	mov	fp, r1
 800bd00:	ddd5      	ble.n	800bcae <_strtod_l+0x3ae>
 800bd02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd04:	1b2c      	subs	r4, r5, r4
 800bd06:	441c      	add	r4, r3
 800bd08:	2c00      	cmp	r4, #0
 800bd0a:	f340 8096 	ble.w	800be3a <_strtod_l+0x53a>
 800bd0e:	f014 030f 	ands.w	r3, r4, #15
 800bd12:	d00a      	beq.n	800bd2a <_strtod_l+0x42a>
 800bd14:	495e      	ldr	r1, [pc, #376]	@ (800be90 <_strtod_l+0x590>)
 800bd16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd1a:	4652      	mov	r2, sl
 800bd1c:	465b      	mov	r3, fp
 800bd1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd22:	f7f4 fc71 	bl	8000608 <__aeabi_dmul>
 800bd26:	4682      	mov	sl, r0
 800bd28:	468b      	mov	fp, r1
 800bd2a:	f034 040f 	bics.w	r4, r4, #15
 800bd2e:	d073      	beq.n	800be18 <_strtod_l+0x518>
 800bd30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bd34:	dd48      	ble.n	800bdc8 <_strtod_l+0x4c8>
 800bd36:	2400      	movs	r4, #0
 800bd38:	46a0      	mov	r8, r4
 800bd3a:	940a      	str	r4, [sp, #40]	@ 0x28
 800bd3c:	46a1      	mov	r9, r4
 800bd3e:	9a05      	ldr	r2, [sp, #20]
 800bd40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800be98 <_strtod_l+0x598>
 800bd44:	2322      	movs	r3, #34	@ 0x22
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	f04f 0a00 	mov.w	sl, #0
 800bd4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	f43f ae0f 	beq.w	800b972 <_strtod_l+0x72>
 800bd54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd56:	9805      	ldr	r0, [sp, #20]
 800bd58:	f7ff f942 	bl	800afe0 <_Bfree>
 800bd5c:	9805      	ldr	r0, [sp, #20]
 800bd5e:	4649      	mov	r1, r9
 800bd60:	f7ff f93e 	bl	800afe0 <_Bfree>
 800bd64:	9805      	ldr	r0, [sp, #20]
 800bd66:	4641      	mov	r1, r8
 800bd68:	f7ff f93a 	bl	800afe0 <_Bfree>
 800bd6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd6e:	9805      	ldr	r0, [sp, #20]
 800bd70:	f7ff f936 	bl	800afe0 <_Bfree>
 800bd74:	9805      	ldr	r0, [sp, #20]
 800bd76:	4621      	mov	r1, r4
 800bd78:	f7ff f932 	bl	800afe0 <_Bfree>
 800bd7c:	e5f9      	b.n	800b972 <_strtod_l+0x72>
 800bd7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bd84:	4293      	cmp	r3, r2
 800bd86:	dbbc      	blt.n	800bd02 <_strtod_l+0x402>
 800bd88:	4c41      	ldr	r4, [pc, #260]	@ (800be90 <_strtod_l+0x590>)
 800bd8a:	f1c5 050f 	rsb	r5, r5, #15
 800bd8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd92:	4652      	mov	r2, sl
 800bd94:	465b      	mov	r3, fp
 800bd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9a:	f7f4 fc35 	bl	8000608 <__aeabi_dmul>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda0:	1b5d      	subs	r5, r3, r5
 800bda2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bda6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bdaa:	e78f      	b.n	800bccc <_strtod_l+0x3cc>
 800bdac:	3316      	adds	r3, #22
 800bdae:	dba8      	blt.n	800bd02 <_strtod_l+0x402>
 800bdb0:	4b37      	ldr	r3, [pc, #220]	@ (800be90 <_strtod_l+0x590>)
 800bdb2:	eba9 0808 	sub.w	r8, r9, r8
 800bdb6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bdba:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bdbe:	4650      	mov	r0, sl
 800bdc0:	4659      	mov	r1, fp
 800bdc2:	f7f4 fd4b 	bl	800085c <__aeabi_ddiv>
 800bdc6:	e783      	b.n	800bcd0 <_strtod_l+0x3d0>
 800bdc8:	4b32      	ldr	r3, [pc, #200]	@ (800be94 <_strtod_l+0x594>)
 800bdca:	9308      	str	r3, [sp, #32]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	1124      	asrs	r4, r4, #4
 800bdd0:	4650      	mov	r0, sl
 800bdd2:	4659      	mov	r1, fp
 800bdd4:	461e      	mov	r6, r3
 800bdd6:	2c01      	cmp	r4, #1
 800bdd8:	dc21      	bgt.n	800be1e <_strtod_l+0x51e>
 800bdda:	b10b      	cbz	r3, 800bde0 <_strtod_l+0x4e0>
 800bddc:	4682      	mov	sl, r0
 800bdde:	468b      	mov	fp, r1
 800bde0:	492c      	ldr	r1, [pc, #176]	@ (800be94 <_strtod_l+0x594>)
 800bde2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bde6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bdea:	4652      	mov	r2, sl
 800bdec:	465b      	mov	r3, fp
 800bdee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdf2:	f7f4 fc09 	bl	8000608 <__aeabi_dmul>
 800bdf6:	4b28      	ldr	r3, [pc, #160]	@ (800be98 <_strtod_l+0x598>)
 800bdf8:	460a      	mov	r2, r1
 800bdfa:	400b      	ands	r3, r1
 800bdfc:	4927      	ldr	r1, [pc, #156]	@ (800be9c <_strtod_l+0x59c>)
 800bdfe:	428b      	cmp	r3, r1
 800be00:	4682      	mov	sl, r0
 800be02:	d898      	bhi.n	800bd36 <_strtod_l+0x436>
 800be04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800be08:	428b      	cmp	r3, r1
 800be0a:	bf86      	itte	hi
 800be0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800bea0 <_strtod_l+0x5a0>
 800be10:	f04f 3aff 	movhi.w	sl, #4294967295
 800be14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800be18:	2300      	movs	r3, #0
 800be1a:	9308      	str	r3, [sp, #32]
 800be1c:	e07a      	b.n	800bf14 <_strtod_l+0x614>
 800be1e:	07e2      	lsls	r2, r4, #31
 800be20:	d505      	bpl.n	800be2e <_strtod_l+0x52e>
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 fbee 	bl	8000608 <__aeabi_dmul>
 800be2c:	2301      	movs	r3, #1
 800be2e:	9a08      	ldr	r2, [sp, #32]
 800be30:	3208      	adds	r2, #8
 800be32:	3601      	adds	r6, #1
 800be34:	1064      	asrs	r4, r4, #1
 800be36:	9208      	str	r2, [sp, #32]
 800be38:	e7cd      	b.n	800bdd6 <_strtod_l+0x4d6>
 800be3a:	d0ed      	beq.n	800be18 <_strtod_l+0x518>
 800be3c:	4264      	negs	r4, r4
 800be3e:	f014 020f 	ands.w	r2, r4, #15
 800be42:	d00a      	beq.n	800be5a <_strtod_l+0x55a>
 800be44:	4b12      	ldr	r3, [pc, #72]	@ (800be90 <_strtod_l+0x590>)
 800be46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be4a:	4650      	mov	r0, sl
 800be4c:	4659      	mov	r1, fp
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	f7f4 fd03 	bl	800085c <__aeabi_ddiv>
 800be56:	4682      	mov	sl, r0
 800be58:	468b      	mov	fp, r1
 800be5a:	1124      	asrs	r4, r4, #4
 800be5c:	d0dc      	beq.n	800be18 <_strtod_l+0x518>
 800be5e:	2c1f      	cmp	r4, #31
 800be60:	dd20      	ble.n	800bea4 <_strtod_l+0x5a4>
 800be62:	2400      	movs	r4, #0
 800be64:	46a0      	mov	r8, r4
 800be66:	940a      	str	r4, [sp, #40]	@ 0x28
 800be68:	46a1      	mov	r9, r4
 800be6a:	9a05      	ldr	r2, [sp, #20]
 800be6c:	2322      	movs	r3, #34	@ 0x22
 800be6e:	f04f 0a00 	mov.w	sl, #0
 800be72:	f04f 0b00 	mov.w	fp, #0
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	e768      	b.n	800bd4c <_strtod_l+0x44c>
 800be7a:	bf00      	nop
 800be7c:	08010246 	.word	0x08010246
 800be80:	0801045c 	.word	0x0801045c
 800be84:	0801023e 	.word	0x0801023e
 800be88:	08010275 	.word	0x08010275
 800be8c:	08010504 	.word	0x08010504
 800be90:	08010390 	.word	0x08010390
 800be94:	08010368 	.word	0x08010368
 800be98:	7ff00000 	.word	0x7ff00000
 800be9c:	7ca00000 	.word	0x7ca00000
 800bea0:	7fefffff 	.word	0x7fefffff
 800bea4:	f014 0310 	ands.w	r3, r4, #16
 800bea8:	bf18      	it	ne
 800beaa:	236a      	movne	r3, #106	@ 0x6a
 800beac:	4ea9      	ldr	r6, [pc, #676]	@ (800c154 <_strtod_l+0x854>)
 800beae:	9308      	str	r3, [sp, #32]
 800beb0:	4650      	mov	r0, sl
 800beb2:	4659      	mov	r1, fp
 800beb4:	2300      	movs	r3, #0
 800beb6:	07e2      	lsls	r2, r4, #31
 800beb8:	d504      	bpl.n	800bec4 <_strtod_l+0x5c4>
 800beba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bebe:	f7f4 fba3 	bl	8000608 <__aeabi_dmul>
 800bec2:	2301      	movs	r3, #1
 800bec4:	1064      	asrs	r4, r4, #1
 800bec6:	f106 0608 	add.w	r6, r6, #8
 800beca:	d1f4      	bne.n	800beb6 <_strtod_l+0x5b6>
 800becc:	b10b      	cbz	r3, 800bed2 <_strtod_l+0x5d2>
 800bece:	4682      	mov	sl, r0
 800bed0:	468b      	mov	fp, r1
 800bed2:	9b08      	ldr	r3, [sp, #32]
 800bed4:	b1b3      	cbz	r3, 800bf04 <_strtod_l+0x604>
 800bed6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800beda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bede:	2b00      	cmp	r3, #0
 800bee0:	4659      	mov	r1, fp
 800bee2:	dd0f      	ble.n	800bf04 <_strtod_l+0x604>
 800bee4:	2b1f      	cmp	r3, #31
 800bee6:	dd55      	ble.n	800bf94 <_strtod_l+0x694>
 800bee8:	2b34      	cmp	r3, #52	@ 0x34
 800beea:	bfde      	ittt	le
 800beec:	f04f 33ff 	movle.w	r3, #4294967295
 800bef0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bef4:	4093      	lslle	r3, r2
 800bef6:	f04f 0a00 	mov.w	sl, #0
 800befa:	bfcc      	ite	gt
 800befc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bf00:	ea03 0b01 	andle.w	fp, r3, r1
 800bf04:	2200      	movs	r2, #0
 800bf06:	2300      	movs	r3, #0
 800bf08:	4650      	mov	r0, sl
 800bf0a:	4659      	mov	r1, fp
 800bf0c:	f7f4 fde4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d1a6      	bne.n	800be62 <_strtod_l+0x562>
 800bf14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bf1a:	9805      	ldr	r0, [sp, #20]
 800bf1c:	462b      	mov	r3, r5
 800bf1e:	463a      	mov	r2, r7
 800bf20:	f7ff f8c6 	bl	800b0b0 <__s2b>
 800bf24:	900a      	str	r0, [sp, #40]	@ 0x28
 800bf26:	2800      	cmp	r0, #0
 800bf28:	f43f af05 	beq.w	800bd36 <_strtod_l+0x436>
 800bf2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf2e:	2a00      	cmp	r2, #0
 800bf30:	eba9 0308 	sub.w	r3, r9, r8
 800bf34:	bfa8      	it	ge
 800bf36:	2300      	movge	r3, #0
 800bf38:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf3a:	2400      	movs	r4, #0
 800bf3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bf40:	9316      	str	r3, [sp, #88]	@ 0x58
 800bf42:	46a0      	mov	r8, r4
 800bf44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf46:	9805      	ldr	r0, [sp, #20]
 800bf48:	6859      	ldr	r1, [r3, #4]
 800bf4a:	f7ff f809 	bl	800af60 <_Balloc>
 800bf4e:	4681      	mov	r9, r0
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f43f aef4 	beq.w	800bd3e <_strtod_l+0x43e>
 800bf56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf58:	691a      	ldr	r2, [r3, #16]
 800bf5a:	3202      	adds	r2, #2
 800bf5c:	f103 010c 	add.w	r1, r3, #12
 800bf60:	0092      	lsls	r2, r2, #2
 800bf62:	300c      	adds	r0, #12
 800bf64:	f000 fd72 	bl	800ca4c <memcpy>
 800bf68:	ec4b ab10 	vmov	d0, sl, fp
 800bf6c:	9805      	ldr	r0, [sp, #20]
 800bf6e:	aa1c      	add	r2, sp, #112	@ 0x70
 800bf70:	a91b      	add	r1, sp, #108	@ 0x6c
 800bf72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bf76:	f7ff fbd7 	bl	800b728 <__d2b>
 800bf7a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	f43f aede 	beq.w	800bd3e <_strtod_l+0x43e>
 800bf82:	9805      	ldr	r0, [sp, #20]
 800bf84:	2101      	movs	r1, #1
 800bf86:	f7ff f929 	bl	800b1dc <__i2b>
 800bf8a:	4680      	mov	r8, r0
 800bf8c:	b948      	cbnz	r0, 800bfa2 <_strtod_l+0x6a2>
 800bf8e:	f04f 0800 	mov.w	r8, #0
 800bf92:	e6d4      	b.n	800bd3e <_strtod_l+0x43e>
 800bf94:	f04f 32ff 	mov.w	r2, #4294967295
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	ea03 0a0a 	and.w	sl, r3, sl
 800bfa0:	e7b0      	b.n	800bf04 <_strtod_l+0x604>
 800bfa2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bfa4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bfa6:	2d00      	cmp	r5, #0
 800bfa8:	bfab      	itete	ge
 800bfaa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bfac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bfae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bfb0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bfb2:	bfac      	ite	ge
 800bfb4:	18ef      	addge	r7, r5, r3
 800bfb6:	1b5e      	sublt	r6, r3, r5
 800bfb8:	9b08      	ldr	r3, [sp, #32]
 800bfba:	1aed      	subs	r5, r5, r3
 800bfbc:	4415      	add	r5, r2
 800bfbe:	4b66      	ldr	r3, [pc, #408]	@ (800c158 <_strtod_l+0x858>)
 800bfc0:	3d01      	subs	r5, #1
 800bfc2:	429d      	cmp	r5, r3
 800bfc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bfc8:	da50      	bge.n	800c06c <_strtod_l+0x76c>
 800bfca:	1b5b      	subs	r3, r3, r5
 800bfcc:	2b1f      	cmp	r3, #31
 800bfce:	eba2 0203 	sub.w	r2, r2, r3
 800bfd2:	f04f 0101 	mov.w	r1, #1
 800bfd6:	dc3d      	bgt.n	800c054 <_strtod_l+0x754>
 800bfd8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bfde:	2300      	movs	r3, #0
 800bfe0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bfe2:	18bd      	adds	r5, r7, r2
 800bfe4:	9b08      	ldr	r3, [sp, #32]
 800bfe6:	42af      	cmp	r7, r5
 800bfe8:	4416      	add	r6, r2
 800bfea:	441e      	add	r6, r3
 800bfec:	463b      	mov	r3, r7
 800bfee:	bfa8      	it	ge
 800bff0:	462b      	movge	r3, r5
 800bff2:	42b3      	cmp	r3, r6
 800bff4:	bfa8      	it	ge
 800bff6:	4633      	movge	r3, r6
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bfc2      	ittt	gt
 800bffc:	1aed      	subgt	r5, r5, r3
 800bffe:	1af6      	subgt	r6, r6, r3
 800c000:	1aff      	subgt	r7, r7, r3
 800c002:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c004:	2b00      	cmp	r3, #0
 800c006:	dd16      	ble.n	800c036 <_strtod_l+0x736>
 800c008:	4641      	mov	r1, r8
 800c00a:	9805      	ldr	r0, [sp, #20]
 800c00c:	461a      	mov	r2, r3
 800c00e:	f7ff f9a5 	bl	800b35c <__pow5mult>
 800c012:	4680      	mov	r8, r0
 800c014:	2800      	cmp	r0, #0
 800c016:	d0ba      	beq.n	800bf8e <_strtod_l+0x68e>
 800c018:	4601      	mov	r1, r0
 800c01a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c01c:	9805      	ldr	r0, [sp, #20]
 800c01e:	f7ff f8f3 	bl	800b208 <__multiply>
 800c022:	900e      	str	r0, [sp, #56]	@ 0x38
 800c024:	2800      	cmp	r0, #0
 800c026:	f43f ae8a 	beq.w	800bd3e <_strtod_l+0x43e>
 800c02a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c02c:	9805      	ldr	r0, [sp, #20]
 800c02e:	f7fe ffd7 	bl	800afe0 <_Bfree>
 800c032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c034:	931a      	str	r3, [sp, #104]	@ 0x68
 800c036:	2d00      	cmp	r5, #0
 800c038:	dc1d      	bgt.n	800c076 <_strtod_l+0x776>
 800c03a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	dd23      	ble.n	800c088 <_strtod_l+0x788>
 800c040:	4649      	mov	r1, r9
 800c042:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c044:	9805      	ldr	r0, [sp, #20]
 800c046:	f7ff f989 	bl	800b35c <__pow5mult>
 800c04a:	4681      	mov	r9, r0
 800c04c:	b9e0      	cbnz	r0, 800c088 <_strtod_l+0x788>
 800c04e:	f04f 0900 	mov.w	r9, #0
 800c052:	e674      	b.n	800bd3e <_strtod_l+0x43e>
 800c054:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c058:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c05c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c060:	35e2      	adds	r5, #226	@ 0xe2
 800c062:	fa01 f305 	lsl.w	r3, r1, r5
 800c066:	9310      	str	r3, [sp, #64]	@ 0x40
 800c068:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c06a:	e7ba      	b.n	800bfe2 <_strtod_l+0x6e2>
 800c06c:	2300      	movs	r3, #0
 800c06e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c070:	2301      	movs	r3, #1
 800c072:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c074:	e7b5      	b.n	800bfe2 <_strtod_l+0x6e2>
 800c076:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c078:	9805      	ldr	r0, [sp, #20]
 800c07a:	462a      	mov	r2, r5
 800c07c:	f7ff f9c8 	bl	800b410 <__lshift>
 800c080:	901a      	str	r0, [sp, #104]	@ 0x68
 800c082:	2800      	cmp	r0, #0
 800c084:	d1d9      	bne.n	800c03a <_strtod_l+0x73a>
 800c086:	e65a      	b.n	800bd3e <_strtod_l+0x43e>
 800c088:	2e00      	cmp	r6, #0
 800c08a:	dd07      	ble.n	800c09c <_strtod_l+0x79c>
 800c08c:	4649      	mov	r1, r9
 800c08e:	9805      	ldr	r0, [sp, #20]
 800c090:	4632      	mov	r2, r6
 800c092:	f7ff f9bd 	bl	800b410 <__lshift>
 800c096:	4681      	mov	r9, r0
 800c098:	2800      	cmp	r0, #0
 800c09a:	d0d8      	beq.n	800c04e <_strtod_l+0x74e>
 800c09c:	2f00      	cmp	r7, #0
 800c09e:	dd08      	ble.n	800c0b2 <_strtod_l+0x7b2>
 800c0a0:	4641      	mov	r1, r8
 800c0a2:	9805      	ldr	r0, [sp, #20]
 800c0a4:	463a      	mov	r2, r7
 800c0a6:	f7ff f9b3 	bl	800b410 <__lshift>
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	f43f ae46 	beq.w	800bd3e <_strtod_l+0x43e>
 800c0b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0b4:	9805      	ldr	r0, [sp, #20]
 800c0b6:	464a      	mov	r2, r9
 800c0b8:	f7ff fa32 	bl	800b520 <__mdiff>
 800c0bc:	4604      	mov	r4, r0
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f ae3d 	beq.w	800bd3e <_strtod_l+0x43e>
 800c0c4:	68c3      	ldr	r3, [r0, #12]
 800c0c6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	60c3      	str	r3, [r0, #12]
 800c0cc:	4641      	mov	r1, r8
 800c0ce:	f7ff fa0b 	bl	800b4e8 <__mcmp>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	da46      	bge.n	800c164 <_strtod_l+0x864>
 800c0d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0d8:	ea53 030a 	orrs.w	r3, r3, sl
 800c0dc:	d16c      	bne.n	800c1b8 <_strtod_l+0x8b8>
 800c0de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d168      	bne.n	800c1b8 <_strtod_l+0x8b8>
 800c0e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0ea:	0d1b      	lsrs	r3, r3, #20
 800c0ec:	051b      	lsls	r3, r3, #20
 800c0ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c0f2:	d961      	bls.n	800c1b8 <_strtod_l+0x8b8>
 800c0f4:	6963      	ldr	r3, [r4, #20]
 800c0f6:	b913      	cbnz	r3, 800c0fe <_strtod_l+0x7fe>
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	dd5c      	ble.n	800c1b8 <_strtod_l+0x8b8>
 800c0fe:	4621      	mov	r1, r4
 800c100:	2201      	movs	r2, #1
 800c102:	9805      	ldr	r0, [sp, #20]
 800c104:	f7ff f984 	bl	800b410 <__lshift>
 800c108:	4641      	mov	r1, r8
 800c10a:	4604      	mov	r4, r0
 800c10c:	f7ff f9ec 	bl	800b4e8 <__mcmp>
 800c110:	2800      	cmp	r0, #0
 800c112:	dd51      	ble.n	800c1b8 <_strtod_l+0x8b8>
 800c114:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c118:	9a08      	ldr	r2, [sp, #32]
 800c11a:	0d1b      	lsrs	r3, r3, #20
 800c11c:	051b      	lsls	r3, r3, #20
 800c11e:	2a00      	cmp	r2, #0
 800c120:	d06b      	beq.n	800c1fa <_strtod_l+0x8fa>
 800c122:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c126:	d868      	bhi.n	800c1fa <_strtod_l+0x8fa>
 800c128:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c12c:	f67f ae9d 	bls.w	800be6a <_strtod_l+0x56a>
 800c130:	4b0a      	ldr	r3, [pc, #40]	@ (800c15c <_strtod_l+0x85c>)
 800c132:	4650      	mov	r0, sl
 800c134:	4659      	mov	r1, fp
 800c136:	2200      	movs	r2, #0
 800c138:	f7f4 fa66 	bl	8000608 <__aeabi_dmul>
 800c13c:	4b08      	ldr	r3, [pc, #32]	@ (800c160 <_strtod_l+0x860>)
 800c13e:	400b      	ands	r3, r1
 800c140:	4682      	mov	sl, r0
 800c142:	468b      	mov	fp, r1
 800c144:	2b00      	cmp	r3, #0
 800c146:	f47f ae05 	bne.w	800bd54 <_strtod_l+0x454>
 800c14a:	9a05      	ldr	r2, [sp, #20]
 800c14c:	2322      	movs	r3, #34	@ 0x22
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	e600      	b.n	800bd54 <_strtod_l+0x454>
 800c152:	bf00      	nop
 800c154:	08010488 	.word	0x08010488
 800c158:	fffffc02 	.word	0xfffffc02
 800c15c:	39500000 	.word	0x39500000
 800c160:	7ff00000 	.word	0x7ff00000
 800c164:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c168:	d165      	bne.n	800c236 <_strtod_l+0x936>
 800c16a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c170:	b35a      	cbz	r2, 800c1ca <_strtod_l+0x8ca>
 800c172:	4a9f      	ldr	r2, [pc, #636]	@ (800c3f0 <_strtod_l+0xaf0>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d12b      	bne.n	800c1d0 <_strtod_l+0x8d0>
 800c178:	9b08      	ldr	r3, [sp, #32]
 800c17a:	4651      	mov	r1, sl
 800c17c:	b303      	cbz	r3, 800c1c0 <_strtod_l+0x8c0>
 800c17e:	4b9d      	ldr	r3, [pc, #628]	@ (800c3f4 <_strtod_l+0xaf4>)
 800c180:	465a      	mov	r2, fp
 800c182:	4013      	ands	r3, r2
 800c184:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c188:	f04f 32ff 	mov.w	r2, #4294967295
 800c18c:	d81b      	bhi.n	800c1c6 <_strtod_l+0x8c6>
 800c18e:	0d1b      	lsrs	r3, r3, #20
 800c190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c194:	fa02 f303 	lsl.w	r3, r2, r3
 800c198:	4299      	cmp	r1, r3
 800c19a:	d119      	bne.n	800c1d0 <_strtod_l+0x8d0>
 800c19c:	4b96      	ldr	r3, [pc, #600]	@ (800c3f8 <_strtod_l+0xaf8>)
 800c19e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d102      	bne.n	800c1aa <_strtod_l+0x8aa>
 800c1a4:	3101      	adds	r1, #1
 800c1a6:	f43f adca 	beq.w	800bd3e <_strtod_l+0x43e>
 800c1aa:	4b92      	ldr	r3, [pc, #584]	@ (800c3f4 <_strtod_l+0xaf4>)
 800c1ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1ae:	401a      	ands	r2, r3
 800c1b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c1b4:	f04f 0a00 	mov.w	sl, #0
 800c1b8:	9b08      	ldr	r3, [sp, #32]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1b8      	bne.n	800c130 <_strtod_l+0x830>
 800c1be:	e5c9      	b.n	800bd54 <_strtod_l+0x454>
 800c1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1c4:	e7e8      	b.n	800c198 <_strtod_l+0x898>
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	e7e6      	b.n	800c198 <_strtod_l+0x898>
 800c1ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c1ce:	d0a1      	beq.n	800c114 <_strtod_l+0x814>
 800c1d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c1d2:	b1db      	cbz	r3, 800c20c <_strtod_l+0x90c>
 800c1d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1d6:	4213      	tst	r3, r2
 800c1d8:	d0ee      	beq.n	800c1b8 <_strtod_l+0x8b8>
 800c1da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1dc:	9a08      	ldr	r2, [sp, #32]
 800c1de:	4650      	mov	r0, sl
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	b1bb      	cbz	r3, 800c214 <_strtod_l+0x914>
 800c1e4:	f7ff fb6e 	bl	800b8c4 <sulp>
 800c1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1ec:	ec53 2b10 	vmov	r2, r3, d0
 800c1f0:	f7f4 f854 	bl	800029c <__adddf3>
 800c1f4:	4682      	mov	sl, r0
 800c1f6:	468b      	mov	fp, r1
 800c1f8:	e7de      	b.n	800c1b8 <_strtod_l+0x8b8>
 800c1fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c1fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c202:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c206:	f04f 3aff 	mov.w	sl, #4294967295
 800c20a:	e7d5      	b.n	800c1b8 <_strtod_l+0x8b8>
 800c20c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c20e:	ea13 0f0a 	tst.w	r3, sl
 800c212:	e7e1      	b.n	800c1d8 <_strtod_l+0x8d8>
 800c214:	f7ff fb56 	bl	800b8c4 <sulp>
 800c218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c21c:	ec53 2b10 	vmov	r2, r3, d0
 800c220:	f7f4 f83a 	bl	8000298 <__aeabi_dsub>
 800c224:	2200      	movs	r2, #0
 800c226:	2300      	movs	r3, #0
 800c228:	4682      	mov	sl, r0
 800c22a:	468b      	mov	fp, r1
 800c22c:	f7f4 fc54 	bl	8000ad8 <__aeabi_dcmpeq>
 800c230:	2800      	cmp	r0, #0
 800c232:	d0c1      	beq.n	800c1b8 <_strtod_l+0x8b8>
 800c234:	e619      	b.n	800be6a <_strtod_l+0x56a>
 800c236:	4641      	mov	r1, r8
 800c238:	4620      	mov	r0, r4
 800c23a:	f7ff facd 	bl	800b7d8 <__ratio>
 800c23e:	ec57 6b10 	vmov	r6, r7, d0
 800c242:	2200      	movs	r2, #0
 800c244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 fc58 	bl	8000b00 <__aeabi_dcmple>
 800c250:	2800      	cmp	r0, #0
 800c252:	d06f      	beq.n	800c334 <_strtod_l+0xa34>
 800c254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c256:	2b00      	cmp	r3, #0
 800c258:	d17a      	bne.n	800c350 <_strtod_l+0xa50>
 800c25a:	f1ba 0f00 	cmp.w	sl, #0
 800c25e:	d158      	bne.n	800c312 <_strtod_l+0xa12>
 800c260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c266:	2b00      	cmp	r3, #0
 800c268:	d15a      	bne.n	800c320 <_strtod_l+0xa20>
 800c26a:	4b64      	ldr	r3, [pc, #400]	@ (800c3fc <_strtod_l+0xafc>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	f7f4 fc3b 	bl	8000aec <__aeabi_dcmplt>
 800c276:	2800      	cmp	r0, #0
 800c278:	d159      	bne.n	800c32e <_strtod_l+0xa2e>
 800c27a:	4630      	mov	r0, r6
 800c27c:	4639      	mov	r1, r7
 800c27e:	4b60      	ldr	r3, [pc, #384]	@ (800c400 <_strtod_l+0xb00>)
 800c280:	2200      	movs	r2, #0
 800c282:	f7f4 f9c1 	bl	8000608 <__aeabi_dmul>
 800c286:	4606      	mov	r6, r0
 800c288:	460f      	mov	r7, r1
 800c28a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c28e:	9606      	str	r6, [sp, #24]
 800c290:	9307      	str	r3, [sp, #28]
 800c292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c296:	4d57      	ldr	r5, [pc, #348]	@ (800c3f4 <_strtod_l+0xaf4>)
 800c298:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c29c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c29e:	401d      	ands	r5, r3
 800c2a0:	4b58      	ldr	r3, [pc, #352]	@ (800c404 <_strtod_l+0xb04>)
 800c2a2:	429d      	cmp	r5, r3
 800c2a4:	f040 80b2 	bne.w	800c40c <_strtod_l+0xb0c>
 800c2a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c2ae:	ec4b ab10 	vmov	d0, sl, fp
 800c2b2:	f7ff f9c9 	bl	800b648 <__ulp>
 800c2b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ba:	ec51 0b10 	vmov	r0, r1, d0
 800c2be:	f7f4 f9a3 	bl	8000608 <__aeabi_dmul>
 800c2c2:	4652      	mov	r2, sl
 800c2c4:	465b      	mov	r3, fp
 800c2c6:	f7f3 ffe9 	bl	800029c <__adddf3>
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	4949      	ldr	r1, [pc, #292]	@ (800c3f4 <_strtod_l+0xaf4>)
 800c2ce:	4a4e      	ldr	r2, [pc, #312]	@ (800c408 <_strtod_l+0xb08>)
 800c2d0:	4019      	ands	r1, r3
 800c2d2:	4291      	cmp	r1, r2
 800c2d4:	4682      	mov	sl, r0
 800c2d6:	d942      	bls.n	800c35e <_strtod_l+0xa5e>
 800c2d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c2da:	4b47      	ldr	r3, [pc, #284]	@ (800c3f8 <_strtod_l+0xaf8>)
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d103      	bne.n	800c2e8 <_strtod_l+0x9e8>
 800c2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	f43f ad2b 	beq.w	800bd3e <_strtod_l+0x43e>
 800c2e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c3f8 <_strtod_l+0xaf8>
 800c2ec:	f04f 3aff 	mov.w	sl, #4294967295
 800c2f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2f2:	9805      	ldr	r0, [sp, #20]
 800c2f4:	f7fe fe74 	bl	800afe0 <_Bfree>
 800c2f8:	9805      	ldr	r0, [sp, #20]
 800c2fa:	4649      	mov	r1, r9
 800c2fc:	f7fe fe70 	bl	800afe0 <_Bfree>
 800c300:	9805      	ldr	r0, [sp, #20]
 800c302:	4641      	mov	r1, r8
 800c304:	f7fe fe6c 	bl	800afe0 <_Bfree>
 800c308:	9805      	ldr	r0, [sp, #20]
 800c30a:	4621      	mov	r1, r4
 800c30c:	f7fe fe68 	bl	800afe0 <_Bfree>
 800c310:	e618      	b.n	800bf44 <_strtod_l+0x644>
 800c312:	f1ba 0f01 	cmp.w	sl, #1
 800c316:	d103      	bne.n	800c320 <_strtod_l+0xa20>
 800c318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f43f ada5 	beq.w	800be6a <_strtod_l+0x56a>
 800c320:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c3d0 <_strtod_l+0xad0>
 800c324:	4f35      	ldr	r7, [pc, #212]	@ (800c3fc <_strtod_l+0xafc>)
 800c326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c32a:	2600      	movs	r6, #0
 800c32c:	e7b1      	b.n	800c292 <_strtod_l+0x992>
 800c32e:	4f34      	ldr	r7, [pc, #208]	@ (800c400 <_strtod_l+0xb00>)
 800c330:	2600      	movs	r6, #0
 800c332:	e7aa      	b.n	800c28a <_strtod_l+0x98a>
 800c334:	4b32      	ldr	r3, [pc, #200]	@ (800c400 <_strtod_l+0xb00>)
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	2200      	movs	r2, #0
 800c33c:	f7f4 f964 	bl	8000608 <__aeabi_dmul>
 800c340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c342:	4606      	mov	r6, r0
 800c344:	460f      	mov	r7, r1
 800c346:	2b00      	cmp	r3, #0
 800c348:	d09f      	beq.n	800c28a <_strtod_l+0x98a>
 800c34a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c34e:	e7a0      	b.n	800c292 <_strtod_l+0x992>
 800c350:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c3d8 <_strtod_l+0xad8>
 800c354:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c358:	ec57 6b17 	vmov	r6, r7, d7
 800c35c:	e799      	b.n	800c292 <_strtod_l+0x992>
 800c35e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c362:	9b08      	ldr	r3, [sp, #32]
 800c364:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1c1      	bne.n	800c2f0 <_strtod_l+0x9f0>
 800c36c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c370:	0d1b      	lsrs	r3, r3, #20
 800c372:	051b      	lsls	r3, r3, #20
 800c374:	429d      	cmp	r5, r3
 800c376:	d1bb      	bne.n	800c2f0 <_strtod_l+0x9f0>
 800c378:	4630      	mov	r0, r6
 800c37a:	4639      	mov	r1, r7
 800c37c:	f7f4 fca4 	bl	8000cc8 <__aeabi_d2lz>
 800c380:	f7f4 f914 	bl	80005ac <__aeabi_l2d>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f3 ff84 	bl	8000298 <__aeabi_dsub>
 800c390:	460b      	mov	r3, r1
 800c392:	4602      	mov	r2, r0
 800c394:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c398:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c39e:	ea46 060a 	orr.w	r6, r6, sl
 800c3a2:	431e      	orrs	r6, r3
 800c3a4:	d06f      	beq.n	800c486 <_strtod_l+0xb86>
 800c3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800c3e0 <_strtod_l+0xae0>)
 800c3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ac:	f7f4 fb9e 	bl	8000aec <__aeabi_dcmplt>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	f47f accf 	bne.w	800bd54 <_strtod_l+0x454>
 800c3b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c3e8 <_strtod_l+0xae8>)
 800c3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3c0:	f7f4 fbb2 	bl	8000b28 <__aeabi_dcmpgt>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d093      	beq.n	800c2f0 <_strtod_l+0x9f0>
 800c3c8:	e4c4      	b.n	800bd54 <_strtod_l+0x454>
 800c3ca:	bf00      	nop
 800c3cc:	f3af 8000 	nop.w
 800c3d0:	00000000 	.word	0x00000000
 800c3d4:	bff00000 	.word	0xbff00000
 800c3d8:	00000000 	.word	0x00000000
 800c3dc:	3ff00000 	.word	0x3ff00000
 800c3e0:	94a03595 	.word	0x94a03595
 800c3e4:	3fdfffff 	.word	0x3fdfffff
 800c3e8:	35afe535 	.word	0x35afe535
 800c3ec:	3fe00000 	.word	0x3fe00000
 800c3f0:	000fffff 	.word	0x000fffff
 800c3f4:	7ff00000 	.word	0x7ff00000
 800c3f8:	7fefffff 	.word	0x7fefffff
 800c3fc:	3ff00000 	.word	0x3ff00000
 800c400:	3fe00000 	.word	0x3fe00000
 800c404:	7fe00000 	.word	0x7fe00000
 800c408:	7c9fffff 	.word	0x7c9fffff
 800c40c:	9b08      	ldr	r3, [sp, #32]
 800c40e:	b323      	cbz	r3, 800c45a <_strtod_l+0xb5a>
 800c410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c414:	d821      	bhi.n	800c45a <_strtod_l+0xb5a>
 800c416:	a328      	add	r3, pc, #160	@ (adr r3, 800c4b8 <_strtod_l+0xbb8>)
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f4 fb6e 	bl	8000b00 <__aeabi_dcmple>
 800c424:	b1a0      	cbz	r0, 800c450 <_strtod_l+0xb50>
 800c426:	4639      	mov	r1, r7
 800c428:	4630      	mov	r0, r6
 800c42a:	f7f4 fbc5 	bl	8000bb8 <__aeabi_d2uiz>
 800c42e:	2801      	cmp	r0, #1
 800c430:	bf38      	it	cc
 800c432:	2001      	movcc	r0, #1
 800c434:	f7f4 f86e 	bl	8000514 <__aeabi_ui2d>
 800c438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	b9fb      	cbnz	r3, 800c480 <_strtod_l+0xb80>
 800c440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c444:	9014      	str	r0, [sp, #80]	@ 0x50
 800c446:	9315      	str	r3, [sp, #84]	@ 0x54
 800c448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c44c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c456:	1b5b      	subs	r3, r3, r5
 800c458:	9311      	str	r3, [sp, #68]	@ 0x44
 800c45a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c45e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c462:	f7ff f8f1 	bl	800b648 <__ulp>
 800c466:	4650      	mov	r0, sl
 800c468:	ec53 2b10 	vmov	r2, r3, d0
 800c46c:	4659      	mov	r1, fp
 800c46e:	f7f4 f8cb 	bl	8000608 <__aeabi_dmul>
 800c472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c476:	f7f3 ff11 	bl	800029c <__adddf3>
 800c47a:	4682      	mov	sl, r0
 800c47c:	468b      	mov	fp, r1
 800c47e:	e770      	b.n	800c362 <_strtod_l+0xa62>
 800c480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c484:	e7e0      	b.n	800c448 <_strtod_l+0xb48>
 800c486:	a30e      	add	r3, pc, #56	@ (adr r3, 800c4c0 <_strtod_l+0xbc0>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	f7f4 fb2e 	bl	8000aec <__aeabi_dcmplt>
 800c490:	e798      	b.n	800c3c4 <_strtod_l+0xac4>
 800c492:	2300      	movs	r3, #0
 800c494:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c496:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	f7ff ba6d 	b.w	800b97a <_strtod_l+0x7a>
 800c4a0:	2a65      	cmp	r2, #101	@ 0x65
 800c4a2:	f43f ab66 	beq.w	800bb72 <_strtod_l+0x272>
 800c4a6:	2a45      	cmp	r2, #69	@ 0x45
 800c4a8:	f43f ab63 	beq.w	800bb72 <_strtod_l+0x272>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	f7ff bb9e 	b.w	800bbee <_strtod_l+0x2ee>
 800c4b2:	bf00      	nop
 800c4b4:	f3af 8000 	nop.w
 800c4b8:	ffc00000 	.word	0xffc00000
 800c4bc:	41dfffff 	.word	0x41dfffff
 800c4c0:	94a03595 	.word	0x94a03595
 800c4c4:	3fcfffff 	.word	0x3fcfffff

0800c4c8 <_strtod_r>:
 800c4c8:	4b01      	ldr	r3, [pc, #4]	@ (800c4d0 <_strtod_r+0x8>)
 800c4ca:	f7ff ba19 	b.w	800b900 <_strtod_l>
 800c4ce:	bf00      	nop
 800c4d0:	20000094 	.word	0x20000094

0800c4d4 <_strtol_l.constprop.0>:
 800c4d4:	2b24      	cmp	r3, #36	@ 0x24
 800c4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4da:	4686      	mov	lr, r0
 800c4dc:	4690      	mov	r8, r2
 800c4de:	d801      	bhi.n	800c4e4 <_strtol_l.constprop.0+0x10>
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d106      	bne.n	800c4f2 <_strtol_l.constprop.0+0x1e>
 800c4e4:	f7fd fdba 	bl	800a05c <__errno>
 800c4e8:	2316      	movs	r3, #22
 800c4ea:	6003      	str	r3, [r0, #0]
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f2:	4834      	ldr	r0, [pc, #208]	@ (800c5c4 <_strtol_l.constprop.0+0xf0>)
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	462a      	mov	r2, r5
 800c4f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4fc:	5d06      	ldrb	r6, [r0, r4]
 800c4fe:	f016 0608 	ands.w	r6, r6, #8
 800c502:	d1f8      	bne.n	800c4f6 <_strtol_l.constprop.0+0x22>
 800c504:	2c2d      	cmp	r4, #45	@ 0x2d
 800c506:	d12d      	bne.n	800c564 <_strtol_l.constprop.0+0x90>
 800c508:	782c      	ldrb	r4, [r5, #0]
 800c50a:	2601      	movs	r6, #1
 800c50c:	1c95      	adds	r5, r2, #2
 800c50e:	f033 0210 	bics.w	r2, r3, #16
 800c512:	d109      	bne.n	800c528 <_strtol_l.constprop.0+0x54>
 800c514:	2c30      	cmp	r4, #48	@ 0x30
 800c516:	d12a      	bne.n	800c56e <_strtol_l.constprop.0+0x9a>
 800c518:	782a      	ldrb	r2, [r5, #0]
 800c51a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c51e:	2a58      	cmp	r2, #88	@ 0x58
 800c520:	d125      	bne.n	800c56e <_strtol_l.constprop.0+0x9a>
 800c522:	786c      	ldrb	r4, [r5, #1]
 800c524:	2310      	movs	r3, #16
 800c526:	3502      	adds	r5, #2
 800c528:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c52c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c530:	2200      	movs	r2, #0
 800c532:	fbbc f9f3 	udiv	r9, ip, r3
 800c536:	4610      	mov	r0, r2
 800c538:	fb03 ca19 	mls	sl, r3, r9, ip
 800c53c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c540:	2f09      	cmp	r7, #9
 800c542:	d81b      	bhi.n	800c57c <_strtol_l.constprop.0+0xa8>
 800c544:	463c      	mov	r4, r7
 800c546:	42a3      	cmp	r3, r4
 800c548:	dd27      	ble.n	800c59a <_strtol_l.constprop.0+0xc6>
 800c54a:	1c57      	adds	r7, r2, #1
 800c54c:	d007      	beq.n	800c55e <_strtol_l.constprop.0+0x8a>
 800c54e:	4581      	cmp	r9, r0
 800c550:	d320      	bcc.n	800c594 <_strtol_l.constprop.0+0xc0>
 800c552:	d101      	bne.n	800c558 <_strtol_l.constprop.0+0x84>
 800c554:	45a2      	cmp	sl, r4
 800c556:	db1d      	blt.n	800c594 <_strtol_l.constprop.0+0xc0>
 800c558:	fb00 4003 	mla	r0, r0, r3, r4
 800c55c:	2201      	movs	r2, #1
 800c55e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c562:	e7eb      	b.n	800c53c <_strtol_l.constprop.0+0x68>
 800c564:	2c2b      	cmp	r4, #43	@ 0x2b
 800c566:	bf04      	itt	eq
 800c568:	782c      	ldrbeq	r4, [r5, #0]
 800c56a:	1c95      	addeq	r5, r2, #2
 800c56c:	e7cf      	b.n	800c50e <_strtol_l.constprop.0+0x3a>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1da      	bne.n	800c528 <_strtol_l.constprop.0+0x54>
 800c572:	2c30      	cmp	r4, #48	@ 0x30
 800c574:	bf0c      	ite	eq
 800c576:	2308      	moveq	r3, #8
 800c578:	230a      	movne	r3, #10
 800c57a:	e7d5      	b.n	800c528 <_strtol_l.constprop.0+0x54>
 800c57c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c580:	2f19      	cmp	r7, #25
 800c582:	d801      	bhi.n	800c588 <_strtol_l.constprop.0+0xb4>
 800c584:	3c37      	subs	r4, #55	@ 0x37
 800c586:	e7de      	b.n	800c546 <_strtol_l.constprop.0+0x72>
 800c588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c58c:	2f19      	cmp	r7, #25
 800c58e:	d804      	bhi.n	800c59a <_strtol_l.constprop.0+0xc6>
 800c590:	3c57      	subs	r4, #87	@ 0x57
 800c592:	e7d8      	b.n	800c546 <_strtol_l.constprop.0+0x72>
 800c594:	f04f 32ff 	mov.w	r2, #4294967295
 800c598:	e7e1      	b.n	800c55e <_strtol_l.constprop.0+0x8a>
 800c59a:	1c53      	adds	r3, r2, #1
 800c59c:	d108      	bne.n	800c5b0 <_strtol_l.constprop.0+0xdc>
 800c59e:	2322      	movs	r3, #34	@ 0x22
 800c5a0:	f8ce 3000 	str.w	r3, [lr]
 800c5a4:	4660      	mov	r0, ip
 800c5a6:	f1b8 0f00 	cmp.w	r8, #0
 800c5aa:	d0a0      	beq.n	800c4ee <_strtol_l.constprop.0+0x1a>
 800c5ac:	1e69      	subs	r1, r5, #1
 800c5ae:	e006      	b.n	800c5be <_strtol_l.constprop.0+0xea>
 800c5b0:	b106      	cbz	r6, 800c5b4 <_strtol_l.constprop.0+0xe0>
 800c5b2:	4240      	negs	r0, r0
 800c5b4:	f1b8 0f00 	cmp.w	r8, #0
 800c5b8:	d099      	beq.n	800c4ee <_strtol_l.constprop.0+0x1a>
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	d1f6      	bne.n	800c5ac <_strtol_l.constprop.0+0xd8>
 800c5be:	f8c8 1000 	str.w	r1, [r8]
 800c5c2:	e794      	b.n	800c4ee <_strtol_l.constprop.0+0x1a>
 800c5c4:	08010139 	.word	0x08010139

0800c5c8 <_strtol_r>:
 800c5c8:	f7ff bf84 	b.w	800c4d4 <_strtol_l.constprop.0>

0800c5cc <__ssputs_r>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	688e      	ldr	r6, [r1, #8]
 800c5d2:	461f      	mov	r7, r3
 800c5d4:	42be      	cmp	r6, r7
 800c5d6:	680b      	ldr	r3, [r1, #0]
 800c5d8:	4682      	mov	sl, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	4690      	mov	r8, r2
 800c5de:	d82d      	bhi.n	800c63c <__ssputs_r+0x70>
 800c5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c5e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c5e8:	d026      	beq.n	800c638 <__ssputs_r+0x6c>
 800c5ea:	6965      	ldr	r5, [r4, #20]
 800c5ec:	6909      	ldr	r1, [r1, #16]
 800c5ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5f2:	eba3 0901 	sub.w	r9, r3, r1
 800c5f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5fa:	1c7b      	adds	r3, r7, #1
 800c5fc:	444b      	add	r3, r9
 800c5fe:	106d      	asrs	r5, r5, #1
 800c600:	429d      	cmp	r5, r3
 800c602:	bf38      	it	cc
 800c604:	461d      	movcc	r5, r3
 800c606:	0553      	lsls	r3, r2, #21
 800c608:	d527      	bpl.n	800c65a <__ssputs_r+0x8e>
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7fe fc1c 	bl	800ae48 <_malloc_r>
 800c610:	4606      	mov	r6, r0
 800c612:	b360      	cbz	r0, 800c66e <__ssputs_r+0xa2>
 800c614:	6921      	ldr	r1, [r4, #16]
 800c616:	464a      	mov	r2, r9
 800c618:	f000 fa18 	bl	800ca4c <memcpy>
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c626:	81a3      	strh	r3, [r4, #12]
 800c628:	6126      	str	r6, [r4, #16]
 800c62a:	6165      	str	r5, [r4, #20]
 800c62c:	444e      	add	r6, r9
 800c62e:	eba5 0509 	sub.w	r5, r5, r9
 800c632:	6026      	str	r6, [r4, #0]
 800c634:	60a5      	str	r5, [r4, #8]
 800c636:	463e      	mov	r6, r7
 800c638:	42be      	cmp	r6, r7
 800c63a:	d900      	bls.n	800c63e <__ssputs_r+0x72>
 800c63c:	463e      	mov	r6, r7
 800c63e:	6820      	ldr	r0, [r4, #0]
 800c640:	4632      	mov	r2, r6
 800c642:	4641      	mov	r1, r8
 800c644:	f000 f9c6 	bl	800c9d4 <memmove>
 800c648:	68a3      	ldr	r3, [r4, #8]
 800c64a:	1b9b      	subs	r3, r3, r6
 800c64c:	60a3      	str	r3, [r4, #8]
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	4433      	add	r3, r6
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	2000      	movs	r0, #0
 800c656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c65a:	462a      	mov	r2, r5
 800c65c:	f000 fd89 	bl	800d172 <_realloc_r>
 800c660:	4606      	mov	r6, r0
 800c662:	2800      	cmp	r0, #0
 800c664:	d1e0      	bne.n	800c628 <__ssputs_r+0x5c>
 800c666:	6921      	ldr	r1, [r4, #16]
 800c668:	4650      	mov	r0, sl
 800c66a:	f7fe fb79 	bl	800ad60 <_free_r>
 800c66e:	230c      	movs	r3, #12
 800c670:	f8ca 3000 	str.w	r3, [sl]
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c67a:	81a3      	strh	r3, [r4, #12]
 800c67c:	f04f 30ff 	mov.w	r0, #4294967295
 800c680:	e7e9      	b.n	800c656 <__ssputs_r+0x8a>
	...

0800c684 <_svfiprintf_r>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	4698      	mov	r8, r3
 800c68a:	898b      	ldrh	r3, [r1, #12]
 800c68c:	061b      	lsls	r3, r3, #24
 800c68e:	b09d      	sub	sp, #116	@ 0x74
 800c690:	4607      	mov	r7, r0
 800c692:	460d      	mov	r5, r1
 800c694:	4614      	mov	r4, r2
 800c696:	d510      	bpl.n	800c6ba <_svfiprintf_r+0x36>
 800c698:	690b      	ldr	r3, [r1, #16]
 800c69a:	b973      	cbnz	r3, 800c6ba <_svfiprintf_r+0x36>
 800c69c:	2140      	movs	r1, #64	@ 0x40
 800c69e:	f7fe fbd3 	bl	800ae48 <_malloc_r>
 800c6a2:	6028      	str	r0, [r5, #0]
 800c6a4:	6128      	str	r0, [r5, #16]
 800c6a6:	b930      	cbnz	r0, 800c6b6 <_svfiprintf_r+0x32>
 800c6a8:	230c      	movs	r3, #12
 800c6aa:	603b      	str	r3, [r7, #0]
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	b01d      	add	sp, #116	@ 0x74
 800c6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b6:	2340      	movs	r3, #64	@ 0x40
 800c6b8:	616b      	str	r3, [r5, #20]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6be:	2320      	movs	r3, #32
 800c6c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6c8:	2330      	movs	r3, #48	@ 0x30
 800c6ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c868 <_svfiprintf_r+0x1e4>
 800c6ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6d2:	f04f 0901 	mov.w	r9, #1
 800c6d6:	4623      	mov	r3, r4
 800c6d8:	469a      	mov	sl, r3
 800c6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6de:	b10a      	cbz	r2, 800c6e4 <_svfiprintf_r+0x60>
 800c6e0:	2a25      	cmp	r2, #37	@ 0x25
 800c6e2:	d1f9      	bne.n	800c6d8 <_svfiprintf_r+0x54>
 800c6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c6e8:	d00b      	beq.n	800c702 <_svfiprintf_r+0x7e>
 800c6ea:	465b      	mov	r3, fp
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	4629      	mov	r1, r5
 800c6f0:	4638      	mov	r0, r7
 800c6f2:	f7ff ff6b 	bl	800c5cc <__ssputs_r>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f000 80a7 	beq.w	800c84a <_svfiprintf_r+0x1c6>
 800c6fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6fe:	445a      	add	r2, fp
 800c700:	9209      	str	r2, [sp, #36]	@ 0x24
 800c702:	f89a 3000 	ldrb.w	r3, [sl]
 800c706:	2b00      	cmp	r3, #0
 800c708:	f000 809f 	beq.w	800c84a <_svfiprintf_r+0x1c6>
 800c70c:	2300      	movs	r3, #0
 800c70e:	f04f 32ff 	mov.w	r2, #4294967295
 800c712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c716:	f10a 0a01 	add.w	sl, sl, #1
 800c71a:	9304      	str	r3, [sp, #16]
 800c71c:	9307      	str	r3, [sp, #28]
 800c71e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c722:	931a      	str	r3, [sp, #104]	@ 0x68
 800c724:	4654      	mov	r4, sl
 800c726:	2205      	movs	r2, #5
 800c728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72c:	484e      	ldr	r0, [pc, #312]	@ (800c868 <_svfiprintf_r+0x1e4>)
 800c72e:	f7f3 fd57 	bl	80001e0 <memchr>
 800c732:	9a04      	ldr	r2, [sp, #16]
 800c734:	b9d8      	cbnz	r0, 800c76e <_svfiprintf_r+0xea>
 800c736:	06d0      	lsls	r0, r2, #27
 800c738:	bf44      	itt	mi
 800c73a:	2320      	movmi	r3, #32
 800c73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c740:	0711      	lsls	r1, r2, #28
 800c742:	bf44      	itt	mi
 800c744:	232b      	movmi	r3, #43	@ 0x2b
 800c746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c74a:	f89a 3000 	ldrb.w	r3, [sl]
 800c74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c750:	d015      	beq.n	800c77e <_svfiprintf_r+0xfa>
 800c752:	9a07      	ldr	r2, [sp, #28]
 800c754:	4654      	mov	r4, sl
 800c756:	2000      	movs	r0, #0
 800c758:	f04f 0c0a 	mov.w	ip, #10
 800c75c:	4621      	mov	r1, r4
 800c75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c762:	3b30      	subs	r3, #48	@ 0x30
 800c764:	2b09      	cmp	r3, #9
 800c766:	d94b      	bls.n	800c800 <_svfiprintf_r+0x17c>
 800c768:	b1b0      	cbz	r0, 800c798 <_svfiprintf_r+0x114>
 800c76a:	9207      	str	r2, [sp, #28]
 800c76c:	e014      	b.n	800c798 <_svfiprintf_r+0x114>
 800c76e:	eba0 0308 	sub.w	r3, r0, r8
 800c772:	fa09 f303 	lsl.w	r3, r9, r3
 800c776:	4313      	orrs	r3, r2
 800c778:	9304      	str	r3, [sp, #16]
 800c77a:	46a2      	mov	sl, r4
 800c77c:	e7d2      	b.n	800c724 <_svfiprintf_r+0xa0>
 800c77e:	9b03      	ldr	r3, [sp, #12]
 800c780:	1d19      	adds	r1, r3, #4
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	9103      	str	r1, [sp, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfbb      	ittet	lt
 800c78a:	425b      	neglt	r3, r3
 800c78c:	f042 0202 	orrlt.w	r2, r2, #2
 800c790:	9307      	strge	r3, [sp, #28]
 800c792:	9307      	strlt	r3, [sp, #28]
 800c794:	bfb8      	it	lt
 800c796:	9204      	strlt	r2, [sp, #16]
 800c798:	7823      	ldrb	r3, [r4, #0]
 800c79a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c79c:	d10a      	bne.n	800c7b4 <_svfiprintf_r+0x130>
 800c79e:	7863      	ldrb	r3, [r4, #1]
 800c7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7a2:	d132      	bne.n	800c80a <_svfiprintf_r+0x186>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	1d1a      	adds	r2, r3, #4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	9203      	str	r2, [sp, #12]
 800c7ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7b0:	3402      	adds	r4, #2
 800c7b2:	9305      	str	r3, [sp, #20]
 800c7b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c878 <_svfiprintf_r+0x1f4>
 800c7b8:	7821      	ldrb	r1, [r4, #0]
 800c7ba:	2203      	movs	r2, #3
 800c7bc:	4650      	mov	r0, sl
 800c7be:	f7f3 fd0f 	bl	80001e0 <memchr>
 800c7c2:	b138      	cbz	r0, 800c7d4 <_svfiprintf_r+0x150>
 800c7c4:	9b04      	ldr	r3, [sp, #16]
 800c7c6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ca:	2240      	movs	r2, #64	@ 0x40
 800c7cc:	4082      	lsls	r2, r0
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	3401      	adds	r4, #1
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d8:	4824      	ldr	r0, [pc, #144]	@ (800c86c <_svfiprintf_r+0x1e8>)
 800c7da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c7de:	2206      	movs	r2, #6
 800c7e0:	f7f3 fcfe 	bl	80001e0 <memchr>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	d036      	beq.n	800c856 <_svfiprintf_r+0x1d2>
 800c7e8:	4b21      	ldr	r3, [pc, #132]	@ (800c870 <_svfiprintf_r+0x1ec>)
 800c7ea:	bb1b      	cbnz	r3, 800c834 <_svfiprintf_r+0x1b0>
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	3307      	adds	r3, #7
 800c7f0:	f023 0307 	bic.w	r3, r3, #7
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	9303      	str	r3, [sp, #12]
 800c7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fa:	4433      	add	r3, r6
 800c7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7fe:	e76a      	b.n	800c6d6 <_svfiprintf_r+0x52>
 800c800:	fb0c 3202 	mla	r2, ip, r2, r3
 800c804:	460c      	mov	r4, r1
 800c806:	2001      	movs	r0, #1
 800c808:	e7a8      	b.n	800c75c <_svfiprintf_r+0xd8>
 800c80a:	2300      	movs	r3, #0
 800c80c:	3401      	adds	r4, #1
 800c80e:	9305      	str	r3, [sp, #20]
 800c810:	4619      	mov	r1, r3
 800c812:	f04f 0c0a 	mov.w	ip, #10
 800c816:	4620      	mov	r0, r4
 800c818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c81c:	3a30      	subs	r2, #48	@ 0x30
 800c81e:	2a09      	cmp	r2, #9
 800c820:	d903      	bls.n	800c82a <_svfiprintf_r+0x1a6>
 800c822:	2b00      	cmp	r3, #0
 800c824:	d0c6      	beq.n	800c7b4 <_svfiprintf_r+0x130>
 800c826:	9105      	str	r1, [sp, #20]
 800c828:	e7c4      	b.n	800c7b4 <_svfiprintf_r+0x130>
 800c82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c82e:	4604      	mov	r4, r0
 800c830:	2301      	movs	r3, #1
 800c832:	e7f0      	b.n	800c816 <_svfiprintf_r+0x192>
 800c834:	ab03      	add	r3, sp, #12
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	462a      	mov	r2, r5
 800c83a:	4b0e      	ldr	r3, [pc, #56]	@ (800c874 <_svfiprintf_r+0x1f0>)
 800c83c:	a904      	add	r1, sp, #16
 800c83e:	4638      	mov	r0, r7
 800c840:	f7fc fcc8 	bl	80091d4 <_printf_float>
 800c844:	1c42      	adds	r2, r0, #1
 800c846:	4606      	mov	r6, r0
 800c848:	d1d6      	bne.n	800c7f8 <_svfiprintf_r+0x174>
 800c84a:	89ab      	ldrh	r3, [r5, #12]
 800c84c:	065b      	lsls	r3, r3, #25
 800c84e:	f53f af2d 	bmi.w	800c6ac <_svfiprintf_r+0x28>
 800c852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c854:	e72c      	b.n	800c6b0 <_svfiprintf_r+0x2c>
 800c856:	ab03      	add	r3, sp, #12
 800c858:	9300      	str	r3, [sp, #0]
 800c85a:	462a      	mov	r2, r5
 800c85c:	4b05      	ldr	r3, [pc, #20]	@ (800c874 <_svfiprintf_r+0x1f0>)
 800c85e:	a904      	add	r1, sp, #16
 800c860:	4638      	mov	r0, r7
 800c862:	f7fc ff4f 	bl	8009704 <_printf_i>
 800c866:	e7ed      	b.n	800c844 <_svfiprintf_r+0x1c0>
 800c868:	080104b0 	.word	0x080104b0
 800c86c:	080104ba 	.word	0x080104ba
 800c870:	080091d5 	.word	0x080091d5
 800c874:	0800c5cd 	.word	0x0800c5cd
 800c878:	080104b6 	.word	0x080104b6

0800c87c <__sflush_r>:
 800c87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c884:	0716      	lsls	r6, r2, #28
 800c886:	4605      	mov	r5, r0
 800c888:	460c      	mov	r4, r1
 800c88a:	d454      	bmi.n	800c936 <__sflush_r+0xba>
 800c88c:	684b      	ldr	r3, [r1, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	dc02      	bgt.n	800c898 <__sflush_r+0x1c>
 800c892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd48      	ble.n	800c92a <__sflush_r+0xae>
 800c898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c89a:	2e00      	cmp	r6, #0
 800c89c:	d045      	beq.n	800c92a <__sflush_r+0xae>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8a4:	682f      	ldr	r7, [r5, #0]
 800c8a6:	6a21      	ldr	r1, [r4, #32]
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	d030      	beq.n	800c90e <__sflush_r+0x92>
 800c8ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	0759      	lsls	r1, r3, #29
 800c8b2:	d505      	bpl.n	800c8c0 <__sflush_r+0x44>
 800c8b4:	6863      	ldr	r3, [r4, #4]
 800c8b6:	1ad2      	subs	r2, r2, r3
 800c8b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8ba:	b10b      	cbz	r3, 800c8c0 <__sflush_r+0x44>
 800c8bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8be:	1ad2      	subs	r2, r2, r3
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8c4:	6a21      	ldr	r1, [r4, #32]
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	47b0      	blx	r6
 800c8ca:	1c43      	adds	r3, r0, #1
 800c8cc:	89a3      	ldrh	r3, [r4, #12]
 800c8ce:	d106      	bne.n	800c8de <__sflush_r+0x62>
 800c8d0:	6829      	ldr	r1, [r5, #0]
 800c8d2:	291d      	cmp	r1, #29
 800c8d4:	d82b      	bhi.n	800c92e <__sflush_r+0xb2>
 800c8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800c980 <__sflush_r+0x104>)
 800c8d8:	410a      	asrs	r2, r1
 800c8da:	07d6      	lsls	r6, r2, #31
 800c8dc:	d427      	bmi.n	800c92e <__sflush_r+0xb2>
 800c8de:	2200      	movs	r2, #0
 800c8e0:	6062      	str	r2, [r4, #4]
 800c8e2:	04d9      	lsls	r1, r3, #19
 800c8e4:	6922      	ldr	r2, [r4, #16]
 800c8e6:	6022      	str	r2, [r4, #0]
 800c8e8:	d504      	bpl.n	800c8f4 <__sflush_r+0x78>
 800c8ea:	1c42      	adds	r2, r0, #1
 800c8ec:	d101      	bne.n	800c8f2 <__sflush_r+0x76>
 800c8ee:	682b      	ldr	r3, [r5, #0]
 800c8f0:	b903      	cbnz	r3, 800c8f4 <__sflush_r+0x78>
 800c8f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8f6:	602f      	str	r7, [r5, #0]
 800c8f8:	b1b9      	cbz	r1, 800c92a <__sflush_r+0xae>
 800c8fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8fe:	4299      	cmp	r1, r3
 800c900:	d002      	beq.n	800c908 <__sflush_r+0x8c>
 800c902:	4628      	mov	r0, r5
 800c904:	f7fe fa2c 	bl	800ad60 <_free_r>
 800c908:	2300      	movs	r3, #0
 800c90a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c90c:	e00d      	b.n	800c92a <__sflush_r+0xae>
 800c90e:	2301      	movs	r3, #1
 800c910:	4628      	mov	r0, r5
 800c912:	47b0      	blx	r6
 800c914:	4602      	mov	r2, r0
 800c916:	1c50      	adds	r0, r2, #1
 800c918:	d1c9      	bne.n	800c8ae <__sflush_r+0x32>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d0c6      	beq.n	800c8ae <__sflush_r+0x32>
 800c920:	2b1d      	cmp	r3, #29
 800c922:	d001      	beq.n	800c928 <__sflush_r+0xac>
 800c924:	2b16      	cmp	r3, #22
 800c926:	d11e      	bne.n	800c966 <__sflush_r+0xea>
 800c928:	602f      	str	r7, [r5, #0]
 800c92a:	2000      	movs	r0, #0
 800c92c:	e022      	b.n	800c974 <__sflush_r+0xf8>
 800c92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c932:	b21b      	sxth	r3, r3
 800c934:	e01b      	b.n	800c96e <__sflush_r+0xf2>
 800c936:	690f      	ldr	r7, [r1, #16]
 800c938:	2f00      	cmp	r7, #0
 800c93a:	d0f6      	beq.n	800c92a <__sflush_r+0xae>
 800c93c:	0793      	lsls	r3, r2, #30
 800c93e:	680e      	ldr	r6, [r1, #0]
 800c940:	bf08      	it	eq
 800c942:	694b      	ldreq	r3, [r1, #20]
 800c944:	600f      	str	r7, [r1, #0]
 800c946:	bf18      	it	ne
 800c948:	2300      	movne	r3, #0
 800c94a:	eba6 0807 	sub.w	r8, r6, r7
 800c94e:	608b      	str	r3, [r1, #8]
 800c950:	f1b8 0f00 	cmp.w	r8, #0
 800c954:	dde9      	ble.n	800c92a <__sflush_r+0xae>
 800c956:	6a21      	ldr	r1, [r4, #32]
 800c958:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c95a:	4643      	mov	r3, r8
 800c95c:	463a      	mov	r2, r7
 800c95e:	4628      	mov	r0, r5
 800c960:	47b0      	blx	r6
 800c962:	2800      	cmp	r0, #0
 800c964:	dc08      	bgt.n	800c978 <__sflush_r+0xfc>
 800c966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c96a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c96e:	81a3      	strh	r3, [r4, #12]
 800c970:	f04f 30ff 	mov.w	r0, #4294967295
 800c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c978:	4407      	add	r7, r0
 800c97a:	eba8 0800 	sub.w	r8, r8, r0
 800c97e:	e7e7      	b.n	800c950 <__sflush_r+0xd4>
 800c980:	dfbffffe 	.word	0xdfbffffe

0800c984 <_fflush_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	690b      	ldr	r3, [r1, #16]
 800c988:	4605      	mov	r5, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	b913      	cbnz	r3, 800c994 <_fflush_r+0x10>
 800c98e:	2500      	movs	r5, #0
 800c990:	4628      	mov	r0, r5
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	b118      	cbz	r0, 800c99e <_fflush_r+0x1a>
 800c996:	6a03      	ldr	r3, [r0, #32]
 800c998:	b90b      	cbnz	r3, 800c99e <_fflush_r+0x1a>
 800c99a:	f7fd fa73 	bl	8009e84 <__sinit>
 800c99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0f3      	beq.n	800c98e <_fflush_r+0xa>
 800c9a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9a8:	07d0      	lsls	r0, r2, #31
 800c9aa:	d404      	bmi.n	800c9b6 <_fflush_r+0x32>
 800c9ac:	0599      	lsls	r1, r3, #22
 800c9ae:	d402      	bmi.n	800c9b6 <_fflush_r+0x32>
 800c9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9b2:	f7fd fb7e 	bl	800a0b2 <__retarget_lock_acquire_recursive>
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	f7ff ff5f 	bl	800c87c <__sflush_r>
 800c9be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9c0:	07da      	lsls	r2, r3, #31
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	d4e4      	bmi.n	800c990 <_fflush_r+0xc>
 800c9c6:	89a3      	ldrh	r3, [r4, #12]
 800c9c8:	059b      	lsls	r3, r3, #22
 800c9ca:	d4e1      	bmi.n	800c990 <_fflush_r+0xc>
 800c9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ce:	f7fd fb71 	bl	800a0b4 <__retarget_lock_release_recursive>
 800c9d2:	e7dd      	b.n	800c990 <_fflush_r+0xc>

0800c9d4 <memmove>:
 800c9d4:	4288      	cmp	r0, r1
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	eb01 0402 	add.w	r4, r1, r2
 800c9dc:	d902      	bls.n	800c9e4 <memmove+0x10>
 800c9de:	4284      	cmp	r4, r0
 800c9e0:	4623      	mov	r3, r4
 800c9e2:	d807      	bhi.n	800c9f4 <memmove+0x20>
 800c9e4:	1e43      	subs	r3, r0, #1
 800c9e6:	42a1      	cmp	r1, r4
 800c9e8:	d008      	beq.n	800c9fc <memmove+0x28>
 800c9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9f2:	e7f8      	b.n	800c9e6 <memmove+0x12>
 800c9f4:	4402      	add	r2, r0
 800c9f6:	4601      	mov	r1, r0
 800c9f8:	428a      	cmp	r2, r1
 800c9fa:	d100      	bne.n	800c9fe <memmove+0x2a>
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca06:	e7f7      	b.n	800c9f8 <memmove+0x24>

0800ca08 <strncmp>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	b16a      	cbz	r2, 800ca28 <strncmp+0x20>
 800ca0c:	3901      	subs	r1, #1
 800ca0e:	1884      	adds	r4, r0, r2
 800ca10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d103      	bne.n	800ca24 <strncmp+0x1c>
 800ca1c:	42a0      	cmp	r0, r4
 800ca1e:	d001      	beq.n	800ca24 <strncmp+0x1c>
 800ca20:	2a00      	cmp	r2, #0
 800ca22:	d1f5      	bne.n	800ca10 <strncmp+0x8>
 800ca24:	1ad0      	subs	r0, r2, r3
 800ca26:	bd10      	pop	{r4, pc}
 800ca28:	4610      	mov	r0, r2
 800ca2a:	e7fc      	b.n	800ca26 <strncmp+0x1e>

0800ca2c <_sbrk_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	4d06      	ldr	r5, [pc, #24]	@ (800ca48 <_sbrk_r+0x1c>)
 800ca30:	2300      	movs	r3, #0
 800ca32:	4604      	mov	r4, r0
 800ca34:	4608      	mov	r0, r1
 800ca36:	602b      	str	r3, [r5, #0]
 800ca38:	f7f7 f81a 	bl	8003a70 <_sbrk>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d102      	bne.n	800ca46 <_sbrk_r+0x1a>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	b103      	cbz	r3, 800ca46 <_sbrk_r+0x1a>
 800ca44:	6023      	str	r3, [r4, #0]
 800ca46:	bd38      	pop	{r3, r4, r5, pc}
 800ca48:	2000191c 	.word	0x2000191c

0800ca4c <memcpy>:
 800ca4c:	440a      	add	r2, r1
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca54:	d100      	bne.n	800ca58 <memcpy+0xc>
 800ca56:	4770      	bx	lr
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca62:	4291      	cmp	r1, r2
 800ca64:	d1f9      	bne.n	800ca5a <memcpy+0xe>
 800ca66:	bd10      	pop	{r4, pc}

0800ca68 <nan>:
 800ca68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca70 <nan+0x8>
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	00000000 	.word	0x00000000
 800ca74:	7ff80000 	.word	0x7ff80000

0800ca78 <__assert_func>:
 800ca78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca7a:	4614      	mov	r4, r2
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	4b09      	ldr	r3, [pc, #36]	@ (800caa4 <__assert_func+0x2c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4605      	mov	r5, r0
 800ca84:	68d8      	ldr	r0, [r3, #12]
 800ca86:	b954      	cbnz	r4, 800ca9e <__assert_func+0x26>
 800ca88:	4b07      	ldr	r3, [pc, #28]	@ (800caa8 <__assert_func+0x30>)
 800ca8a:	461c      	mov	r4, r3
 800ca8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca90:	9100      	str	r1, [sp, #0]
 800ca92:	462b      	mov	r3, r5
 800ca94:	4905      	ldr	r1, [pc, #20]	@ (800caac <__assert_func+0x34>)
 800ca96:	f000 fba7 	bl	800d1e8 <fiprintf>
 800ca9a:	f000 fbb7 	bl	800d20c <abort>
 800ca9e:	4b04      	ldr	r3, [pc, #16]	@ (800cab0 <__assert_func+0x38>)
 800caa0:	e7f4      	b.n	800ca8c <__assert_func+0x14>
 800caa2:	bf00      	nop
 800caa4:	20000044 	.word	0x20000044
 800caa8:	08010504 	.word	0x08010504
 800caac:	080104d6 	.word	0x080104d6
 800cab0:	080104c9 	.word	0x080104c9

0800cab4 <_calloc_r>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	fba1 5402 	umull	r5, r4, r1, r2
 800caba:	b93c      	cbnz	r4, 800cacc <_calloc_r+0x18>
 800cabc:	4629      	mov	r1, r5
 800cabe:	f7fe f9c3 	bl	800ae48 <_malloc_r>
 800cac2:	4606      	mov	r6, r0
 800cac4:	b928      	cbnz	r0, 800cad2 <_calloc_r+0x1e>
 800cac6:	2600      	movs	r6, #0
 800cac8:	4630      	mov	r0, r6
 800caca:	bd70      	pop	{r4, r5, r6, pc}
 800cacc:	220c      	movs	r2, #12
 800cace:	6002      	str	r2, [r0, #0]
 800cad0:	e7f9      	b.n	800cac6 <_calloc_r+0x12>
 800cad2:	462a      	mov	r2, r5
 800cad4:	4621      	mov	r1, r4
 800cad6:	f7fd fa6e 	bl	8009fb6 <memset>
 800cada:	e7f5      	b.n	800cac8 <_calloc_r+0x14>

0800cadc <rshift>:
 800cadc:	6903      	ldr	r3, [r0, #16]
 800cade:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800caea:	f100 0414 	add.w	r4, r0, #20
 800caee:	dd45      	ble.n	800cb7c <rshift+0xa0>
 800caf0:	f011 011f 	ands.w	r1, r1, #31
 800caf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800caf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cafc:	d10c      	bne.n	800cb18 <rshift+0x3c>
 800cafe:	f100 0710 	add.w	r7, r0, #16
 800cb02:	4629      	mov	r1, r5
 800cb04:	42b1      	cmp	r1, r6
 800cb06:	d334      	bcc.n	800cb72 <rshift+0x96>
 800cb08:	1a9b      	subs	r3, r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	1eea      	subs	r2, r5, #3
 800cb0e:	4296      	cmp	r6, r2
 800cb10:	bf38      	it	cc
 800cb12:	2300      	movcc	r3, #0
 800cb14:	4423      	add	r3, r4
 800cb16:	e015      	b.n	800cb44 <rshift+0x68>
 800cb18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb1c:	f1c1 0820 	rsb	r8, r1, #32
 800cb20:	40cf      	lsrs	r7, r1
 800cb22:	f105 0e04 	add.w	lr, r5, #4
 800cb26:	46a1      	mov	r9, r4
 800cb28:	4576      	cmp	r6, lr
 800cb2a:	46f4      	mov	ip, lr
 800cb2c:	d815      	bhi.n	800cb5a <rshift+0x7e>
 800cb2e:	1a9a      	subs	r2, r3, r2
 800cb30:	0092      	lsls	r2, r2, #2
 800cb32:	3a04      	subs	r2, #4
 800cb34:	3501      	adds	r5, #1
 800cb36:	42ae      	cmp	r6, r5
 800cb38:	bf38      	it	cc
 800cb3a:	2200      	movcc	r2, #0
 800cb3c:	18a3      	adds	r3, r4, r2
 800cb3e:	50a7      	str	r7, [r4, r2]
 800cb40:	b107      	cbz	r7, 800cb44 <rshift+0x68>
 800cb42:	3304      	adds	r3, #4
 800cb44:	1b1a      	subs	r2, r3, r4
 800cb46:	42a3      	cmp	r3, r4
 800cb48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb4c:	bf08      	it	eq
 800cb4e:	2300      	moveq	r3, #0
 800cb50:	6102      	str	r2, [r0, #16]
 800cb52:	bf08      	it	eq
 800cb54:	6143      	streq	r3, [r0, #20]
 800cb56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	f8dc c000 	ldr.w	ip, [ip]
 800cb5e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb62:	ea4c 0707 	orr.w	r7, ip, r7
 800cb66:	f849 7b04 	str.w	r7, [r9], #4
 800cb6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb6e:	40cf      	lsrs	r7, r1
 800cb70:	e7da      	b.n	800cb28 <rshift+0x4c>
 800cb72:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb76:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb7a:	e7c3      	b.n	800cb04 <rshift+0x28>
 800cb7c:	4623      	mov	r3, r4
 800cb7e:	e7e1      	b.n	800cb44 <rshift+0x68>

0800cb80 <__hexdig_fun>:
 800cb80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cb84:	2b09      	cmp	r3, #9
 800cb86:	d802      	bhi.n	800cb8e <__hexdig_fun+0xe>
 800cb88:	3820      	subs	r0, #32
 800cb8a:	b2c0      	uxtb	r0, r0
 800cb8c:	4770      	bx	lr
 800cb8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cb92:	2b05      	cmp	r3, #5
 800cb94:	d801      	bhi.n	800cb9a <__hexdig_fun+0x1a>
 800cb96:	3847      	subs	r0, #71	@ 0x47
 800cb98:	e7f7      	b.n	800cb8a <__hexdig_fun+0xa>
 800cb9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cb9e:	2b05      	cmp	r3, #5
 800cba0:	d801      	bhi.n	800cba6 <__hexdig_fun+0x26>
 800cba2:	3827      	subs	r0, #39	@ 0x27
 800cba4:	e7f1      	b.n	800cb8a <__hexdig_fun+0xa>
 800cba6:	2000      	movs	r0, #0
 800cba8:	4770      	bx	lr
	...

0800cbac <__gethex>:
 800cbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	b085      	sub	sp, #20
 800cbb2:	468a      	mov	sl, r1
 800cbb4:	9302      	str	r3, [sp, #8]
 800cbb6:	680b      	ldr	r3, [r1, #0]
 800cbb8:	9001      	str	r0, [sp, #4]
 800cbba:	4690      	mov	r8, r2
 800cbbc:	1c9c      	adds	r4, r3, #2
 800cbbe:	46a1      	mov	r9, r4
 800cbc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cbc4:	2830      	cmp	r0, #48	@ 0x30
 800cbc6:	d0fa      	beq.n	800cbbe <__gethex+0x12>
 800cbc8:	eba9 0303 	sub.w	r3, r9, r3
 800cbcc:	f1a3 0b02 	sub.w	fp, r3, #2
 800cbd0:	f7ff ffd6 	bl	800cb80 <__hexdig_fun>
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d168      	bne.n	800ccac <__gethex+0x100>
 800cbda:	49a0      	ldr	r1, [pc, #640]	@ (800ce5c <__gethex+0x2b0>)
 800cbdc:	2201      	movs	r2, #1
 800cbde:	4648      	mov	r0, r9
 800cbe0:	f7ff ff12 	bl	800ca08 <strncmp>
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d167      	bne.n	800ccba <__gethex+0x10e>
 800cbea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cbee:	4626      	mov	r6, r4
 800cbf0:	f7ff ffc6 	bl	800cb80 <__hexdig_fun>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d062      	beq.n	800ccbe <__gethex+0x112>
 800cbf8:	4623      	mov	r3, r4
 800cbfa:	7818      	ldrb	r0, [r3, #0]
 800cbfc:	2830      	cmp	r0, #48	@ 0x30
 800cbfe:	4699      	mov	r9, r3
 800cc00:	f103 0301 	add.w	r3, r3, #1
 800cc04:	d0f9      	beq.n	800cbfa <__gethex+0x4e>
 800cc06:	f7ff ffbb 	bl	800cb80 <__hexdig_fun>
 800cc0a:	fab0 f580 	clz	r5, r0
 800cc0e:	096d      	lsrs	r5, r5, #5
 800cc10:	f04f 0b01 	mov.w	fp, #1
 800cc14:	464a      	mov	r2, r9
 800cc16:	4616      	mov	r6, r2
 800cc18:	3201      	adds	r2, #1
 800cc1a:	7830      	ldrb	r0, [r6, #0]
 800cc1c:	f7ff ffb0 	bl	800cb80 <__hexdig_fun>
 800cc20:	2800      	cmp	r0, #0
 800cc22:	d1f8      	bne.n	800cc16 <__gethex+0x6a>
 800cc24:	498d      	ldr	r1, [pc, #564]	@ (800ce5c <__gethex+0x2b0>)
 800cc26:	2201      	movs	r2, #1
 800cc28:	4630      	mov	r0, r6
 800cc2a:	f7ff feed 	bl	800ca08 <strncmp>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d13f      	bne.n	800ccb2 <__gethex+0x106>
 800cc32:	b944      	cbnz	r4, 800cc46 <__gethex+0x9a>
 800cc34:	1c74      	adds	r4, r6, #1
 800cc36:	4622      	mov	r2, r4
 800cc38:	4616      	mov	r6, r2
 800cc3a:	3201      	adds	r2, #1
 800cc3c:	7830      	ldrb	r0, [r6, #0]
 800cc3e:	f7ff ff9f 	bl	800cb80 <__hexdig_fun>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d1f8      	bne.n	800cc38 <__gethex+0x8c>
 800cc46:	1ba4      	subs	r4, r4, r6
 800cc48:	00a7      	lsls	r7, r4, #2
 800cc4a:	7833      	ldrb	r3, [r6, #0]
 800cc4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cc50:	2b50      	cmp	r3, #80	@ 0x50
 800cc52:	d13e      	bne.n	800ccd2 <__gethex+0x126>
 800cc54:	7873      	ldrb	r3, [r6, #1]
 800cc56:	2b2b      	cmp	r3, #43	@ 0x2b
 800cc58:	d033      	beq.n	800ccc2 <__gethex+0x116>
 800cc5a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cc5c:	d034      	beq.n	800ccc8 <__gethex+0x11c>
 800cc5e:	1c71      	adds	r1, r6, #1
 800cc60:	2400      	movs	r4, #0
 800cc62:	7808      	ldrb	r0, [r1, #0]
 800cc64:	f7ff ff8c 	bl	800cb80 <__hexdig_fun>
 800cc68:	1e43      	subs	r3, r0, #1
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	2b18      	cmp	r3, #24
 800cc6e:	d830      	bhi.n	800ccd2 <__gethex+0x126>
 800cc70:	f1a0 0210 	sub.w	r2, r0, #16
 800cc74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc78:	f7ff ff82 	bl	800cb80 <__hexdig_fun>
 800cc7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc80:	fa5f fc8c 	uxtb.w	ip, ip
 800cc84:	f1bc 0f18 	cmp.w	ip, #24
 800cc88:	f04f 030a 	mov.w	r3, #10
 800cc8c:	d91e      	bls.n	800cccc <__gethex+0x120>
 800cc8e:	b104      	cbz	r4, 800cc92 <__gethex+0xe6>
 800cc90:	4252      	negs	r2, r2
 800cc92:	4417      	add	r7, r2
 800cc94:	f8ca 1000 	str.w	r1, [sl]
 800cc98:	b1ed      	cbz	r5, 800ccd6 <__gethex+0x12a>
 800cc9a:	f1bb 0f00 	cmp.w	fp, #0
 800cc9e:	bf0c      	ite	eq
 800cca0:	2506      	moveq	r5, #6
 800cca2:	2500      	movne	r5, #0
 800cca4:	4628      	mov	r0, r5
 800cca6:	b005      	add	sp, #20
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	2500      	movs	r5, #0
 800ccae:	462c      	mov	r4, r5
 800ccb0:	e7b0      	b.n	800cc14 <__gethex+0x68>
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	d1c7      	bne.n	800cc46 <__gethex+0x9a>
 800ccb6:	4627      	mov	r7, r4
 800ccb8:	e7c7      	b.n	800cc4a <__gethex+0x9e>
 800ccba:	464e      	mov	r6, r9
 800ccbc:	462f      	mov	r7, r5
 800ccbe:	2501      	movs	r5, #1
 800ccc0:	e7c3      	b.n	800cc4a <__gethex+0x9e>
 800ccc2:	2400      	movs	r4, #0
 800ccc4:	1cb1      	adds	r1, r6, #2
 800ccc6:	e7cc      	b.n	800cc62 <__gethex+0xb6>
 800ccc8:	2401      	movs	r4, #1
 800ccca:	e7fb      	b.n	800ccc4 <__gethex+0x118>
 800cccc:	fb03 0002 	mla	r0, r3, r2, r0
 800ccd0:	e7ce      	b.n	800cc70 <__gethex+0xc4>
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	e7de      	b.n	800cc94 <__gethex+0xe8>
 800ccd6:	eba6 0309 	sub.w	r3, r6, r9
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	4629      	mov	r1, r5
 800ccde:	2b07      	cmp	r3, #7
 800cce0:	dc0a      	bgt.n	800ccf8 <__gethex+0x14c>
 800cce2:	9801      	ldr	r0, [sp, #4]
 800cce4:	f7fe f93c 	bl	800af60 <_Balloc>
 800cce8:	4604      	mov	r4, r0
 800ccea:	b940      	cbnz	r0, 800ccfe <__gethex+0x152>
 800ccec:	4b5c      	ldr	r3, [pc, #368]	@ (800ce60 <__gethex+0x2b4>)
 800ccee:	4602      	mov	r2, r0
 800ccf0:	21e4      	movs	r1, #228	@ 0xe4
 800ccf2:	485c      	ldr	r0, [pc, #368]	@ (800ce64 <__gethex+0x2b8>)
 800ccf4:	f7ff fec0 	bl	800ca78 <__assert_func>
 800ccf8:	3101      	adds	r1, #1
 800ccfa:	105b      	asrs	r3, r3, #1
 800ccfc:	e7ef      	b.n	800ccde <__gethex+0x132>
 800ccfe:	f100 0a14 	add.w	sl, r0, #20
 800cd02:	2300      	movs	r3, #0
 800cd04:	4655      	mov	r5, sl
 800cd06:	469b      	mov	fp, r3
 800cd08:	45b1      	cmp	r9, r6
 800cd0a:	d337      	bcc.n	800cd7c <__gethex+0x1d0>
 800cd0c:	f845 bb04 	str.w	fp, [r5], #4
 800cd10:	eba5 050a 	sub.w	r5, r5, sl
 800cd14:	10ad      	asrs	r5, r5, #2
 800cd16:	6125      	str	r5, [r4, #16]
 800cd18:	4658      	mov	r0, fp
 800cd1a:	f7fe fa13 	bl	800b144 <__hi0bits>
 800cd1e:	016d      	lsls	r5, r5, #5
 800cd20:	f8d8 6000 	ldr.w	r6, [r8]
 800cd24:	1a2d      	subs	r5, r5, r0
 800cd26:	42b5      	cmp	r5, r6
 800cd28:	dd54      	ble.n	800cdd4 <__gethex+0x228>
 800cd2a:	1bad      	subs	r5, r5, r6
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f7fe fda7 	bl	800b882 <__any_on>
 800cd34:	4681      	mov	r9, r0
 800cd36:	b178      	cbz	r0, 800cd58 <__gethex+0x1ac>
 800cd38:	1e6b      	subs	r3, r5, #1
 800cd3a:	1159      	asrs	r1, r3, #5
 800cd3c:	f003 021f 	and.w	r2, r3, #31
 800cd40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd44:	f04f 0901 	mov.w	r9, #1
 800cd48:	fa09 f202 	lsl.w	r2, r9, r2
 800cd4c:	420a      	tst	r2, r1
 800cd4e:	d003      	beq.n	800cd58 <__gethex+0x1ac>
 800cd50:	454b      	cmp	r3, r9
 800cd52:	dc36      	bgt.n	800cdc2 <__gethex+0x216>
 800cd54:	f04f 0902 	mov.w	r9, #2
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7ff febe 	bl	800cadc <rshift>
 800cd60:	442f      	add	r7, r5
 800cd62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd66:	42bb      	cmp	r3, r7
 800cd68:	da42      	bge.n	800cdf0 <__gethex+0x244>
 800cd6a:	9801      	ldr	r0, [sp, #4]
 800cd6c:	4621      	mov	r1, r4
 800cd6e:	f7fe f937 	bl	800afe0 <_Bfree>
 800cd72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd74:	2300      	movs	r3, #0
 800cd76:	6013      	str	r3, [r2, #0]
 800cd78:	25a3      	movs	r5, #163	@ 0xa3
 800cd7a:	e793      	b.n	800cca4 <__gethex+0xf8>
 800cd7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cd80:	2a2e      	cmp	r2, #46	@ 0x2e
 800cd82:	d012      	beq.n	800cdaa <__gethex+0x1fe>
 800cd84:	2b20      	cmp	r3, #32
 800cd86:	d104      	bne.n	800cd92 <__gethex+0x1e6>
 800cd88:	f845 bb04 	str.w	fp, [r5], #4
 800cd8c:	f04f 0b00 	mov.w	fp, #0
 800cd90:	465b      	mov	r3, fp
 800cd92:	7830      	ldrb	r0, [r6, #0]
 800cd94:	9303      	str	r3, [sp, #12]
 800cd96:	f7ff fef3 	bl	800cb80 <__hexdig_fun>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	f000 000f 	and.w	r0, r0, #15
 800cda0:	4098      	lsls	r0, r3
 800cda2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cda6:	3304      	adds	r3, #4
 800cda8:	e7ae      	b.n	800cd08 <__gethex+0x15c>
 800cdaa:	45b1      	cmp	r9, r6
 800cdac:	d8ea      	bhi.n	800cd84 <__gethex+0x1d8>
 800cdae:	492b      	ldr	r1, [pc, #172]	@ (800ce5c <__gethex+0x2b0>)
 800cdb0:	9303      	str	r3, [sp, #12]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	f7ff fe27 	bl	800ca08 <strncmp>
 800cdba:	9b03      	ldr	r3, [sp, #12]
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d1e1      	bne.n	800cd84 <__gethex+0x1d8>
 800cdc0:	e7a2      	b.n	800cd08 <__gethex+0x15c>
 800cdc2:	1ea9      	subs	r1, r5, #2
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f7fe fd5c 	bl	800b882 <__any_on>
 800cdca:	2800      	cmp	r0, #0
 800cdcc:	d0c2      	beq.n	800cd54 <__gethex+0x1a8>
 800cdce:	f04f 0903 	mov.w	r9, #3
 800cdd2:	e7c1      	b.n	800cd58 <__gethex+0x1ac>
 800cdd4:	da09      	bge.n	800cdea <__gethex+0x23e>
 800cdd6:	1b75      	subs	r5, r6, r5
 800cdd8:	4621      	mov	r1, r4
 800cdda:	9801      	ldr	r0, [sp, #4]
 800cddc:	462a      	mov	r2, r5
 800cdde:	f7fe fb17 	bl	800b410 <__lshift>
 800cde2:	1b7f      	subs	r7, r7, r5
 800cde4:	4604      	mov	r4, r0
 800cde6:	f100 0a14 	add.w	sl, r0, #20
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	e7b8      	b.n	800cd62 <__gethex+0x1b6>
 800cdf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cdf4:	42bd      	cmp	r5, r7
 800cdf6:	dd6f      	ble.n	800ced8 <__gethex+0x32c>
 800cdf8:	1bed      	subs	r5, r5, r7
 800cdfa:	42ae      	cmp	r6, r5
 800cdfc:	dc34      	bgt.n	800ce68 <__gethex+0x2bc>
 800cdfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d022      	beq.n	800ce4c <__gethex+0x2a0>
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d024      	beq.n	800ce54 <__gethex+0x2a8>
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d115      	bne.n	800ce3a <__gethex+0x28e>
 800ce0e:	42ae      	cmp	r6, r5
 800ce10:	d113      	bne.n	800ce3a <__gethex+0x28e>
 800ce12:	2e01      	cmp	r6, #1
 800ce14:	d10b      	bne.n	800ce2e <__gethex+0x282>
 800ce16:	9a02      	ldr	r2, [sp, #8]
 800ce18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce1c:	6013      	str	r3, [r2, #0]
 800ce1e:	2301      	movs	r3, #1
 800ce20:	6123      	str	r3, [r4, #16]
 800ce22:	f8ca 3000 	str.w	r3, [sl]
 800ce26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce28:	2562      	movs	r5, #98	@ 0x62
 800ce2a:	601c      	str	r4, [r3, #0]
 800ce2c:	e73a      	b.n	800cca4 <__gethex+0xf8>
 800ce2e:	1e71      	subs	r1, r6, #1
 800ce30:	4620      	mov	r0, r4
 800ce32:	f7fe fd26 	bl	800b882 <__any_on>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	d1ed      	bne.n	800ce16 <__gethex+0x26a>
 800ce3a:	9801      	ldr	r0, [sp, #4]
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	f7fe f8cf 	bl	800afe0 <_Bfree>
 800ce42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce44:	2300      	movs	r3, #0
 800ce46:	6013      	str	r3, [r2, #0]
 800ce48:	2550      	movs	r5, #80	@ 0x50
 800ce4a:	e72b      	b.n	800cca4 <__gethex+0xf8>
 800ce4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d1f3      	bne.n	800ce3a <__gethex+0x28e>
 800ce52:	e7e0      	b.n	800ce16 <__gethex+0x26a>
 800ce54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1dd      	bne.n	800ce16 <__gethex+0x26a>
 800ce5a:	e7ee      	b.n	800ce3a <__gethex+0x28e>
 800ce5c:	08010458 	.word	0x08010458
 800ce60:	080102ee 	.word	0x080102ee
 800ce64:	08010505 	.word	0x08010505
 800ce68:	1e6f      	subs	r7, r5, #1
 800ce6a:	f1b9 0f00 	cmp.w	r9, #0
 800ce6e:	d130      	bne.n	800ced2 <__gethex+0x326>
 800ce70:	b127      	cbz	r7, 800ce7c <__gethex+0x2d0>
 800ce72:	4639      	mov	r1, r7
 800ce74:	4620      	mov	r0, r4
 800ce76:	f7fe fd04 	bl	800b882 <__any_on>
 800ce7a:	4681      	mov	r9, r0
 800ce7c:	117a      	asrs	r2, r7, #5
 800ce7e:	2301      	movs	r3, #1
 800ce80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce84:	f007 071f 	and.w	r7, r7, #31
 800ce88:	40bb      	lsls	r3, r7
 800ce8a:	4213      	tst	r3, r2
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4620      	mov	r0, r4
 800ce90:	bf18      	it	ne
 800ce92:	f049 0902 	orrne.w	r9, r9, #2
 800ce96:	f7ff fe21 	bl	800cadc <rshift>
 800ce9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ce9e:	1b76      	subs	r6, r6, r5
 800cea0:	2502      	movs	r5, #2
 800cea2:	f1b9 0f00 	cmp.w	r9, #0
 800cea6:	d047      	beq.n	800cf38 <__gethex+0x38c>
 800cea8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d015      	beq.n	800cedc <__gethex+0x330>
 800ceb0:	2b03      	cmp	r3, #3
 800ceb2:	d017      	beq.n	800cee4 <__gethex+0x338>
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d109      	bne.n	800cecc <__gethex+0x320>
 800ceb8:	f019 0f02 	tst.w	r9, #2
 800cebc:	d006      	beq.n	800cecc <__gethex+0x320>
 800cebe:	f8da 3000 	ldr.w	r3, [sl]
 800cec2:	ea49 0903 	orr.w	r9, r9, r3
 800cec6:	f019 0f01 	tst.w	r9, #1
 800ceca:	d10e      	bne.n	800ceea <__gethex+0x33e>
 800cecc:	f045 0510 	orr.w	r5, r5, #16
 800ced0:	e032      	b.n	800cf38 <__gethex+0x38c>
 800ced2:	f04f 0901 	mov.w	r9, #1
 800ced6:	e7d1      	b.n	800ce7c <__gethex+0x2d0>
 800ced8:	2501      	movs	r5, #1
 800ceda:	e7e2      	b.n	800cea2 <__gethex+0x2f6>
 800cedc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cede:	f1c3 0301 	rsb	r3, r3, #1
 800cee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0f0      	beq.n	800cecc <__gethex+0x320>
 800ceea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ceee:	f104 0314 	add.w	r3, r4, #20
 800cef2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cef6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cefa:	f04f 0c00 	mov.w	ip, #0
 800cefe:	4618      	mov	r0, r3
 800cf00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf08:	d01b      	beq.n	800cf42 <__gethex+0x396>
 800cf0a:	3201      	adds	r2, #1
 800cf0c:	6002      	str	r2, [r0, #0]
 800cf0e:	2d02      	cmp	r5, #2
 800cf10:	f104 0314 	add.w	r3, r4, #20
 800cf14:	d13c      	bne.n	800cf90 <__gethex+0x3e4>
 800cf16:	f8d8 2000 	ldr.w	r2, [r8]
 800cf1a:	3a01      	subs	r2, #1
 800cf1c:	42b2      	cmp	r2, r6
 800cf1e:	d109      	bne.n	800cf34 <__gethex+0x388>
 800cf20:	1171      	asrs	r1, r6, #5
 800cf22:	2201      	movs	r2, #1
 800cf24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cf28:	f006 061f 	and.w	r6, r6, #31
 800cf2c:	fa02 f606 	lsl.w	r6, r2, r6
 800cf30:	421e      	tst	r6, r3
 800cf32:	d13a      	bne.n	800cfaa <__gethex+0x3fe>
 800cf34:	f045 0520 	orr.w	r5, r5, #32
 800cf38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf3a:	601c      	str	r4, [r3, #0]
 800cf3c:	9b02      	ldr	r3, [sp, #8]
 800cf3e:	601f      	str	r7, [r3, #0]
 800cf40:	e6b0      	b.n	800cca4 <__gethex+0xf8>
 800cf42:	4299      	cmp	r1, r3
 800cf44:	f843 cc04 	str.w	ip, [r3, #-4]
 800cf48:	d8d9      	bhi.n	800cefe <__gethex+0x352>
 800cf4a:	68a3      	ldr	r3, [r4, #8]
 800cf4c:	459b      	cmp	fp, r3
 800cf4e:	db17      	blt.n	800cf80 <__gethex+0x3d4>
 800cf50:	6861      	ldr	r1, [r4, #4]
 800cf52:	9801      	ldr	r0, [sp, #4]
 800cf54:	3101      	adds	r1, #1
 800cf56:	f7fe f803 	bl	800af60 <_Balloc>
 800cf5a:	4681      	mov	r9, r0
 800cf5c:	b918      	cbnz	r0, 800cf66 <__gethex+0x3ba>
 800cf5e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfc8 <__gethex+0x41c>)
 800cf60:	4602      	mov	r2, r0
 800cf62:	2184      	movs	r1, #132	@ 0x84
 800cf64:	e6c5      	b.n	800ccf2 <__gethex+0x146>
 800cf66:	6922      	ldr	r2, [r4, #16]
 800cf68:	3202      	adds	r2, #2
 800cf6a:	f104 010c 	add.w	r1, r4, #12
 800cf6e:	0092      	lsls	r2, r2, #2
 800cf70:	300c      	adds	r0, #12
 800cf72:	f7ff fd6b 	bl	800ca4c <memcpy>
 800cf76:	4621      	mov	r1, r4
 800cf78:	9801      	ldr	r0, [sp, #4]
 800cf7a:	f7fe f831 	bl	800afe0 <_Bfree>
 800cf7e:	464c      	mov	r4, r9
 800cf80:	6923      	ldr	r3, [r4, #16]
 800cf82:	1c5a      	adds	r2, r3, #1
 800cf84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cf88:	6122      	str	r2, [r4, #16]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	615a      	str	r2, [r3, #20]
 800cf8e:	e7be      	b.n	800cf0e <__gethex+0x362>
 800cf90:	6922      	ldr	r2, [r4, #16]
 800cf92:	455a      	cmp	r2, fp
 800cf94:	dd0b      	ble.n	800cfae <__gethex+0x402>
 800cf96:	2101      	movs	r1, #1
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f7ff fd9f 	bl	800cadc <rshift>
 800cf9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfa2:	3701      	adds	r7, #1
 800cfa4:	42bb      	cmp	r3, r7
 800cfa6:	f6ff aee0 	blt.w	800cd6a <__gethex+0x1be>
 800cfaa:	2501      	movs	r5, #1
 800cfac:	e7c2      	b.n	800cf34 <__gethex+0x388>
 800cfae:	f016 061f 	ands.w	r6, r6, #31
 800cfb2:	d0fa      	beq.n	800cfaa <__gethex+0x3fe>
 800cfb4:	4453      	add	r3, sl
 800cfb6:	f1c6 0620 	rsb	r6, r6, #32
 800cfba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cfbe:	f7fe f8c1 	bl	800b144 <__hi0bits>
 800cfc2:	42b0      	cmp	r0, r6
 800cfc4:	dbe7      	blt.n	800cf96 <__gethex+0x3ea>
 800cfc6:	e7f0      	b.n	800cfaa <__gethex+0x3fe>
 800cfc8:	080102ee 	.word	0x080102ee

0800cfcc <L_shift>:
 800cfcc:	f1c2 0208 	rsb	r2, r2, #8
 800cfd0:	0092      	lsls	r2, r2, #2
 800cfd2:	b570      	push	{r4, r5, r6, lr}
 800cfd4:	f1c2 0620 	rsb	r6, r2, #32
 800cfd8:	6843      	ldr	r3, [r0, #4]
 800cfda:	6804      	ldr	r4, [r0, #0]
 800cfdc:	fa03 f506 	lsl.w	r5, r3, r6
 800cfe0:	432c      	orrs	r4, r5
 800cfe2:	40d3      	lsrs	r3, r2
 800cfe4:	6004      	str	r4, [r0, #0]
 800cfe6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfea:	4288      	cmp	r0, r1
 800cfec:	d3f4      	bcc.n	800cfd8 <L_shift+0xc>
 800cfee:	bd70      	pop	{r4, r5, r6, pc}

0800cff0 <__match>:
 800cff0:	b530      	push	{r4, r5, lr}
 800cff2:	6803      	ldr	r3, [r0, #0]
 800cff4:	3301      	adds	r3, #1
 800cff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cffa:	b914      	cbnz	r4, 800d002 <__match+0x12>
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	2001      	movs	r0, #1
 800d000:	bd30      	pop	{r4, r5, pc}
 800d002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d006:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d00a:	2d19      	cmp	r5, #25
 800d00c:	bf98      	it	ls
 800d00e:	3220      	addls	r2, #32
 800d010:	42a2      	cmp	r2, r4
 800d012:	d0f0      	beq.n	800cff6 <__match+0x6>
 800d014:	2000      	movs	r0, #0
 800d016:	e7f3      	b.n	800d000 <__match+0x10>

0800d018 <__hexnan>:
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	680b      	ldr	r3, [r1, #0]
 800d01e:	6801      	ldr	r1, [r0, #0]
 800d020:	115e      	asrs	r6, r3, #5
 800d022:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d026:	f013 031f 	ands.w	r3, r3, #31
 800d02a:	b087      	sub	sp, #28
 800d02c:	bf18      	it	ne
 800d02e:	3604      	addne	r6, #4
 800d030:	2500      	movs	r5, #0
 800d032:	1f37      	subs	r7, r6, #4
 800d034:	4682      	mov	sl, r0
 800d036:	4690      	mov	r8, r2
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d03e:	46b9      	mov	r9, r7
 800d040:	463c      	mov	r4, r7
 800d042:	9502      	str	r5, [sp, #8]
 800d044:	46ab      	mov	fp, r5
 800d046:	784a      	ldrb	r2, [r1, #1]
 800d048:	1c4b      	adds	r3, r1, #1
 800d04a:	9303      	str	r3, [sp, #12]
 800d04c:	b342      	cbz	r2, 800d0a0 <__hexnan+0x88>
 800d04e:	4610      	mov	r0, r2
 800d050:	9105      	str	r1, [sp, #20]
 800d052:	9204      	str	r2, [sp, #16]
 800d054:	f7ff fd94 	bl	800cb80 <__hexdig_fun>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d151      	bne.n	800d100 <__hexnan+0xe8>
 800d05c:	9a04      	ldr	r2, [sp, #16]
 800d05e:	9905      	ldr	r1, [sp, #20]
 800d060:	2a20      	cmp	r2, #32
 800d062:	d818      	bhi.n	800d096 <__hexnan+0x7e>
 800d064:	9b02      	ldr	r3, [sp, #8]
 800d066:	459b      	cmp	fp, r3
 800d068:	dd13      	ble.n	800d092 <__hexnan+0x7a>
 800d06a:	454c      	cmp	r4, r9
 800d06c:	d206      	bcs.n	800d07c <__hexnan+0x64>
 800d06e:	2d07      	cmp	r5, #7
 800d070:	dc04      	bgt.n	800d07c <__hexnan+0x64>
 800d072:	462a      	mov	r2, r5
 800d074:	4649      	mov	r1, r9
 800d076:	4620      	mov	r0, r4
 800d078:	f7ff ffa8 	bl	800cfcc <L_shift>
 800d07c:	4544      	cmp	r4, r8
 800d07e:	d952      	bls.n	800d126 <__hexnan+0x10e>
 800d080:	2300      	movs	r3, #0
 800d082:	f1a4 0904 	sub.w	r9, r4, #4
 800d086:	f844 3c04 	str.w	r3, [r4, #-4]
 800d08a:	f8cd b008 	str.w	fp, [sp, #8]
 800d08e:	464c      	mov	r4, r9
 800d090:	461d      	mov	r5, r3
 800d092:	9903      	ldr	r1, [sp, #12]
 800d094:	e7d7      	b.n	800d046 <__hexnan+0x2e>
 800d096:	2a29      	cmp	r2, #41	@ 0x29
 800d098:	d157      	bne.n	800d14a <__hexnan+0x132>
 800d09a:	3102      	adds	r1, #2
 800d09c:	f8ca 1000 	str.w	r1, [sl]
 800d0a0:	f1bb 0f00 	cmp.w	fp, #0
 800d0a4:	d051      	beq.n	800d14a <__hexnan+0x132>
 800d0a6:	454c      	cmp	r4, r9
 800d0a8:	d206      	bcs.n	800d0b8 <__hexnan+0xa0>
 800d0aa:	2d07      	cmp	r5, #7
 800d0ac:	dc04      	bgt.n	800d0b8 <__hexnan+0xa0>
 800d0ae:	462a      	mov	r2, r5
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f7ff ff8a 	bl	800cfcc <L_shift>
 800d0b8:	4544      	cmp	r4, r8
 800d0ba:	d936      	bls.n	800d12a <__hexnan+0x112>
 800d0bc:	f1a8 0204 	sub.w	r2, r8, #4
 800d0c0:	4623      	mov	r3, r4
 800d0c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d0c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d0ca:	429f      	cmp	r7, r3
 800d0cc:	d2f9      	bcs.n	800d0c2 <__hexnan+0xaa>
 800d0ce:	1b3b      	subs	r3, r7, r4
 800d0d0:	f023 0303 	bic.w	r3, r3, #3
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	3401      	adds	r4, #1
 800d0d8:	3e03      	subs	r6, #3
 800d0da:	42b4      	cmp	r4, r6
 800d0dc:	bf88      	it	hi
 800d0de:	2304      	movhi	r3, #4
 800d0e0:	4443      	add	r3, r8
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f843 2b04 	str.w	r2, [r3], #4
 800d0e8:	429f      	cmp	r7, r3
 800d0ea:	d2fb      	bcs.n	800d0e4 <__hexnan+0xcc>
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	b91b      	cbnz	r3, 800d0f8 <__hexnan+0xe0>
 800d0f0:	4547      	cmp	r7, r8
 800d0f2:	d128      	bne.n	800d146 <__hexnan+0x12e>
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	2005      	movs	r0, #5
 800d0fa:	b007      	add	sp, #28
 800d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d100:	3501      	adds	r5, #1
 800d102:	2d08      	cmp	r5, #8
 800d104:	f10b 0b01 	add.w	fp, fp, #1
 800d108:	dd06      	ble.n	800d118 <__hexnan+0x100>
 800d10a:	4544      	cmp	r4, r8
 800d10c:	d9c1      	bls.n	800d092 <__hexnan+0x7a>
 800d10e:	2300      	movs	r3, #0
 800d110:	f844 3c04 	str.w	r3, [r4, #-4]
 800d114:	2501      	movs	r5, #1
 800d116:	3c04      	subs	r4, #4
 800d118:	6822      	ldr	r2, [r4, #0]
 800d11a:	f000 000f 	and.w	r0, r0, #15
 800d11e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d122:	6020      	str	r0, [r4, #0]
 800d124:	e7b5      	b.n	800d092 <__hexnan+0x7a>
 800d126:	2508      	movs	r5, #8
 800d128:	e7b3      	b.n	800d092 <__hexnan+0x7a>
 800d12a:	9b01      	ldr	r3, [sp, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d0dd      	beq.n	800d0ec <__hexnan+0xd4>
 800d130:	f1c3 0320 	rsb	r3, r3, #32
 800d134:	f04f 32ff 	mov.w	r2, #4294967295
 800d138:	40da      	lsrs	r2, r3
 800d13a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d13e:	4013      	ands	r3, r2
 800d140:	f846 3c04 	str.w	r3, [r6, #-4]
 800d144:	e7d2      	b.n	800d0ec <__hexnan+0xd4>
 800d146:	3f04      	subs	r7, #4
 800d148:	e7d0      	b.n	800d0ec <__hexnan+0xd4>
 800d14a:	2004      	movs	r0, #4
 800d14c:	e7d5      	b.n	800d0fa <__hexnan+0xe2>

0800d14e <__ascii_mbtowc>:
 800d14e:	b082      	sub	sp, #8
 800d150:	b901      	cbnz	r1, 800d154 <__ascii_mbtowc+0x6>
 800d152:	a901      	add	r1, sp, #4
 800d154:	b142      	cbz	r2, 800d168 <__ascii_mbtowc+0x1a>
 800d156:	b14b      	cbz	r3, 800d16c <__ascii_mbtowc+0x1e>
 800d158:	7813      	ldrb	r3, [r2, #0]
 800d15a:	600b      	str	r3, [r1, #0]
 800d15c:	7812      	ldrb	r2, [r2, #0]
 800d15e:	1e10      	subs	r0, r2, #0
 800d160:	bf18      	it	ne
 800d162:	2001      	movne	r0, #1
 800d164:	b002      	add	sp, #8
 800d166:	4770      	bx	lr
 800d168:	4610      	mov	r0, r2
 800d16a:	e7fb      	b.n	800d164 <__ascii_mbtowc+0x16>
 800d16c:	f06f 0001 	mvn.w	r0, #1
 800d170:	e7f8      	b.n	800d164 <__ascii_mbtowc+0x16>

0800d172 <_realloc_r>:
 800d172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d176:	4680      	mov	r8, r0
 800d178:	4615      	mov	r5, r2
 800d17a:	460c      	mov	r4, r1
 800d17c:	b921      	cbnz	r1, 800d188 <_realloc_r+0x16>
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	4611      	mov	r1, r2
 800d184:	f7fd be60 	b.w	800ae48 <_malloc_r>
 800d188:	b92a      	cbnz	r2, 800d196 <_realloc_r+0x24>
 800d18a:	f7fd fde9 	bl	800ad60 <_free_r>
 800d18e:	2400      	movs	r4, #0
 800d190:	4620      	mov	r0, r4
 800d192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d196:	f000 f840 	bl	800d21a <_malloc_usable_size_r>
 800d19a:	4285      	cmp	r5, r0
 800d19c:	4606      	mov	r6, r0
 800d19e:	d802      	bhi.n	800d1a6 <_realloc_r+0x34>
 800d1a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1a4:	d8f4      	bhi.n	800d190 <_realloc_r+0x1e>
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	f7fd fe4d 	bl	800ae48 <_malloc_r>
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0ec      	beq.n	800d18e <_realloc_r+0x1c>
 800d1b4:	42b5      	cmp	r5, r6
 800d1b6:	462a      	mov	r2, r5
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	bf28      	it	cs
 800d1bc:	4632      	movcs	r2, r6
 800d1be:	f7ff fc45 	bl	800ca4c <memcpy>
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4640      	mov	r0, r8
 800d1c6:	f7fd fdcb 	bl	800ad60 <_free_r>
 800d1ca:	463c      	mov	r4, r7
 800d1cc:	e7e0      	b.n	800d190 <_realloc_r+0x1e>

0800d1ce <__ascii_wctomb>:
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	b141      	cbz	r1, 800d1e6 <__ascii_wctomb+0x18>
 800d1d4:	2aff      	cmp	r2, #255	@ 0xff
 800d1d6:	d904      	bls.n	800d1e2 <__ascii_wctomb+0x14>
 800d1d8:	228a      	movs	r2, #138	@ 0x8a
 800d1da:	601a      	str	r2, [r3, #0]
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	4770      	bx	lr
 800d1e2:	700a      	strb	r2, [r1, #0]
 800d1e4:	2001      	movs	r0, #1
 800d1e6:	4770      	bx	lr

0800d1e8 <fiprintf>:
 800d1e8:	b40e      	push	{r1, r2, r3}
 800d1ea:	b503      	push	{r0, r1, lr}
 800d1ec:	4601      	mov	r1, r0
 800d1ee:	ab03      	add	r3, sp, #12
 800d1f0:	4805      	ldr	r0, [pc, #20]	@ (800d208 <fiprintf+0x20>)
 800d1f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f6:	6800      	ldr	r0, [r0, #0]
 800d1f8:	9301      	str	r3, [sp, #4]
 800d1fa:	f000 f83f 	bl	800d27c <_vfiprintf_r>
 800d1fe:	b002      	add	sp, #8
 800d200:	f85d eb04 	ldr.w	lr, [sp], #4
 800d204:	b003      	add	sp, #12
 800d206:	4770      	bx	lr
 800d208:	20000044 	.word	0x20000044

0800d20c <abort>:
 800d20c:	b508      	push	{r3, lr}
 800d20e:	2006      	movs	r0, #6
 800d210:	f000 fa08 	bl	800d624 <raise>
 800d214:	2001      	movs	r0, #1
 800d216:	f7f6 fbb3 	bl	8003980 <_exit>

0800d21a <_malloc_usable_size_r>:
 800d21a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d21e:	1f18      	subs	r0, r3, #4
 800d220:	2b00      	cmp	r3, #0
 800d222:	bfbc      	itt	lt
 800d224:	580b      	ldrlt	r3, [r1, r0]
 800d226:	18c0      	addlt	r0, r0, r3
 800d228:	4770      	bx	lr

0800d22a <__sfputc_r>:
 800d22a:	6893      	ldr	r3, [r2, #8]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	2b00      	cmp	r3, #0
 800d230:	b410      	push	{r4}
 800d232:	6093      	str	r3, [r2, #8]
 800d234:	da08      	bge.n	800d248 <__sfputc_r+0x1e>
 800d236:	6994      	ldr	r4, [r2, #24]
 800d238:	42a3      	cmp	r3, r4
 800d23a:	db01      	blt.n	800d240 <__sfputc_r+0x16>
 800d23c:	290a      	cmp	r1, #10
 800d23e:	d103      	bne.n	800d248 <__sfputc_r+0x1e>
 800d240:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d244:	f000 b932 	b.w	800d4ac <__swbuf_r>
 800d248:	6813      	ldr	r3, [r2, #0]
 800d24a:	1c58      	adds	r0, r3, #1
 800d24c:	6010      	str	r0, [r2, #0]
 800d24e:	7019      	strb	r1, [r3, #0]
 800d250:	4608      	mov	r0, r1
 800d252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <__sfputs_r>:
 800d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d25a:	4606      	mov	r6, r0
 800d25c:	460f      	mov	r7, r1
 800d25e:	4614      	mov	r4, r2
 800d260:	18d5      	adds	r5, r2, r3
 800d262:	42ac      	cmp	r4, r5
 800d264:	d101      	bne.n	800d26a <__sfputs_r+0x12>
 800d266:	2000      	movs	r0, #0
 800d268:	e007      	b.n	800d27a <__sfputs_r+0x22>
 800d26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26e:	463a      	mov	r2, r7
 800d270:	4630      	mov	r0, r6
 800d272:	f7ff ffda 	bl	800d22a <__sfputc_r>
 800d276:	1c43      	adds	r3, r0, #1
 800d278:	d1f3      	bne.n	800d262 <__sfputs_r+0xa>
 800d27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d27c <_vfiprintf_r>:
 800d27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d280:	460d      	mov	r5, r1
 800d282:	b09d      	sub	sp, #116	@ 0x74
 800d284:	4614      	mov	r4, r2
 800d286:	4698      	mov	r8, r3
 800d288:	4606      	mov	r6, r0
 800d28a:	b118      	cbz	r0, 800d294 <_vfiprintf_r+0x18>
 800d28c:	6a03      	ldr	r3, [r0, #32]
 800d28e:	b90b      	cbnz	r3, 800d294 <_vfiprintf_r+0x18>
 800d290:	f7fc fdf8 	bl	8009e84 <__sinit>
 800d294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d296:	07d9      	lsls	r1, r3, #31
 800d298:	d405      	bmi.n	800d2a6 <_vfiprintf_r+0x2a>
 800d29a:	89ab      	ldrh	r3, [r5, #12]
 800d29c:	059a      	lsls	r2, r3, #22
 800d29e:	d402      	bmi.n	800d2a6 <_vfiprintf_r+0x2a>
 800d2a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2a2:	f7fc ff06 	bl	800a0b2 <__retarget_lock_acquire_recursive>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	071b      	lsls	r3, r3, #28
 800d2aa:	d501      	bpl.n	800d2b0 <_vfiprintf_r+0x34>
 800d2ac:	692b      	ldr	r3, [r5, #16]
 800d2ae:	b99b      	cbnz	r3, 800d2d8 <_vfiprintf_r+0x5c>
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	f000 f938 	bl	800d528 <__swsetup_r>
 800d2b8:	b170      	cbz	r0, 800d2d8 <_vfiprintf_r+0x5c>
 800d2ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2bc:	07dc      	lsls	r4, r3, #31
 800d2be:	d504      	bpl.n	800d2ca <_vfiprintf_r+0x4e>
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	b01d      	add	sp, #116	@ 0x74
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ca:	89ab      	ldrh	r3, [r5, #12]
 800d2cc:	0598      	lsls	r0, r3, #22
 800d2ce:	d4f7      	bmi.n	800d2c0 <_vfiprintf_r+0x44>
 800d2d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2d2:	f7fc feef 	bl	800a0b4 <__retarget_lock_release_recursive>
 800d2d6:	e7f3      	b.n	800d2c0 <_vfiprintf_r+0x44>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2dc:	2320      	movs	r3, #32
 800d2de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2e6:	2330      	movs	r3, #48	@ 0x30
 800d2e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d498 <_vfiprintf_r+0x21c>
 800d2ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2f0:	f04f 0901 	mov.w	r9, #1
 800d2f4:	4623      	mov	r3, r4
 800d2f6:	469a      	mov	sl, r3
 800d2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2fc:	b10a      	cbz	r2, 800d302 <_vfiprintf_r+0x86>
 800d2fe:	2a25      	cmp	r2, #37	@ 0x25
 800d300:	d1f9      	bne.n	800d2f6 <_vfiprintf_r+0x7a>
 800d302:	ebba 0b04 	subs.w	fp, sl, r4
 800d306:	d00b      	beq.n	800d320 <_vfiprintf_r+0xa4>
 800d308:	465b      	mov	r3, fp
 800d30a:	4622      	mov	r2, r4
 800d30c:	4629      	mov	r1, r5
 800d30e:	4630      	mov	r0, r6
 800d310:	f7ff ffa2 	bl	800d258 <__sfputs_r>
 800d314:	3001      	adds	r0, #1
 800d316:	f000 80a7 	beq.w	800d468 <_vfiprintf_r+0x1ec>
 800d31a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d31c:	445a      	add	r2, fp
 800d31e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d320:	f89a 3000 	ldrb.w	r3, [sl]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 809f 	beq.w	800d468 <_vfiprintf_r+0x1ec>
 800d32a:	2300      	movs	r3, #0
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295
 800d330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d334:	f10a 0a01 	add.w	sl, sl, #1
 800d338:	9304      	str	r3, [sp, #16]
 800d33a:	9307      	str	r3, [sp, #28]
 800d33c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d340:	931a      	str	r3, [sp, #104]	@ 0x68
 800d342:	4654      	mov	r4, sl
 800d344:	2205      	movs	r2, #5
 800d346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d34a:	4853      	ldr	r0, [pc, #332]	@ (800d498 <_vfiprintf_r+0x21c>)
 800d34c:	f7f2 ff48 	bl	80001e0 <memchr>
 800d350:	9a04      	ldr	r2, [sp, #16]
 800d352:	b9d8      	cbnz	r0, 800d38c <_vfiprintf_r+0x110>
 800d354:	06d1      	lsls	r1, r2, #27
 800d356:	bf44      	itt	mi
 800d358:	2320      	movmi	r3, #32
 800d35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d35e:	0713      	lsls	r3, r2, #28
 800d360:	bf44      	itt	mi
 800d362:	232b      	movmi	r3, #43	@ 0x2b
 800d364:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d368:	f89a 3000 	ldrb.w	r3, [sl]
 800d36c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d36e:	d015      	beq.n	800d39c <_vfiprintf_r+0x120>
 800d370:	9a07      	ldr	r2, [sp, #28]
 800d372:	4654      	mov	r4, sl
 800d374:	2000      	movs	r0, #0
 800d376:	f04f 0c0a 	mov.w	ip, #10
 800d37a:	4621      	mov	r1, r4
 800d37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d380:	3b30      	subs	r3, #48	@ 0x30
 800d382:	2b09      	cmp	r3, #9
 800d384:	d94b      	bls.n	800d41e <_vfiprintf_r+0x1a2>
 800d386:	b1b0      	cbz	r0, 800d3b6 <_vfiprintf_r+0x13a>
 800d388:	9207      	str	r2, [sp, #28]
 800d38a:	e014      	b.n	800d3b6 <_vfiprintf_r+0x13a>
 800d38c:	eba0 0308 	sub.w	r3, r0, r8
 800d390:	fa09 f303 	lsl.w	r3, r9, r3
 800d394:	4313      	orrs	r3, r2
 800d396:	9304      	str	r3, [sp, #16]
 800d398:	46a2      	mov	sl, r4
 800d39a:	e7d2      	b.n	800d342 <_vfiprintf_r+0xc6>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	1d19      	adds	r1, r3, #4
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	9103      	str	r1, [sp, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	bfbb      	ittet	lt
 800d3a8:	425b      	neglt	r3, r3
 800d3aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ae:	9307      	strge	r3, [sp, #28]
 800d3b0:	9307      	strlt	r3, [sp, #28]
 800d3b2:	bfb8      	it	lt
 800d3b4:	9204      	strlt	r2, [sp, #16]
 800d3b6:	7823      	ldrb	r3, [r4, #0]
 800d3b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3ba:	d10a      	bne.n	800d3d2 <_vfiprintf_r+0x156>
 800d3bc:	7863      	ldrb	r3, [r4, #1]
 800d3be:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3c0:	d132      	bne.n	800d428 <_vfiprintf_r+0x1ac>
 800d3c2:	9b03      	ldr	r3, [sp, #12]
 800d3c4:	1d1a      	adds	r2, r3, #4
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	9203      	str	r2, [sp, #12]
 800d3ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3ce:	3402      	adds	r4, #2
 800d3d0:	9305      	str	r3, [sp, #20]
 800d3d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d4a8 <_vfiprintf_r+0x22c>
 800d3d6:	7821      	ldrb	r1, [r4, #0]
 800d3d8:	2203      	movs	r2, #3
 800d3da:	4650      	mov	r0, sl
 800d3dc:	f7f2 ff00 	bl	80001e0 <memchr>
 800d3e0:	b138      	cbz	r0, 800d3f2 <_vfiprintf_r+0x176>
 800d3e2:	9b04      	ldr	r3, [sp, #16]
 800d3e4:	eba0 000a 	sub.w	r0, r0, sl
 800d3e8:	2240      	movs	r2, #64	@ 0x40
 800d3ea:	4082      	lsls	r2, r0
 800d3ec:	4313      	orrs	r3, r2
 800d3ee:	3401      	adds	r4, #1
 800d3f0:	9304      	str	r3, [sp, #16]
 800d3f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f6:	4829      	ldr	r0, [pc, #164]	@ (800d49c <_vfiprintf_r+0x220>)
 800d3f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3fc:	2206      	movs	r2, #6
 800d3fe:	f7f2 feef 	bl	80001e0 <memchr>
 800d402:	2800      	cmp	r0, #0
 800d404:	d03f      	beq.n	800d486 <_vfiprintf_r+0x20a>
 800d406:	4b26      	ldr	r3, [pc, #152]	@ (800d4a0 <_vfiprintf_r+0x224>)
 800d408:	bb1b      	cbnz	r3, 800d452 <_vfiprintf_r+0x1d6>
 800d40a:	9b03      	ldr	r3, [sp, #12]
 800d40c:	3307      	adds	r3, #7
 800d40e:	f023 0307 	bic.w	r3, r3, #7
 800d412:	3308      	adds	r3, #8
 800d414:	9303      	str	r3, [sp, #12]
 800d416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d418:	443b      	add	r3, r7
 800d41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d41c:	e76a      	b.n	800d2f4 <_vfiprintf_r+0x78>
 800d41e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d422:	460c      	mov	r4, r1
 800d424:	2001      	movs	r0, #1
 800d426:	e7a8      	b.n	800d37a <_vfiprintf_r+0xfe>
 800d428:	2300      	movs	r3, #0
 800d42a:	3401      	adds	r4, #1
 800d42c:	9305      	str	r3, [sp, #20]
 800d42e:	4619      	mov	r1, r3
 800d430:	f04f 0c0a 	mov.w	ip, #10
 800d434:	4620      	mov	r0, r4
 800d436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d43a:	3a30      	subs	r2, #48	@ 0x30
 800d43c:	2a09      	cmp	r2, #9
 800d43e:	d903      	bls.n	800d448 <_vfiprintf_r+0x1cc>
 800d440:	2b00      	cmp	r3, #0
 800d442:	d0c6      	beq.n	800d3d2 <_vfiprintf_r+0x156>
 800d444:	9105      	str	r1, [sp, #20]
 800d446:	e7c4      	b.n	800d3d2 <_vfiprintf_r+0x156>
 800d448:	fb0c 2101 	mla	r1, ip, r1, r2
 800d44c:	4604      	mov	r4, r0
 800d44e:	2301      	movs	r3, #1
 800d450:	e7f0      	b.n	800d434 <_vfiprintf_r+0x1b8>
 800d452:	ab03      	add	r3, sp, #12
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	462a      	mov	r2, r5
 800d458:	4b12      	ldr	r3, [pc, #72]	@ (800d4a4 <_vfiprintf_r+0x228>)
 800d45a:	a904      	add	r1, sp, #16
 800d45c:	4630      	mov	r0, r6
 800d45e:	f7fb feb9 	bl	80091d4 <_printf_float>
 800d462:	4607      	mov	r7, r0
 800d464:	1c78      	adds	r0, r7, #1
 800d466:	d1d6      	bne.n	800d416 <_vfiprintf_r+0x19a>
 800d468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d46a:	07d9      	lsls	r1, r3, #31
 800d46c:	d405      	bmi.n	800d47a <_vfiprintf_r+0x1fe>
 800d46e:	89ab      	ldrh	r3, [r5, #12]
 800d470:	059a      	lsls	r2, r3, #22
 800d472:	d402      	bmi.n	800d47a <_vfiprintf_r+0x1fe>
 800d474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d476:	f7fc fe1d 	bl	800a0b4 <__retarget_lock_release_recursive>
 800d47a:	89ab      	ldrh	r3, [r5, #12]
 800d47c:	065b      	lsls	r3, r3, #25
 800d47e:	f53f af1f 	bmi.w	800d2c0 <_vfiprintf_r+0x44>
 800d482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d484:	e71e      	b.n	800d2c4 <_vfiprintf_r+0x48>
 800d486:	ab03      	add	r3, sp, #12
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	462a      	mov	r2, r5
 800d48c:	4b05      	ldr	r3, [pc, #20]	@ (800d4a4 <_vfiprintf_r+0x228>)
 800d48e:	a904      	add	r1, sp, #16
 800d490:	4630      	mov	r0, r6
 800d492:	f7fc f937 	bl	8009704 <_printf_i>
 800d496:	e7e4      	b.n	800d462 <_vfiprintf_r+0x1e6>
 800d498:	080104b0 	.word	0x080104b0
 800d49c:	080104ba 	.word	0x080104ba
 800d4a0:	080091d5 	.word	0x080091d5
 800d4a4:	0800d259 	.word	0x0800d259
 800d4a8:	080104b6 	.word	0x080104b6

0800d4ac <__swbuf_r>:
 800d4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ae:	460e      	mov	r6, r1
 800d4b0:	4614      	mov	r4, r2
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	b118      	cbz	r0, 800d4be <__swbuf_r+0x12>
 800d4b6:	6a03      	ldr	r3, [r0, #32]
 800d4b8:	b90b      	cbnz	r3, 800d4be <__swbuf_r+0x12>
 800d4ba:	f7fc fce3 	bl	8009e84 <__sinit>
 800d4be:	69a3      	ldr	r3, [r4, #24]
 800d4c0:	60a3      	str	r3, [r4, #8]
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	071a      	lsls	r2, r3, #28
 800d4c6:	d501      	bpl.n	800d4cc <__swbuf_r+0x20>
 800d4c8:	6923      	ldr	r3, [r4, #16]
 800d4ca:	b943      	cbnz	r3, 800d4de <__swbuf_r+0x32>
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	f000 f82a 	bl	800d528 <__swsetup_r>
 800d4d4:	b118      	cbz	r0, 800d4de <__swbuf_r+0x32>
 800d4d6:	f04f 37ff 	mov.w	r7, #4294967295
 800d4da:	4638      	mov	r0, r7
 800d4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	6922      	ldr	r2, [r4, #16]
 800d4e2:	1a98      	subs	r0, r3, r2
 800d4e4:	6963      	ldr	r3, [r4, #20]
 800d4e6:	b2f6      	uxtb	r6, r6
 800d4e8:	4283      	cmp	r3, r0
 800d4ea:	4637      	mov	r7, r6
 800d4ec:	dc05      	bgt.n	800d4fa <__swbuf_r+0x4e>
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	f7ff fa47 	bl	800c984 <_fflush_r>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d1ed      	bne.n	800d4d6 <__swbuf_r+0x2a>
 800d4fa:	68a3      	ldr	r3, [r4, #8]
 800d4fc:	3b01      	subs	r3, #1
 800d4fe:	60a3      	str	r3, [r4, #8]
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	1c5a      	adds	r2, r3, #1
 800d504:	6022      	str	r2, [r4, #0]
 800d506:	701e      	strb	r6, [r3, #0]
 800d508:	6962      	ldr	r2, [r4, #20]
 800d50a:	1c43      	adds	r3, r0, #1
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d004      	beq.n	800d51a <__swbuf_r+0x6e>
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	07db      	lsls	r3, r3, #31
 800d514:	d5e1      	bpl.n	800d4da <__swbuf_r+0x2e>
 800d516:	2e0a      	cmp	r6, #10
 800d518:	d1df      	bne.n	800d4da <__swbuf_r+0x2e>
 800d51a:	4621      	mov	r1, r4
 800d51c:	4628      	mov	r0, r5
 800d51e:	f7ff fa31 	bl	800c984 <_fflush_r>
 800d522:	2800      	cmp	r0, #0
 800d524:	d0d9      	beq.n	800d4da <__swbuf_r+0x2e>
 800d526:	e7d6      	b.n	800d4d6 <__swbuf_r+0x2a>

0800d528 <__swsetup_r>:
 800d528:	b538      	push	{r3, r4, r5, lr}
 800d52a:	4b29      	ldr	r3, [pc, #164]	@ (800d5d0 <__swsetup_r+0xa8>)
 800d52c:	4605      	mov	r5, r0
 800d52e:	6818      	ldr	r0, [r3, #0]
 800d530:	460c      	mov	r4, r1
 800d532:	b118      	cbz	r0, 800d53c <__swsetup_r+0x14>
 800d534:	6a03      	ldr	r3, [r0, #32]
 800d536:	b90b      	cbnz	r3, 800d53c <__swsetup_r+0x14>
 800d538:	f7fc fca4 	bl	8009e84 <__sinit>
 800d53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d540:	0719      	lsls	r1, r3, #28
 800d542:	d422      	bmi.n	800d58a <__swsetup_r+0x62>
 800d544:	06da      	lsls	r2, r3, #27
 800d546:	d407      	bmi.n	800d558 <__swsetup_r+0x30>
 800d548:	2209      	movs	r2, #9
 800d54a:	602a      	str	r2, [r5, #0]
 800d54c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d550:	81a3      	strh	r3, [r4, #12]
 800d552:	f04f 30ff 	mov.w	r0, #4294967295
 800d556:	e033      	b.n	800d5c0 <__swsetup_r+0x98>
 800d558:	0758      	lsls	r0, r3, #29
 800d55a:	d512      	bpl.n	800d582 <__swsetup_r+0x5a>
 800d55c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d55e:	b141      	cbz	r1, 800d572 <__swsetup_r+0x4a>
 800d560:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d564:	4299      	cmp	r1, r3
 800d566:	d002      	beq.n	800d56e <__swsetup_r+0x46>
 800d568:	4628      	mov	r0, r5
 800d56a:	f7fd fbf9 	bl	800ad60 <_free_r>
 800d56e:	2300      	movs	r3, #0
 800d570:	6363      	str	r3, [r4, #52]	@ 0x34
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	2300      	movs	r3, #0
 800d57c:	6063      	str	r3, [r4, #4]
 800d57e:	6923      	ldr	r3, [r4, #16]
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	f043 0308 	orr.w	r3, r3, #8
 800d588:	81a3      	strh	r3, [r4, #12]
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	b94b      	cbnz	r3, 800d5a2 <__swsetup_r+0x7a>
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d598:	d003      	beq.n	800d5a2 <__swsetup_r+0x7a>
 800d59a:	4621      	mov	r1, r4
 800d59c:	4628      	mov	r0, r5
 800d59e:	f000 f883 	bl	800d6a8 <__smakebuf_r>
 800d5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a6:	f013 0201 	ands.w	r2, r3, #1
 800d5aa:	d00a      	beq.n	800d5c2 <__swsetup_r+0x9a>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	60a2      	str	r2, [r4, #8]
 800d5b0:	6962      	ldr	r2, [r4, #20]
 800d5b2:	4252      	negs	r2, r2
 800d5b4:	61a2      	str	r2, [r4, #24]
 800d5b6:	6922      	ldr	r2, [r4, #16]
 800d5b8:	b942      	cbnz	r2, 800d5cc <__swsetup_r+0xa4>
 800d5ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d5be:	d1c5      	bne.n	800d54c <__swsetup_r+0x24>
 800d5c0:	bd38      	pop	{r3, r4, r5, pc}
 800d5c2:	0799      	lsls	r1, r3, #30
 800d5c4:	bf58      	it	pl
 800d5c6:	6962      	ldrpl	r2, [r4, #20]
 800d5c8:	60a2      	str	r2, [r4, #8]
 800d5ca:	e7f4      	b.n	800d5b6 <__swsetup_r+0x8e>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e7f7      	b.n	800d5c0 <__swsetup_r+0x98>
 800d5d0:	20000044 	.word	0x20000044

0800d5d4 <_raise_r>:
 800d5d4:	291f      	cmp	r1, #31
 800d5d6:	b538      	push	{r3, r4, r5, lr}
 800d5d8:	4605      	mov	r5, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	d904      	bls.n	800d5e8 <_raise_r+0x14>
 800d5de:	2316      	movs	r3, #22
 800d5e0:	6003      	str	r3, [r0, #0]
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	bd38      	pop	{r3, r4, r5, pc}
 800d5e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5ea:	b112      	cbz	r2, 800d5f2 <_raise_r+0x1e>
 800d5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5f0:	b94b      	cbnz	r3, 800d606 <_raise_r+0x32>
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 f830 	bl	800d658 <_getpid_r>
 800d5f8:	4622      	mov	r2, r4
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d602:	f000 b817 	b.w	800d634 <_kill_r>
 800d606:	2b01      	cmp	r3, #1
 800d608:	d00a      	beq.n	800d620 <_raise_r+0x4c>
 800d60a:	1c59      	adds	r1, r3, #1
 800d60c:	d103      	bne.n	800d616 <_raise_r+0x42>
 800d60e:	2316      	movs	r3, #22
 800d610:	6003      	str	r3, [r0, #0]
 800d612:	2001      	movs	r0, #1
 800d614:	e7e7      	b.n	800d5e6 <_raise_r+0x12>
 800d616:	2100      	movs	r1, #0
 800d618:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d61c:	4620      	mov	r0, r4
 800d61e:	4798      	blx	r3
 800d620:	2000      	movs	r0, #0
 800d622:	e7e0      	b.n	800d5e6 <_raise_r+0x12>

0800d624 <raise>:
 800d624:	4b02      	ldr	r3, [pc, #8]	@ (800d630 <raise+0xc>)
 800d626:	4601      	mov	r1, r0
 800d628:	6818      	ldr	r0, [r3, #0]
 800d62a:	f7ff bfd3 	b.w	800d5d4 <_raise_r>
 800d62e:	bf00      	nop
 800d630:	20000044 	.word	0x20000044

0800d634 <_kill_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4d07      	ldr	r5, [pc, #28]	@ (800d654 <_kill_r+0x20>)
 800d638:	2300      	movs	r3, #0
 800d63a:	4604      	mov	r4, r0
 800d63c:	4608      	mov	r0, r1
 800d63e:	4611      	mov	r1, r2
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	f7f6 f98d 	bl	8003960 <_kill>
 800d646:	1c43      	adds	r3, r0, #1
 800d648:	d102      	bne.n	800d650 <_kill_r+0x1c>
 800d64a:	682b      	ldr	r3, [r5, #0]
 800d64c:	b103      	cbz	r3, 800d650 <_kill_r+0x1c>
 800d64e:	6023      	str	r3, [r4, #0]
 800d650:	bd38      	pop	{r3, r4, r5, pc}
 800d652:	bf00      	nop
 800d654:	2000191c 	.word	0x2000191c

0800d658 <_getpid_r>:
 800d658:	f7f6 b97a 	b.w	8003950 <_getpid>

0800d65c <__swhatbuf_r>:
 800d65c:	b570      	push	{r4, r5, r6, lr}
 800d65e:	460c      	mov	r4, r1
 800d660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d664:	2900      	cmp	r1, #0
 800d666:	b096      	sub	sp, #88	@ 0x58
 800d668:	4615      	mov	r5, r2
 800d66a:	461e      	mov	r6, r3
 800d66c:	da0d      	bge.n	800d68a <__swhatbuf_r+0x2e>
 800d66e:	89a3      	ldrh	r3, [r4, #12]
 800d670:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d674:	f04f 0100 	mov.w	r1, #0
 800d678:	bf14      	ite	ne
 800d67a:	2340      	movne	r3, #64	@ 0x40
 800d67c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d680:	2000      	movs	r0, #0
 800d682:	6031      	str	r1, [r6, #0]
 800d684:	602b      	str	r3, [r5, #0]
 800d686:	b016      	add	sp, #88	@ 0x58
 800d688:	bd70      	pop	{r4, r5, r6, pc}
 800d68a:	466a      	mov	r2, sp
 800d68c:	f000 f848 	bl	800d720 <_fstat_r>
 800d690:	2800      	cmp	r0, #0
 800d692:	dbec      	blt.n	800d66e <__swhatbuf_r+0x12>
 800d694:	9901      	ldr	r1, [sp, #4]
 800d696:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d69a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d69e:	4259      	negs	r1, r3
 800d6a0:	4159      	adcs	r1, r3
 800d6a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6a6:	e7eb      	b.n	800d680 <__swhatbuf_r+0x24>

0800d6a8 <__smakebuf_r>:
 800d6a8:	898b      	ldrh	r3, [r1, #12]
 800d6aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6ac:	079d      	lsls	r5, r3, #30
 800d6ae:	4606      	mov	r6, r0
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	d507      	bpl.n	800d6c4 <__smakebuf_r+0x1c>
 800d6b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	6123      	str	r3, [r4, #16]
 800d6bc:	2301      	movs	r3, #1
 800d6be:	6163      	str	r3, [r4, #20]
 800d6c0:	b003      	add	sp, #12
 800d6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6c4:	ab01      	add	r3, sp, #4
 800d6c6:	466a      	mov	r2, sp
 800d6c8:	f7ff ffc8 	bl	800d65c <__swhatbuf_r>
 800d6cc:	9f00      	ldr	r7, [sp, #0]
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	4639      	mov	r1, r7
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f7fd fbb8 	bl	800ae48 <_malloc_r>
 800d6d8:	b948      	cbnz	r0, 800d6ee <__smakebuf_r+0x46>
 800d6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6de:	059a      	lsls	r2, r3, #22
 800d6e0:	d4ee      	bmi.n	800d6c0 <__smakebuf_r+0x18>
 800d6e2:	f023 0303 	bic.w	r3, r3, #3
 800d6e6:	f043 0302 	orr.w	r3, r3, #2
 800d6ea:	81a3      	strh	r3, [r4, #12]
 800d6ec:	e7e2      	b.n	800d6b4 <__smakebuf_r+0xc>
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	6020      	str	r0, [r4, #0]
 800d6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6f6:	81a3      	strh	r3, [r4, #12]
 800d6f8:	9b01      	ldr	r3, [sp, #4]
 800d6fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6fe:	b15b      	cbz	r3, 800d718 <__smakebuf_r+0x70>
 800d700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d704:	4630      	mov	r0, r6
 800d706:	f000 f81d 	bl	800d744 <_isatty_r>
 800d70a:	b128      	cbz	r0, 800d718 <__smakebuf_r+0x70>
 800d70c:	89a3      	ldrh	r3, [r4, #12]
 800d70e:	f023 0303 	bic.w	r3, r3, #3
 800d712:	f043 0301 	orr.w	r3, r3, #1
 800d716:	81a3      	strh	r3, [r4, #12]
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	431d      	orrs	r5, r3
 800d71c:	81a5      	strh	r5, [r4, #12]
 800d71e:	e7cf      	b.n	800d6c0 <__smakebuf_r+0x18>

0800d720 <_fstat_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d07      	ldr	r5, [pc, #28]	@ (800d740 <_fstat_r+0x20>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	4611      	mov	r1, r2
 800d72c:	602b      	str	r3, [r5, #0]
 800d72e:	f7f6 f977 	bl	8003a20 <_fstat>
 800d732:	1c43      	adds	r3, r0, #1
 800d734:	d102      	bne.n	800d73c <_fstat_r+0x1c>
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	b103      	cbz	r3, 800d73c <_fstat_r+0x1c>
 800d73a:	6023      	str	r3, [r4, #0]
 800d73c:	bd38      	pop	{r3, r4, r5, pc}
 800d73e:	bf00      	nop
 800d740:	2000191c 	.word	0x2000191c

0800d744 <_isatty_r>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	4d06      	ldr	r5, [pc, #24]	@ (800d760 <_isatty_r+0x1c>)
 800d748:	2300      	movs	r3, #0
 800d74a:	4604      	mov	r4, r0
 800d74c:	4608      	mov	r0, r1
 800d74e:	602b      	str	r3, [r5, #0]
 800d750:	f7f6 f976 	bl	8003a40 <_isatty>
 800d754:	1c43      	adds	r3, r0, #1
 800d756:	d102      	bne.n	800d75e <_isatty_r+0x1a>
 800d758:	682b      	ldr	r3, [r5, #0]
 800d75a:	b103      	cbz	r3, 800d75e <_isatty_r+0x1a>
 800d75c:	6023      	str	r3, [r4, #0]
 800d75e:	bd38      	pop	{r3, r4, r5, pc}
 800d760:	2000191c 	.word	0x2000191c

0800d764 <_init>:
 800d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d766:	bf00      	nop
 800d768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d76a:	bc08      	pop	{r3}
 800d76c:	469e      	mov	lr, r3
 800d76e:	4770      	bx	lr

0800d770 <_fini>:
 800d770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d772:	bf00      	nop
 800d774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d776:	bc08      	pop	{r3}
 800d778:	469e      	mov	lr, r3
 800d77a:	4770      	bx	lr
